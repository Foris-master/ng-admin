import { of as observableOf } from 'rxjs';
import { Injectable } from '@angular/core';
import { UserData } from '../data/users';
import * as i0 from "@angular/core";
export class UserService extends UserData {
    constructor() {
        super(...arguments);
        this.time = new Date;
        this.users = {
            nick: { name: 'Nick Jones', picture: 'assets/images/nick.png' },
            eva: { name: 'Eva Moor', picture: 'assets/images/eva.png' },
            jack: { name: 'Jack Williams', picture: 'assets/images/jack.png' },
            lee: { name: 'Lee Wong', picture: 'assets/images/lee.png' },
            alan: { name: 'Alan Thompson', picture: 'assets/images/alan.png' },
            kate: { name: 'Kate Martinez', picture: 'assets/images/kate.png' },
        };
        this.types = {
            mobile: 'mobile',
            home: 'home',
            work: 'work',
        };
        this.contacts = [
            { user: this.users.nick, type: this.types.mobile },
            { user: this.users.eva, type: this.types.home },
            { user: this.users.jack, type: this.types.mobile },
            { user: this.users.lee, type: this.types.mobile },
            { user: this.users.alan, type: this.types.home },
            { user: this.users.kate, type: this.types.work },
        ];
        this.recentUsers = [
            { user: this.users.alan, type: this.types.home, time: this.time.setHours(21, 12) },
            { user: this.users.eva, type: this.types.home, time: this.time.setHours(17, 45) },
            { user: this.users.nick, type: this.types.mobile, time: this.time.setHours(5, 29) },
            { user: this.users.lee, type: this.types.mobile, time: this.time.setHours(11, 24) },
            { user: this.users.jack, type: this.types.mobile, time: this.time.setHours(10, 45) },
            { user: this.users.kate, type: this.types.work, time: this.time.setHours(9, 42) },
            { user: this.users.kate, type: this.types.work, time: this.time.setHours(9, 31) },
            { user: this.users.jack, type: this.types.mobile, time: this.time.setHours(8, 0) },
        ];
    }
    getUsers() {
        return observableOf(this.users);
    }
    getContacts() {
        return observableOf(this.contacts);
    }
    getRecentUsers() {
        return observableOf(this.recentUsers);
    }
}
UserService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0, type: UserService, deps: null, target: i0.ɵɵFactoryTarget.Injectable });
UserService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0, type: UserService });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0, type: UserService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXNlcnMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3Jlc3QtYWRtaW4vc3JjL2xpYi9AY29yZS9tb2NrL3VzZXJzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLEVBQUUsSUFBSSxZQUFZLEVBQWUsTUFBTSxNQUFNLENBQUM7QUFDdkQsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQXlCLFFBQVEsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFHaEUsTUFBTSxPQUFPLFdBQVksU0FBUSxRQUFRO0lBRHpDOztRQUdVLFNBQUksR0FBUyxJQUFJLElBQUksQ0FBQztRQUV0QixVQUFLLEdBQUc7WUFDZCxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRTtZQUMvRCxHQUFHLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRTtZQUMzRCxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRTtZQUNsRSxHQUFHLEVBQUUsRUFBRSxJQUFJLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSx1QkFBdUIsRUFBRTtZQUMzRCxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRTtZQUNsRSxJQUFJLEVBQUUsRUFBRSxJQUFJLEVBQUUsZUFBZSxFQUFFLE9BQU8sRUFBRSx3QkFBd0IsRUFBRTtTQUNuRSxDQUFDO1FBQ00sVUFBSyxHQUFHO1lBQ2QsTUFBTSxFQUFFLFFBQVE7WUFDaEIsSUFBSSxFQUFFLE1BQU07WUFDWixJQUFJLEVBQUUsTUFBTTtTQUNiLENBQUM7UUFDTSxhQUFRLEdBQWU7WUFDN0IsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ2xELEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtZQUMvQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDbEQsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQ2pELEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRTtZQUNoRCxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUU7U0FDakQsQ0FBQztRQUNNLGdCQUFXLEdBQW1CO1lBQ3BDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFDO1lBQ2pGLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFDO1lBQ2hGLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFDO1lBQ2xGLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFDO1lBQ2xGLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFDO1lBQ25GLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFDO1lBQ2hGLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFDO1lBQ2hGLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxFQUFDO1NBQ2xGLENBQUM7S0FhSDtJQVhDLFFBQVE7UUFDTixPQUFPLFlBQVksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEMsQ0FBQztJQUVELFdBQVc7UUFDVCxPQUFPLFlBQVksQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7SUFDckMsQ0FBQztJQUVELGNBQWM7UUFDWixPQUFPLFlBQVksQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDeEMsQ0FBQzs7d0dBOUNVLFdBQVc7NEdBQVgsV0FBVzsyRkFBWCxXQUFXO2tCQUR2QixVQUFVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgb2YgYXMgb2JzZXJ2YWJsZU9mLCAgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29udGFjdHMsIFJlY2VudFVzZXJzLCBVc2VyRGF0YSB9IGZyb20gJy4uL2RhdGEvdXNlcnMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgVXNlclNlcnZpY2UgZXh0ZW5kcyBVc2VyRGF0YSB7XG5cbiAgcHJpdmF0ZSB0aW1lOiBEYXRlID0gbmV3IERhdGU7XG5cbiAgcHJpdmF0ZSB1c2VycyA9IHtcbiAgICBuaWNrOiB7IG5hbWU6ICdOaWNrIEpvbmVzJywgcGljdHVyZTogJ2Fzc2V0cy9pbWFnZXMvbmljay5wbmcnIH0sXG4gICAgZXZhOiB7IG5hbWU6ICdFdmEgTW9vcicsIHBpY3R1cmU6ICdhc3NldHMvaW1hZ2VzL2V2YS5wbmcnIH0sXG4gICAgamFjazogeyBuYW1lOiAnSmFjayBXaWxsaWFtcycsIHBpY3R1cmU6ICdhc3NldHMvaW1hZ2VzL2phY2sucG5nJyB9LFxuICAgIGxlZTogeyBuYW1lOiAnTGVlIFdvbmcnLCBwaWN0dXJlOiAnYXNzZXRzL2ltYWdlcy9sZWUucG5nJyB9LFxuICAgIGFsYW46IHsgbmFtZTogJ0FsYW4gVGhvbXBzb24nLCBwaWN0dXJlOiAnYXNzZXRzL2ltYWdlcy9hbGFuLnBuZycgfSxcbiAgICBrYXRlOiB7IG5hbWU6ICdLYXRlIE1hcnRpbmV6JywgcGljdHVyZTogJ2Fzc2V0cy9pbWFnZXMva2F0ZS5wbmcnIH0sXG4gIH07XG4gIHByaXZhdGUgdHlwZXMgPSB7XG4gICAgbW9iaWxlOiAnbW9iaWxlJyxcbiAgICBob21lOiAnaG9tZScsXG4gICAgd29yazogJ3dvcmsnLFxuICB9O1xuICBwcml2YXRlIGNvbnRhY3RzOiBDb250YWN0c1tdID0gW1xuICAgIHsgdXNlcjogdGhpcy51c2Vycy5uaWNrLCB0eXBlOiB0aGlzLnR5cGVzLm1vYmlsZSB9LFxuICAgIHsgdXNlcjogdGhpcy51c2Vycy5ldmEsIHR5cGU6IHRoaXMudHlwZXMuaG9tZSB9LFxuICAgIHsgdXNlcjogdGhpcy51c2Vycy5qYWNrLCB0eXBlOiB0aGlzLnR5cGVzLm1vYmlsZSB9LFxuICAgIHsgdXNlcjogdGhpcy51c2Vycy5sZWUsIHR5cGU6IHRoaXMudHlwZXMubW9iaWxlIH0sXG4gICAgeyB1c2VyOiB0aGlzLnVzZXJzLmFsYW4sIHR5cGU6IHRoaXMudHlwZXMuaG9tZSB9LFxuICAgIHsgdXNlcjogdGhpcy51c2Vycy5rYXRlLCB0eXBlOiB0aGlzLnR5cGVzLndvcmsgfSxcbiAgXTtcbiAgcHJpdmF0ZSByZWNlbnRVc2VyczogUmVjZW50VXNlcnNbXSAgPSBbXG4gICAgeyB1c2VyOiB0aGlzLnVzZXJzLmFsYW4sIHR5cGU6IHRoaXMudHlwZXMuaG9tZSwgdGltZTogdGhpcy50aW1lLnNldEhvdXJzKDIxLCAxMil9LFxuICAgIHsgdXNlcjogdGhpcy51c2Vycy5ldmEsIHR5cGU6IHRoaXMudHlwZXMuaG9tZSwgdGltZTogdGhpcy50aW1lLnNldEhvdXJzKDE3LCA0NSl9LFxuICAgIHsgdXNlcjogdGhpcy51c2Vycy5uaWNrLCB0eXBlOiB0aGlzLnR5cGVzLm1vYmlsZSwgdGltZTogdGhpcy50aW1lLnNldEhvdXJzKDUsIDI5KX0sXG4gICAgeyB1c2VyOiB0aGlzLnVzZXJzLmxlZSwgdHlwZTogdGhpcy50eXBlcy5tb2JpbGUsIHRpbWU6IHRoaXMudGltZS5zZXRIb3VycygxMSwgMjQpfSxcbiAgICB7IHVzZXI6IHRoaXMudXNlcnMuamFjaywgdHlwZTogdGhpcy50eXBlcy5tb2JpbGUsIHRpbWU6IHRoaXMudGltZS5zZXRIb3VycygxMCwgNDUpfSxcbiAgICB7IHVzZXI6IHRoaXMudXNlcnMua2F0ZSwgdHlwZTogdGhpcy50eXBlcy53b3JrLCB0aW1lOiB0aGlzLnRpbWUuc2V0SG91cnMoOSwgNDIpfSxcbiAgICB7IHVzZXI6IHRoaXMudXNlcnMua2F0ZSwgdHlwZTogdGhpcy50eXBlcy53b3JrLCB0aW1lOiB0aGlzLnRpbWUuc2V0SG91cnMoOSwgMzEpfSxcbiAgICB7IHVzZXI6IHRoaXMudXNlcnMuamFjaywgdHlwZTogdGhpcy50eXBlcy5tb2JpbGUsIHRpbWU6IHRoaXMudGltZS5zZXRIb3Vycyg4LCAwKX0sXG4gIF07XG5cbiAgZ2V0VXNlcnMoKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICByZXR1cm4gb2JzZXJ2YWJsZU9mKHRoaXMudXNlcnMpO1xuICB9XG5cbiAgZ2V0Q29udGFjdHMoKTogT2JzZXJ2YWJsZTxDb250YWN0c1tdPiB7XG4gICAgcmV0dXJuIG9ic2VydmFibGVPZih0aGlzLmNvbnRhY3RzKTtcbiAgfVxuXG4gIGdldFJlY2VudFVzZXJzKCk6IE9ic2VydmFibGU8UmVjZW50VXNlcnNbXT4ge1xuICAgIHJldHVybiBvYnNlcnZhYmxlT2YodGhpcy5yZWNlbnRVc2Vycyk7XG4gIH1cbn1cbiJdfQ==