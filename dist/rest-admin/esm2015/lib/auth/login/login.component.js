import { Component } from '@angular/core';
import { NbLoginComponent } from '@nebular/auth';
import * as i0 from "@angular/core";
import * as i1 from "@nebular/theme";
import * as i2 from "@angular/common";
import * as i3 from "@angular/forms";
import * as i4 from "@angular/router";
import * as i5 from "@ngx-translate/core";
export class LoginComponent extends NbLoginComponent {
}
LoginComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0, type: LoginComponent, deps: null, target: i0.ɵɵFactoryTarget.Component });
LoginComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.5", type: LoginComponent, selector: "ngx-login", usesInheritance: true, ngImport: i0, template: "<h1 id=\"title\" class=\"title\">{{ \"login.main\" | translate }}</h1>\n<p class=\"sub-title\">{{ \"login.labelMessage\" | translate }}.</p>\n\n<nb-alert\n  *ngIf=\"showMessages.error && errors?.length && !submitted\"\n  outline=\"danger\"\n  role=\"alert\"\n>\n  <p class=\"alert-title\"><b>Oh snap!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let error of errors\" class=\"alert-message\">{{ error }}</li>\n  </ul>\n</nb-alert>\n\n<nb-alert\n  *ngIf=\"showMessages.success && messages?.length && !submitted\"\n  outline=\"success\"\n  role=\"alert\"\n>\n  <p class=\"alert-title\"><b>Hooray!</b></p>\n  <ul class=\"alert-message-list\">\n    <li *ngFor=\"let message of messages\" class=\"alert-message\">\n      {{ message }}\n    </li>\n  </ul>\n</nb-alert>\n\n<form (ngSubmit)=\"login()\" #form=\"ngForm\" aria-labelledby=\"title\">\n  <div class=\"form-control-group\">\n    <label class=\"label\" for=\"input-email\"\n      >{{ \"login.email\" | translate }}:</label\n    >\n    <input\n      nbInput\n      fullWidth\n      [(ngModel)]=\"user.login\"\n      #email=\"ngModel\"\n      name=\"login\"\n      id=\"input-email\"\n      pattern=\".+@.+\\..+\"\n      placeholder=\"Email address\"\n      fieldSize=\"large\"\n      autofocus\n      [status]=\"email.dirty ? (email.invalid ? 'danger' : 'success') : 'basic'\"\n      [required]=\"getConfigValue('forms.validation.email.required')\"\n      [attr.aria-invalid]=\"email.invalid && email.touched ? true : null\"\n    />\n    <ng-container *ngIf=\"email.invalid && email.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.required\">\n        Email is required!\n      </p>\n      <p class=\"caption status-danger\" *ngIf=\"email.errors?.pattern\">\n        Email should be the real one!\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group\">\n    <span class=\"label-with-link\">\n      <label class=\"label\" for=\"input-password\"\n        >{{ \"login.password\" | translate }}:</label\n      >\n      <a class=\"forgot-password caption-2\" routerLink=\"../request-password\"\n        >{{ \"login.forgetPassword\" | translate }}?</a\n      >\n    </span>\n    <input\n      nbInput\n      fullWidth\n      [(ngModel)]=\"user.password\"\n      #password=\"ngModel\"\n      name=\"password\"\n      type=\"password\"\n      id=\"input-password\"\n      placeholder=\"Password\"\n      fieldSize=\"large\"\n      [status]=\"\n        password.dirty ? (password.invalid ? 'danger' : 'success') : 'basic'\n      \"\n      [required]=\"getConfigValue('forms.validation.password.required')\"\n      [minlength]=\"getConfigValue('forms.validation.password.minLength')\"\n      [maxlength]=\"getConfigValue('forms.validation.password.maxLength')\"\n      [attr.aria-invalid]=\"password.invalid && password.touched ? true : null\"\n    />\n    <ng-container *ngIf=\"password.invalid && password.touched\">\n      <p class=\"caption status-danger\" *ngIf=\"password.errors?.required\">\n        Password is required!\n      </p>\n      <p\n        class=\"caption status-danger\"\n        *ngIf=\"password.errors?.minlength || password.errors?.maxlength\"\n      >\n        Password should contain from\n        {{ getConfigValue(\"forms.validation.password.minLength\") }} to\n        {{ getConfigValue(\"forms.validation.password.maxLength\") }}\n        characters\n      </p>\n    </ng-container>\n  </div>\n\n  <div class=\"form-control-group accept-group\">\n    <nb-checkbox\n      name=\"rememberMe\"\n      [(ngModel)]=\"user.rememberMe\"\n      *ngIf=\"rememberMe\"\n      >{{ \"login.rememberMe\" | translate }}</nb-checkbox\n    >\n  </div>\n\n  <button\n    nbButton\n    fullWidth\n    status=\"primary\"\n    size=\"large\"\n    [disabled]=\"submitted || !form.valid\"\n    [class.btn-pulse]=\"submitted\"\n  >\n    {{ \"login.logIn\" | translate }}\n  </button>\n</form>\n", styles: ["::ng-deep .navigation .link nb-icon{display:none!important}\n"], components: [{ type: i1.NbAlertComponent, selector: "nb-alert", inputs: ["size", "status", "accent", "outline", "closable"], outputs: ["close"] }, { type: i1.NbCheckboxComponent, selector: "nb-checkbox", inputs: ["status", "checked", "disabled", "indeterminate"], outputs: ["checkedChange"] }, { type: i1.NbButtonComponent, selector: "button[nbButton],a[nbButton],input[type=\"button\"][nbButton],input[type=\"submit\"][nbButton]", inputs: ["hero"] }], directives: [{ type: i2.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i2.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i3.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i3.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i3.NgForm, selector: "form:not([ngNoForm]):not([formGroup]),ng-form,[ngForm]", inputs: ["ngFormOptions"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i1.NbInputDirective, selector: "input[nbInput],textarea[nbInput]", inputs: ["fieldSize", "status", "shape", "fullWidth"] }, { type: i3.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i3.PatternValidator, selector: "[pattern][formControlName],[pattern][formControl],[pattern][ngModel]", inputs: ["pattern"] }, { type: i3.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i3.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i3.RequiredValidator, selector: ":not([type=checkbox])[required][formControlName],:not([type=checkbox])[required][formControl],:not([type=checkbox])[required][ngModel]", inputs: ["required"] }, { type: i4.RouterLinkWithHref, selector: "a[routerLink],area[routerLink]", inputs: ["routerLink", "target", "queryParams", "fragment", "queryParamsHandling", "preserveFragment", "skipLocationChange", "replaceUrl", "state", "relativeTo"] }, { type: i3.MinLengthValidator, selector: "[minlength][formControlName],[minlength][formControl],[minlength][ngModel]", inputs: ["minlength"] }, { type: i3.MaxLengthValidator, selector: "[maxlength][formControlName],[maxlength][formControl],[maxlength][ngModel]", inputs: ["maxlength"] }], pipes: { "translate": i5.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0, type: LoginComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-login',
                    templateUrl: './login.component.html',
                    styleUrls: ['./login.component.scss'],
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9naW4uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcmVzdC1hZG1pbi9zcmMvbGliL2F1dGgvbG9naW4vbG9naW4uY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcmVzdC1hZG1pbi9zcmMvbGliL2F1dGgvbG9naW4vbG9naW4uY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxNQUFNLGVBQWUsQ0FBQztBQUNsRCxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7Ozs7QUFPakQsTUFBTSxPQUFPLGNBQWUsU0FBUSxnQkFBZ0I7OzJHQUF2QyxjQUFjOytGQUFkLGNBQWMsd0VDUjNCLDIwSEF3SEE7MkZEaEhhLGNBQWM7a0JBTDFCLFNBQVM7bUJBQUM7b0JBQ1QsUUFBUSxFQUFFLFdBQVc7b0JBQ3JCLFdBQVcsRUFBRSx3QkFBd0I7b0JBQ3JDLFNBQVMsRUFBRSxDQUFDLHdCQUF3QixDQUFDO2lCQUN0QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgT25Jbml0IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOYkxvZ2luQ29tcG9uZW50IH0gZnJvbSAnQG5lYnVsYXIvYXV0aCc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ25neC1sb2dpbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9sb2dpbi5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2xvZ2luLmNvbXBvbmVudC5zY3NzJ10sXG59KVxuZXhwb3J0IGNsYXNzIExvZ2luQ29tcG9uZW50IGV4dGVuZHMgTmJMb2dpbkNvbXBvbmVudCB7fVxuIiwiPGgxIGlkPVwidGl0bGVcIiBjbGFzcz1cInRpdGxlXCI+e3sgXCJsb2dpbi5tYWluXCIgfCB0cmFuc2xhdGUgfX08L2gxPlxuPHAgY2xhc3M9XCJzdWItdGl0bGVcIj57eyBcImxvZ2luLmxhYmVsTWVzc2FnZVwiIHwgdHJhbnNsYXRlIH19LjwvcD5cblxuPG5iLWFsZXJ0XG4gICpuZ0lmPVwic2hvd01lc3NhZ2VzLmVycm9yICYmIGVycm9ycz8ubGVuZ3RoICYmICFzdWJtaXR0ZWRcIlxuICBvdXRsaW5lPVwiZGFuZ2VyXCJcbiAgcm9sZT1cImFsZXJ0XCJcbj5cbiAgPHAgY2xhc3M9XCJhbGVydC10aXRsZVwiPjxiPk9oIHNuYXAhPC9iPjwvcD5cbiAgPHVsIGNsYXNzPVwiYWxlcnQtbWVzc2FnZS1saXN0XCI+XG4gICAgPGxpICpuZ0Zvcj1cImxldCBlcnJvciBvZiBlcnJvcnNcIiBjbGFzcz1cImFsZXJ0LW1lc3NhZ2VcIj57eyBlcnJvciB9fTwvbGk+XG4gIDwvdWw+XG48L25iLWFsZXJ0PlxuXG48bmItYWxlcnRcbiAgKm5nSWY9XCJzaG93TWVzc2FnZXMuc3VjY2VzcyAmJiBtZXNzYWdlcz8ubGVuZ3RoICYmICFzdWJtaXR0ZWRcIlxuICBvdXRsaW5lPVwic3VjY2Vzc1wiXG4gIHJvbGU9XCJhbGVydFwiXG4+XG4gIDxwIGNsYXNzPVwiYWxlcnQtdGl0bGVcIj48Yj5Ib29yYXkhPC9iPjwvcD5cbiAgPHVsIGNsYXNzPVwiYWxlcnQtbWVzc2FnZS1saXN0XCI+XG4gICAgPGxpICpuZ0Zvcj1cImxldCBtZXNzYWdlIG9mIG1lc3NhZ2VzXCIgY2xhc3M9XCJhbGVydC1tZXNzYWdlXCI+XG4gICAgICB7eyBtZXNzYWdlIH19XG4gICAgPC9saT5cbiAgPC91bD5cbjwvbmItYWxlcnQ+XG5cbjxmb3JtIChuZ1N1Ym1pdCk9XCJsb2dpbigpXCIgI2Zvcm09XCJuZ0Zvcm1cIiBhcmlhLWxhYmVsbGVkYnk9XCJ0aXRsZVwiPlxuICA8ZGl2IGNsYXNzPVwiZm9ybS1jb250cm9sLWdyb3VwXCI+XG4gICAgPGxhYmVsIGNsYXNzPVwibGFiZWxcIiBmb3I9XCJpbnB1dC1lbWFpbFwiXG4gICAgICA+e3sgXCJsb2dpbi5lbWFpbFwiIHwgdHJhbnNsYXRlIH19OjwvbGFiZWxcbiAgICA+XG4gICAgPGlucHV0XG4gICAgICBuYklucHV0XG4gICAgICBmdWxsV2lkdGhcbiAgICAgIFsobmdNb2RlbCldPVwidXNlci5sb2dpblwiXG4gICAgICAjZW1haWw9XCJuZ01vZGVsXCJcbiAgICAgIG5hbWU9XCJsb2dpblwiXG4gICAgICBpZD1cImlucHV0LWVtYWlsXCJcbiAgICAgIHBhdHRlcm49XCIuK0AuK1xcLi4rXCJcbiAgICAgIHBsYWNlaG9sZGVyPVwiRW1haWwgYWRkcmVzc1wiXG4gICAgICBmaWVsZFNpemU9XCJsYXJnZVwiXG4gICAgICBhdXRvZm9jdXNcbiAgICAgIFtzdGF0dXNdPVwiZW1haWwuZGlydHkgPyAoZW1haWwuaW52YWxpZCA/ICdkYW5nZXInIDogJ3N1Y2Nlc3MnKSA6ICdiYXNpYydcIlxuICAgICAgW3JlcXVpcmVkXT1cImdldENvbmZpZ1ZhbHVlKCdmb3Jtcy52YWxpZGF0aW9uLmVtYWlsLnJlcXVpcmVkJylcIlxuICAgICAgW2F0dHIuYXJpYS1pbnZhbGlkXT1cImVtYWlsLmludmFsaWQgJiYgZW1haWwudG91Y2hlZCA/IHRydWUgOiBudWxsXCJcbiAgICAvPlxuICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJlbWFpbC5pbnZhbGlkICYmIGVtYWlsLnRvdWNoZWRcIj5cbiAgICAgIDxwIGNsYXNzPVwiY2FwdGlvbiBzdGF0dXMtZGFuZ2VyXCIgKm5nSWY9XCJlbWFpbC5lcnJvcnM/LnJlcXVpcmVkXCI+XG4gICAgICAgIEVtYWlsIGlzIHJlcXVpcmVkIVxuICAgICAgPC9wPlxuICAgICAgPHAgY2xhc3M9XCJjYXB0aW9uIHN0YXR1cy1kYW5nZXJcIiAqbmdJZj1cImVtYWlsLmVycm9ycz8ucGF0dGVyblwiPlxuICAgICAgICBFbWFpbCBzaG91bGQgYmUgdGhlIHJlYWwgb25lIVxuICAgICAgPC9wPlxuICAgIDwvbmctY29udGFpbmVyPlxuICA8L2Rpdj5cblxuICA8ZGl2IGNsYXNzPVwiZm9ybS1jb250cm9sLWdyb3VwXCI+XG4gICAgPHNwYW4gY2xhc3M9XCJsYWJlbC13aXRoLWxpbmtcIj5cbiAgICAgIDxsYWJlbCBjbGFzcz1cImxhYmVsXCIgZm9yPVwiaW5wdXQtcGFzc3dvcmRcIlxuICAgICAgICA+e3sgXCJsb2dpbi5wYXNzd29yZFwiIHwgdHJhbnNsYXRlIH19OjwvbGFiZWxcbiAgICAgID5cbiAgICAgIDxhIGNsYXNzPVwiZm9yZ290LXBhc3N3b3JkIGNhcHRpb24tMlwiIHJvdXRlckxpbms9XCIuLi9yZXF1ZXN0LXBhc3N3b3JkXCJcbiAgICAgICAgPnt7IFwibG9naW4uZm9yZ2V0UGFzc3dvcmRcIiB8IHRyYW5zbGF0ZSB9fT88L2FcbiAgICAgID5cbiAgICA8L3NwYW4+XG4gICAgPGlucHV0XG4gICAgICBuYklucHV0XG4gICAgICBmdWxsV2lkdGhcbiAgICAgIFsobmdNb2RlbCldPVwidXNlci5wYXNzd29yZFwiXG4gICAgICAjcGFzc3dvcmQ9XCJuZ01vZGVsXCJcbiAgICAgIG5hbWU9XCJwYXNzd29yZFwiXG4gICAgICB0eXBlPVwicGFzc3dvcmRcIlxuICAgICAgaWQ9XCJpbnB1dC1wYXNzd29yZFwiXG4gICAgICBwbGFjZWhvbGRlcj1cIlBhc3N3b3JkXCJcbiAgICAgIGZpZWxkU2l6ZT1cImxhcmdlXCJcbiAgICAgIFtzdGF0dXNdPVwiXG4gICAgICAgIHBhc3N3b3JkLmRpcnR5ID8gKHBhc3N3b3JkLmludmFsaWQgPyAnZGFuZ2VyJyA6ICdzdWNjZXNzJykgOiAnYmFzaWMnXG4gICAgICBcIlxuICAgICAgW3JlcXVpcmVkXT1cImdldENvbmZpZ1ZhbHVlKCdmb3Jtcy52YWxpZGF0aW9uLnBhc3N3b3JkLnJlcXVpcmVkJylcIlxuICAgICAgW21pbmxlbmd0aF09XCJnZXRDb25maWdWYWx1ZSgnZm9ybXMudmFsaWRhdGlvbi5wYXNzd29yZC5taW5MZW5ndGgnKVwiXG4gICAgICBbbWF4bGVuZ3RoXT1cImdldENvbmZpZ1ZhbHVlKCdmb3Jtcy52YWxpZGF0aW9uLnBhc3N3b3JkLm1heExlbmd0aCcpXCJcbiAgICAgIFthdHRyLmFyaWEtaW52YWxpZF09XCJwYXNzd29yZC5pbnZhbGlkICYmIHBhc3N3b3JkLnRvdWNoZWQgPyB0cnVlIDogbnVsbFwiXG4gICAgLz5cbiAgICA8bmctY29udGFpbmVyICpuZ0lmPVwicGFzc3dvcmQuaW52YWxpZCAmJiBwYXNzd29yZC50b3VjaGVkXCI+XG4gICAgICA8cCBjbGFzcz1cImNhcHRpb24gc3RhdHVzLWRhbmdlclwiICpuZ0lmPVwicGFzc3dvcmQuZXJyb3JzPy5yZXF1aXJlZFwiPlxuICAgICAgICBQYXNzd29yZCBpcyByZXF1aXJlZCFcbiAgICAgIDwvcD5cbiAgICAgIDxwXG4gICAgICAgIGNsYXNzPVwiY2FwdGlvbiBzdGF0dXMtZGFuZ2VyXCJcbiAgICAgICAgKm5nSWY9XCJwYXNzd29yZC5lcnJvcnM/Lm1pbmxlbmd0aCB8fCBwYXNzd29yZC5lcnJvcnM/Lm1heGxlbmd0aFwiXG4gICAgICA+XG4gICAgICAgIFBhc3N3b3JkIHNob3VsZCBjb250YWluIGZyb21cbiAgICAgICAge3sgZ2V0Q29uZmlnVmFsdWUoXCJmb3Jtcy52YWxpZGF0aW9uLnBhc3N3b3JkLm1pbkxlbmd0aFwiKSB9fSB0b1xuICAgICAgICB7eyBnZXRDb25maWdWYWx1ZShcImZvcm1zLnZhbGlkYXRpb24ucGFzc3dvcmQubWF4TGVuZ3RoXCIpIH19XG4gICAgICAgIGNoYXJhY3RlcnNcbiAgICAgIDwvcD5cbiAgICA8L25nLWNvbnRhaW5lcj5cbiAgPC9kaXY+XG5cbiAgPGRpdiBjbGFzcz1cImZvcm0tY29udHJvbC1ncm91cCBhY2NlcHQtZ3JvdXBcIj5cbiAgICA8bmItY2hlY2tib3hcbiAgICAgIG5hbWU9XCJyZW1lbWJlck1lXCJcbiAgICAgIFsobmdNb2RlbCldPVwidXNlci5yZW1lbWJlck1lXCJcbiAgICAgICpuZ0lmPVwicmVtZW1iZXJNZVwiXG4gICAgICA+e3sgXCJsb2dpbi5yZW1lbWJlck1lXCIgfCB0cmFuc2xhdGUgfX08L25iLWNoZWNrYm94XG4gICAgPlxuICA8L2Rpdj5cblxuICA8YnV0dG9uXG4gICAgbmJCdXR0b25cbiAgICBmdWxsV2lkdGhcbiAgICBzdGF0dXM9XCJwcmltYXJ5XCJcbiAgICBzaXplPVwibGFyZ2VcIlxuICAgIFtkaXNhYmxlZF09XCJzdWJtaXR0ZWQgfHwgIWZvcm0udmFsaWRcIlxuICAgIFtjbGFzcy5idG4tcHVsc2VdPVwic3VibWl0dGVkXCJcbiAgPlxuICAgIHt7IFwibG9naW4ubG9nSW5cIiB8IHRyYW5zbGF0ZSB9fVxuICA8L2J1dHRvbj5cbjwvZm9ybT5cbiJdfQ==