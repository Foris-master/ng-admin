import { LocalDataSource } from 'ng2-smart-table';
import { REST_FIELD_TYPES, PERMISSION, } from '../models/rest-resource.model';
import { Component, Input, ViewChild, } from '@angular/core';
import { filter, map } from 'rxjs/operators';
import { of } from 'rxjs';
import { base64ToFile } from 'ngx-image-cropper';
import { ALPHABET } from '../service/rest-export.service';
import { UploadFileComponent } from '../components/upload-file/upload-file.component';
import { RestResourceListFieldComponent } from '../components/rest.resource-list-field/rest.resource-list-field.component';
import { RestResourceEditorFieldsComponent } from '../components/rest-resource-editor-fields/rest-resource-editor-fields.component';
import { Validator } from 'ngx-input-validator';
import * as moment from 'moment';
import * as _ from 'lodash';
import * as i0 from "@angular/core";
import * as i1 from "@angular/forms";
import * as i2 from "../service/rest-resource.service";
import * as i3 from "../service/rest-admin-config.service";
import * as i4 from "@angular/router";
import * as i5 from "@nebular/theme";
import * as i6 from "../service/rest-export.service";
import * as i7 from "../service/notification.service";
import * as i8 from "ngx-permissions";
import * as i9 from "../service/rest-error.service";
import * as i10 from "ngx-dropzone";
import * as i11 from "ngx-image-cropper";
import * as i12 from "../components/gmaps/gmaps.component";
import * as i13 from "ng2-smart-table";
import * as i14 from "@angular/common";
import * as i15 from "../../directives/attribute.directive";
import * as i16 from "@ngx-translate/core";
export class RestResourceAddComponent {
    constructor(fb, serviceRest, serviceRestAdminConfig, activatedRoute, nbMenuService, exportService, dialogService, router, notificationService, cdref, permissionsService, restErrorService) {
        this.fb = fb;
        this.serviceRest = serviceRest;
        this.serviceRestAdminConfig = serviceRestAdminConfig;
        this.activatedRoute = activatedRoute;
        this.nbMenuService = nbMenuService;
        this.exportService = exportService;
        this.dialogService = dialogService;
        this.router = router;
        this.notificationService = notificationService;
        this.cdref = cdref;
        this.permissionsService = permissionsService;
        this.restErrorService = restErrorService;
        this.error = null;
        this.message = 'Ressource ajoutée avec succès';
        this.formState = {
            btnLabel: 'Modifier',
            isAdd: false,
            idEntity: null,
            onReady: false,
        };
        // Loader
        this.loading = false;
        // End test
        //BELONG_TO FIELD
        this.options = {};
        this.allFilterContains = {};
        this.belongToValue = {};
        this.belongToMany = {};
        //json editor
        this.jsonEditorOptions = {};
        this.multiple = false;
        this.controlCroper = {};
        this.imageChangedEvent = '';
        this.croppedImage = {};
        this.isCrop = {};
        this.controlsImage = {};
        // Color
        this.colors = [];
        // End test
        //Import
        this.items = [{ title: 'Download template' }, { title: 'Import' }];
        this.alphabelt = ALPHABET;
        //Image
        this.filesUpload = {};
        this.urlsImage = {};
        //Morph_field
        this.morphFields = {};
        this.permissions = [PERMISSION.CREATE, PERMISSION.UPDATE];
        this.googleMapApiKey = '';
        this.googleMapApiKey = serviceRestAdminConfig.googleMapApiKey;
        activatedRoute.params.subscribe((params) => {
            this.ressourceName =
                this.activatedRoute.snapshot.url[this.activatedRoute.snapshot.url.length - 1].path.split('-')[0];
            this.resource = this.serviceRestAdminConfig.getSpecificResource(this.ressourceName);
            if (Object.keys(params).length != 0) {
                this.ressourceName =
                    this.activatedRoute.snapshot.url[this.activatedRoute.snapshot.url.length - 2].path.split('-')[0];
                this.resource = this.serviceRestAdminConfig.getSpecificResource(this.ressourceName);
                this.serviceRest
                    .getOneResource({
                    api: this.resource.editConfig.api,
                    queryParams: this.resource.editConfig.queryParams,
                }, params.id)
                    .subscribe((response) => {
                    this.initForm(response);
                    this.formState = {
                        btnLabel: 'Modifier',
                        isAdd: false,
                        idEntity: response.id,
                        onReady: true,
                    };
                });
            }
            else {
                this.initForm(null);
                this.formState = {
                    btnLabel: 'Ajouter',
                    isAdd: true,
                    onReady: true,
                };
            }
        });
    }
    ngOnInit() {
        this.googleMapKeys = this.serviceRestAdminConfig.googleMapApiKey;
        this.nbMenuService
            .onItemClick()
            .pipe(filter(({ tag }) => tag === 'my-context-add'), map(({ item: { title } }) => title))
            .subscribe((title) => {
            switch (title) {
                case 'Download template':
                    this.downloadTemplate();
                    break;
                case 'Import':
                    this.importData();
                    break;
                default:
                    console.log('pass');
                    break;
            }
        });
        this.settings = {
            hideSubHeader: true,
            actions: false,
            pager: {
                perPage: this.resource.listConfig.perPage,
            },
            columns: this.createMatTableColumns(),
        };
        this.cdref.detectChanges();
        if (this.resource.permissions.length > 0) {
            this.resource.permissions.forEach((permission) => {
                this.serviceRest
                    .getResources({
                    api: permission.fieldKey.api.substring(1),
                    queryParams: permission.fieldKey.queryParams
                        ? permission.fieldKey.queryParams
                        : {},
                })
                    .subscribe((resp) => {
                    const val = {};
                    permission.fieldKey.fieldForNextQuery.forEach((item) => {
                        val[item] = _.get(resp, item);
                        if (val[item]) {
                            this.permissionsService.addPermission(permission.type);
                        }
                    });
                });
            });
        }
    }
    initForm(datas) {
        if (datas != null) {
            this.controls = this.resource.fields.reduce((cumul, elt) => {
                var _a, _b, _c, _d, _e, _f;
                var filterKey = ((_c = (_b = (_a = elt.metaData) === null || _a === void 0 ? void 0 : _a.addConfig) === null || _b === void 0 ? void 0 : _b.belongToOptions) === null || _c === void 0 ? void 0 : _c.filterKeys[0])
                    ? (_f = (_e = (_d = elt.metaData) === null || _d === void 0 ? void 0 : _d.addConfig) === null || _e === void 0 ? void 0 : _e.belongToOptions) === null || _f === void 0 ? void 0 : _f.filterKeys[0]
                    : 'name';
                if (elt.inForm) {
                    switch (elt.type) {
                        case REST_FIELD_TYPES.FILE:
                        case REST_FIELD_TYPES.PDF:
                        case REST_FIELD_TYPES.IMAGE:
                            this.filesUpload[elt.name] = [];
                            this.urlsImage[elt.name] = datas[elt.name];
                            return Object.assign(Object.assign({}, cumul), { [elt.name]: datas[elt.name] });
                        case REST_FIELD_TYPES.HAS_MANY:
                            return Object.assign(Object.assign({}, cumul), { [elt.name]: new Set([datas[elt.name]]) });
                        case REST_FIELD_TYPES.BOOLEAN:
                            return Object.assign(Object.assign({}, cumul), { [elt.name]: datas[elt.name] });
                        case REST_FIELD_TYPES.BELONG_TO:
                            const restResource = this.serviceRestAdminConfig.getSpecificResource(elt.metaData.addConfig.belongToOptions.resourceName);
                            this.serviceRest
                                .getResources({
                                api: restResource.api,
                                queryParams: elt.metaData.addConfig.belongToOptions
                                    .queryParams
                                    ? elt.metaData.addConfig.belongToOptions.queryParams
                                    : restResource.queryParams,
                            })
                                .subscribe((response) => {
                                this.options[elt.name] = [...response].sort((x, y) => {
                                    var _a;
                                    return (_a = x[filterKey]
                                        .toString()
                                        .toLowerCase()) === null || _a === void 0 ? void 0 : _a.localeCompare(y[filterKey].toString().toLowerCase());
                                });
                                this.allFilterContains[elt.name] = of(this.options[elt.name]);
                            });
                            return Object.assign(Object.assign({}, cumul), { [elt.name]: [datas[elt.name]] });
                        case REST_FIELD_TYPES.BELONG_TO_MANY:
                            const resource = this.serviceRestAdminConfig.getSpecificResource(elt.metaData.addConfig.belongToManyOptions.relatedName);
                            this.serviceRest
                                .getResources({
                                api: resource.api,
                                queryParams: elt.metaData.addConfig.belongToManyOptions
                                    .queryParams
                                    ? elt.metaData.addConfig.belongToManyOptions.queryParams
                                    : resource.queryParams,
                            })
                                .subscribe((response) => {
                                this.options[elt.name] = [...response].sort((x, y) => {
                                    var _a;
                                    return (_a = x[filterKey]
                                        .toString()
                                        .toLowerCase()) === null || _a === void 0 ? void 0 : _a.localeCompare(y[filterKey].toString().toLowerCase());
                                });
                                this.allFilterContains[elt.name] = of(this.options[elt.name]);
                            });
                            this.belongToMany[elt.name] = new Set(datas[elt.name]);
                            return Object.assign(Object.assign({}, cumul), { [elt.name]: [datas[elt.name]] });
                        case REST_FIELD_TYPES.LINK:
                            if (datas[elt.name] !== null) {
                                return Object.assign(Object.assign({}, cumul), { [elt.name]: [datas[elt.name], Validator.url] });
                            }
                            return Object.assign(Object.assign({}, cumul), { [elt.name]: ['', Validator.url] });
                        case REST_FIELD_TYPES.COLOR:
                            return Object.assign(Object.assign({}, cumul), { [elt.name]: datas[elt.name] });
                        case REST_FIELD_TYPES.JSON:
                            const jsonFields = [];
                            if (elt.metaData &&
                                elt.metaData.addConfig &&
                                elt.metaData.addConfig.jsonConfig &&
                                elt.metaData.addConfig.jsonConfig.jsonFields) {
                                elt.metaData.addConfig.jsonConfig.jsonFields.map((field) => {
                                    if (datas[elt.name]) {
                                        if (datas[elt.name][0] == '{') {
                                            try {
                                                jsonFields.push({
                                                    label: field,
                                                    value: JSON.parse(datas[elt.name])[field],
                                                });
                                            }
                                            catch (error) {
                                                console.error(`Error parsing JSON for ${field} in ${elt.name}: ${error}`);
                                            }
                                        }
                                        else if (typeof datas[elt.name] !== 'string') {
                                            try {
                                                jsonFields.push({
                                                    label: field,
                                                    value: datas[elt.name][field],
                                                });
                                            }
                                            catch (error) {
                                                console.error(`Error accessing field ${field} in ${elt.name}: ${error}`);
                                            }
                                        }
                                        else {
                                            jsonFields.push({
                                                label: field,
                                                value: datas[elt.name],
                                            });
                                        }
                                    }
                                    else {
                                        jsonFields.push({ label: field, value: '' });
                                    }
                                });
                            }
                            this.jsonEditorOptions[elt.name] = jsonFields;
                            return Object.assign(Object.assign({}, cumul), { [elt.name]: datas[elt.name] });
                        case REST_FIELD_TYPES.MORPH_ONE:
                            this.morphFields[elt.name] = {
                                type: datas[elt.name].type,
                                id: datas[elt.name].id,
                            };
                            return Object.assign(Object.assign({}, cumul), { [elt.name]: [null] });
                        case REST_FIELD_TYPES.MAP:
                            const lat = elt.metaData.addConfig.mapConfig.lattiudeKeyField;
                            const long = elt.metaData.addConfig.mapConfig.longitudeKeyField;
                            return Object.assign(Object.assign({}, cumul), { [lat]: datas[lat], [long]: datas[long] });
                        default:
                            return Object.assign(Object.assign({}, cumul), { [elt.name]: datas[elt.name] });
                    }
                }
                else
                    return Object.assign({}, cumul);
            }, {});
        }
        else {
            this.controls = this.resource.fields.reduce((cumul, elt) => {
                var _a, _b, _c, _d, _e, _f;
                var filterKey = ((_c = (_b = (_a = elt.metaData) === null || _a === void 0 ? void 0 : _a.addConfig) === null || _b === void 0 ? void 0 : _b.belongToOptions) === null || _c === void 0 ? void 0 : _c.filterKeys[0])
                    ? (_f = (_e = (_d = elt.metaData) === null || _d === void 0 ? void 0 : _d.addConfig) === null || _e === void 0 ? void 0 : _e.belongToOptions) === null || _f === void 0 ? void 0 : _f.filterKeys[0]
                    : 'name';
                if (elt.inForm) {
                    switch (elt.type) {
                        case REST_FIELD_TYPES.FILE:
                        case REST_FIELD_TYPES.PDF:
                        case REST_FIELD_TYPES.IMAGE:
                            this.filesUpload[elt.name] = [];
                            this.urlsImage[elt.name] = '';
                            return Object.assign(Object.assign({}, cumul), { [elt.name]: [null] });
                        case REST_FIELD_TYPES.HAS_MANY:
                            return Object.assign(Object.assign({}, cumul), { [elt.name]: new Set([]) });
                        case REST_FIELD_TYPES.BOOLEAN:
                            return Object.assign(Object.assign({}, cumul), { [elt.name]: false });
                        case REST_FIELD_TYPES.BELONG_TO:
                            const restResource = this.serviceRestAdminConfig.getSpecificResource(elt.metaData.addConfig.belongToOptions.resourceName);
                            if (restResource) {
                                this.serviceRest
                                    .getResources({
                                    api: restResource.api,
                                    queryParams: elt.metaData.addConfig.belongToOptions
                                        .queryParams
                                        ? elt.metaData.addConfig.belongToOptions.queryParams
                                        : restResource.queryParams,
                                })
                                    .subscribe((response) => {
                                    this.options[elt.name] = [...response].sort((x, y) => {
                                        var _a;
                                        return (_a = x[filterKey]
                                            .toString()
                                            .toLowerCase()) === null || _a === void 0 ? void 0 : _a.localeCompare(y[filterKey].toString().toLowerCase());
                                    });
                                    this.allFilterContains[elt.name] = of(this.options[elt.name]);
                                });
                            }
                            return Object.assign(Object.assign({}, cumul), { [elt.name]: [''] });
                        case REST_FIELD_TYPES.BELONG_TO_MANY:
                            const resource = this.serviceRestAdminConfig.getSpecificResource(elt.metaData.addConfig.belongToManyOptions.relatedName);
                            this.serviceRest
                                .getResources({
                                api: resource.api,
                                queryParams: elt.metaData.addConfig.belongToManyOptions
                                    .queryParams
                                    ? elt.metaData.addConfig.belongToManyOptions.queryParams
                                    : resource.queryParams,
                            })
                                .subscribe((response) => {
                                this.options[elt.name] = [...response].sort((x, y) => {
                                    var _a;
                                    return (_a = x[filterKey]
                                        .toString()
                                        .toLowerCase()) === null || _a === void 0 ? void 0 : _a.localeCompare(y[filterKey].toString().toLowerCase());
                                });
                                this.allFilterContains[elt.name] = of(this.options[elt.name]);
                            });
                            this.belongToMany[elt.name] = new Set();
                            return Object.assign(Object.assign({}, cumul), { [elt.name]: [] });
                        case REST_FIELD_TYPES.LINK:
                            return Object.assign(Object.assign({}, cumul), { [elt.name]: ['', Validator.url] });
                        case REST_FIELD_TYPES.JSON:
                            if (elt &&
                                elt.metaData &&
                                elt.metaData.addConfig &&
                                elt.metaData.addConfig.jsonConfig &&
                                elt.metaData.addConfig.jsonConfig.jsonFields) {
                                const jsonFields = [];
                                elt.metaData.addConfig.jsonConfig.jsonFields.forEach((field) => {
                                    jsonFields.push({ label: field, value: '' });
                                });
                                this.jsonEditorOptions[elt.name] = jsonFields;
                            }
                            else {
                                // Si une propriété requise n'est pas présente, renvoyer une erreur
                                throw new Error("Une erreur s'est produite lors du traitement de l'élément.");
                            }
                            return Object.assign(Object.assign({}, cumul), { [elt.name]: [null] });
                        case REST_FIELD_TYPES.MAP:
                            const lat = elt.metaData.addConfig.mapConfig.lattiudeKeyField;
                            const long = elt.metaData.addConfig.mapConfig.longitudeKeyField;
                            return Object.assign(Object.assign({}, cumul), { [lat]: [null], [long]: [null] });
                        default:
                            return Object.assign(Object.assign({}, cumul), { [elt.name]: [''] });
                    }
                }
                else
                    return Object.assign({}, cumul);
            }, {});
        }
        this.form = this.fb.group(this.controls);
    }
    trackByFn(index) {
        return index;
    }
    reset() {
        this.form = this.fb.group(this.controls);
    }
    get REST_FIELD_TYPES() {
        return REST_FIELD_TYPES;
    }
    get PERMISSION() {
        return PERMISSION;
    }
    //Tags
    onTagRemove(tagToRemove, name) {
        const treesA = new Set(this.form.get([name]).value);
        treesA.delete(tagToRemove.text);
        this.form.patchValue({
            [name]: Array.from(treesA.values()),
        });
    }
    onTagAdd({ value, input }, name) {
        if (value) {
            const treesA = new Set(this.form.get([name]).value);
            treesA.add(value);
            this.form.patchValue({
                [name]: Array.from(treesA.values()),
            });
        }
        input.nativeElement.value = '';
    }
    // Autocomplete
    filter(value, field) {
        if (typeof value == 'string') {
            if (!this.options[field.name]) {
                return [];
            }
            else
                return this.options[field.name].filter((optionValue) => {
                    return field.metaData.addConfig.belongToOptions.filterKeys.some((elt) => {
                        var _a;
                        return `${(_a = optionValue[elt]) === null || _a === void 0 ? void 0 : _a.toLowerCase()}`.includes(`${value.toLowerCase()}`);
                    });
                });
        }
    }
    getFilteredOptions(value, field) {
        if (field.type == REST_FIELD_TYPES.BELONG_TO)
            return of(value).pipe(map((filterString) => this.filter(filterString, field)));
        else if (field.type == REST_FIELD_TYPES.MORPH)
            return of(value).pipe(map((filterString) => this.filterMany(filterString, field, 'morphConfig')));
        return of(value).pipe(map((filterString) => this.filterMany(filterString, field)));
    }
    onSelectionChange(event, field) {
        var _a, _b;
        const bVal = this.options[field.name]
            ? this.options[field.name].find((elt) => (elt === null || elt === void 0 ? void 0 : elt.id) === event)
            : {};
        this.belongToValue[field.name] = bVal
            ? bVal[((_a = field === null || field === void 0 ? void 0 : field.metaData) === null || _a === void 0 ? void 0 : _a.belongToSecondFieldLabel)
                ? (_b = field === null || field === void 0 ? void 0 : field.metaData) === null || _b === void 0 ? void 0 : _b.belongToSecondFieldLabel
                : 'name']
            : '';
        this.allFilterContains[field.name] = this.getFilteredOptions(event, field);
    }
    filterInput(event, field) {
        this.allFilterContains[field.name] = this.getFilteredOptions(event.target.value, field);
    }
    test(event) {
        console.log(event);
    }
    // End Autocomplete
    //Image input
    onSelect(event, field) {
        this.filesUpload[field.name] = [];
        const addedFiles = event.addedFiles;
        this.filesUpload[field.name] = [addedFiles[0]];
        if (field.type == REST_FIELD_TYPES.IMAGE) {
            this.isCrop[field.name] = true;
            this.controlCroper[field.name] = addedFiles[0];
        }
        this.form.patchValue({
            [field.name]: addedFiles[0],
        });
    }
    onRemove(field) {
        this.filesUpload[field.name] = [];
        this.form.patchValue({
            [field.name]: null,
        });
    }
    imageCropped(event, field) {
        this.croppedImage[field.name] = event.base64;
    }
    activeCroper(field) {
        this.isCrop[field.name] = true;
    }
    desactiveCrop(field) {
        this.isCrop[field.name] = false;
    }
    saveCroper(field) {
        this.isCrop[field.name] = false;
        this.filesUpload[field.name] = [
            base64ToFile(this.croppedImage[field.name]),
        ];
        this.form.patchValue({
            [field.name]: new File([base64ToFile(this.croppedImage[field.name])], field.name),
        });
    }
    //belongToManyOptions
    onChoose(event, field) {
        const cellData = Array.from(this.belongToMany[field.name]);
        if (event.id) {
            const search = cellData.find((elt) => elt.id == event.id);
            if (search == undefined) {
                const newElt = {
                    id: event.id,
                    [field.metaData.addConfig.belongToManyOptions.relatedIdName]: event.id,
                    [field.metaData.addConfig.belongToManyOptions.resourceIdName]: '',
                    [field.metaData.addConfig.belongToManyOptions.filterKeys[0]]: event[field.metaData.addConfig.belongToManyOptions.filterKeys[0]],
                    saveRelatedIdName: field.metaData.addConfig.belongToManyOptions.relatedIdName,
                    saveResourceIdName: field.metaData.addConfig.belongToManyOptions.resourceIdName,
                };
                this.belongToMany[field.name].add(newElt);
                this.form.patchValue({
                    [field.name]: Array.from(this.belongToMany[field.name].values()),
                });
            }
        }
        this.inputBelongToMany.nativeElement.value = '';
    }
    onTagRemoveBelong(tagToRemove, field) {
        const cellData = Array.from(this.belongToMany[field.name]);
        const save = [];
        cellData.forEach((elt) => {
            if (elt[field.metaData.addConfig.belongToManyOptions.template
                ? field.metaData.addConfig.belongToManyOptions.template
                : field.metaData.addConfig.belongToManyOptions.filterKeys[0]] != tagToRemove.text)
                save.push(elt);
        });
        this.belongToMany[field.name] = new Set(save);
        this.form.patchValue({
            [field.name]: save,
        });
    }
    filterMany(value, field, options = 'belongToManyOptions') {
        if (value == null || value == undefined) {
            return [];
        }
        if (typeof value == 'string') {
            return this.options[field === null || field === void 0 ? void 0 : field.name].filter((optionValue) => {
                return field.metaData.addConfig[options].filterKeys.some((elt) => `${optionValue[elt].toLowerCase()}`.includes(`${value.toLowerCase()}`));
            });
        }
    }
    //End BelongToMany
    onCreate() {
        let datas;
        this.error = '';
        const msg = {
            label: `msg-adding-success`,
            resourceName: this.ressourceName,
        };
        this.loading = true;
        const formData = this.form.value;
        console.log('this.form', this.form.value);
        const _body = this.resource.addConfig.body;
        if (this.resource.hasFile) {
            datas = new FormData();
            Object.keys(formData).forEach((key, index) => {
                var _a;
                const search = this.resource.fields.find((elt) => elt.name == key);
                if (search && formData[key] !== undefined) {
                    switch (search.type) {
                        case REST_FIELD_TYPES.DATE:
                            datas.append(key, `${moment(formData[key]).format('YYYY-MM-DD')}`);
                            break;
                        case REST_FIELD_TYPES.JSON:
                            let jsonFields = {};
                            if (this.jsonEditorOptions[key] !== null) {
                                if (typeof this.jsonEditorOptions[key] === 'object' &&
                                    Array.isArray(this.jsonEditorOptions[key])) {
                                    this.jsonEditorOptions[key].map((elt) => {
                                        if (typeof elt === 'object' &&
                                            elt !== null &&
                                            elt.label &&
                                            elt.value) {
                                            jsonFields = Object.assign(Object.assign({}, jsonFields), { [elt.label]: elt.value });
                                            datas.append(`${key}[${elt.label}]`, elt.value);
                                        }
                                        else {
                                            console.error(`Error: Invalid element in jsonEditorOptions[${key}]: ${JSON.stringify(elt)}`);
                                        }
                                    });
                                }
                                else {
                                    console.error(`Error: Invalid type of jsonEditorOptions[${key}]: ${typeof this
                                        .jsonEditorOptions[key]}`);
                                }
                            }
                            else {
                                console.error(`Error: Missing jsonEditorOptions[${key}]`);
                            }
                            break;
                        case REST_FIELD_TYPES.BOOLEAN:
                            if ((_a = search.metaData) === null || _a === void 0 ? void 0 : _a.number) {
                                if (formData[key]) {
                                    datas.append(key, 1);
                                }
                                else
                                    datas.append(key, 0);
                            }
                            else {
                                datas.append(key, formData[key]);
                            }
                            break;
                        case REST_FIELD_TYPES.IMAGE:
                            if (formData[key] !== null)
                                datas.append(key, formData[key]);
                            // datas.append(formData[key], { uri: formData[key]?.uri, type: 'image/jpeg', name: formData[key] });
                            break;
                        case REST_FIELD_TYPES.PDF:
                            if (formData[key] !== null)
                                datas.append(key, formData[key]);
                            break;
                        case REST_FIELD_TYPES.FILE:
                            if (formData[key] !== null)
                                datas.append(key, formData[key]);
                            break;
                        default:
                            // if (search.type === REST_FIELD_TYPES.STRING || search.type === REST_FIELD_TYPES.NUMBER || search.type === REST_FIELD_TYPES.PASSWORD)
                            if (formData[key] !== '' && formData[key] !== null)
                                datas.append(key, formData[key]);
                            break;
                    }
                }
            });
            Object.keys(_body).map((key) => {
                datas.append(key, _body[key]);
            });
            // Add map type;
            const mapField = this.resource.fields.filter((item) => item.type === REST_FIELD_TYPES.MAP);
            mapField.forEach((elt) => {
                datas.append([elt.metaData.addConfig.mapConfig.lattiudeKeyField], formData[elt.metaData.addConfig.mapConfig.lattiudeKeyField]);
                datas.append([elt.metaData.addConfig.mapConfig.longitudeKeyField], formData[elt.metaData.addConfig.mapConfig.longitudeKeyField]);
            });
        }
        else {
            const tab = {};
            Object.keys(formData).forEach((key, index) => {
                const search = this.resource.fields.find((elt) => elt.name == key);
                if (search) {
                    if (this.jsonEditorOptions[key] !== null &&
                        formData[key] !== undefined &&
                        formData[key] !== '') {
                        tab[key] = formData[key];
                    }
                }
            });
            // Add map type;
            const mapField = this.resource.fields.filter((item) => item.type === REST_FIELD_TYPES.MAP);
            mapField.forEach((elt) => {
                tab[elt.metaData.addConfig.mapConfig.lattiudeKeyField] =
                    formData[elt.metaData.addConfig.mapConfig.lattiudeKeyField];
                tab[elt.metaData.addConfig.mapConfig.longitudeKeyField] =
                    formData[elt.metaData.addConfig.mapConfig.longitudeKeyField];
            });
            datas = Object.assign(Object.assign({}, tab), _body);
        }
        const saveBelongTomany = [];
        this.resource.fields.forEach((elt) => {
            if (elt.type == REST_FIELD_TYPES.BELONG_TO_MANY) {
                saveBelongTomany.push({
                    resources: datas[elt.name],
                    pivot: elt.metaData.addConfig.belongToManyOptions.pivotName,
                });
            }
        });
        this.serviceRest.addResources(this.resource.addConfig, datas).subscribe((response) => {
            if (saveBelongTomany.length > 0) {
                saveBelongTomany.forEach((element, index) => {
                    const restResource = this.serviceRestAdminConfig.getSpecificResource(element.pivot);
                    const proms = [];
                    for (let index = 0; index < element.resources.length; index++) {
                        const item = element.resources[index];
                        const data = {
                            [item['saveRelatedIdName']]: item[item['saveRelatedIdName']],
                            [item['saveResourceIdName']]: response.id,
                        };
                        proms.push(this.serviceRest
                            .addResources(restResource.addConfig, data)
                            .toPromise());
                    }
                    Promise.all(proms).then((res) => {
                        if (index == saveBelongTomany.length - 1) {
                            this.notificationService.successToast(msg);
                            this.router.navigate([
                                `/admin/${this.ressourceName}-detail`,
                                response.id,
                            ]);
                            this.reset();
                        }
                    });
                });
                this.loading = false;
            }
            else {
                this.notificationService.successToast(msg);
                this.router.navigate([
                    `/admin/${this.ressourceName}-detail`,
                    response.id,
                ]);
                this.loading = false;
                this.reset();
            }
        }, (error) => {
            this.error = this.restErrorService.handleError(error);
            this.loading = false;
        });
    }
    onEdit() {
        const msg = {
            label: `msg-updating-success`,
            resourceName: this.ressourceName,
        };
        this.loading = true;
        let datas;
        const formData = this.form.value;
        const _body = this.resource.editConfig.body;
        if (this.resource.hasFile) {
            datas = new FormData();
            Object.keys(formData).forEach((key, index) => {
                var _a;
                const search = this.resource.fields.find((elt) => elt.name == key);
                if (search && formData[key] !== undefined) {
                    switch (search.type) {
                        case REST_FIELD_TYPES.DATE:
                            if (formData[key] !== null) {
                                datas.append(key, `${moment(formData[key]).format('YYYY-MM-DD')}`);
                            }
                            break;
                        case REST_FIELD_TYPES.JSON:
                            let jsonFields = {};
                            if (this.jsonEditorOptions[key] !== null) {
                                if (typeof this.jsonEditorOptions[key] === 'object') {
                                    this.jsonEditorOptions[key].map((elt) => {
                                        if (typeof elt === 'object' &&
                                            elt !== null &&
                                            elt.label &&
                                            elt.value) {
                                            jsonFields = Object.assign(Object.assign({}, jsonFields), { [elt.label]: elt.value });
                                            datas.append(`${key}[${elt.label}]`, elt.value);
                                        }
                                        else {
                                            if (elt.label) {
                                                datas.append(`${key}[${elt.label}]`, '');
                                            }
                                            console.error(`Error: Invalid element in jsonEditorOptions[${key}]: ${JSON.stringify(elt)}`);
                                        }
                                    });
                                }
                                else {
                                    console.error(`Error: Invalid type of jsonEditorOptions[${key}]: ${typeof this
                                        .jsonEditorOptions[key]}`);
                                }
                            }
                            else {
                                console.error(`Error: Missing jsonEditorOptions[${key}]`);
                            }
                            break;
                        case REST_FIELD_TYPES.BOOLEAN:
                            if ((_a = search.metaData) === null || _a === void 0 ? void 0 : _a.number) {
                                if (formData[key]) {
                                    datas.append(key, 1);
                                }
                                else
                                    datas.append(key, 0);
                            }
                            else {
                                datas.append(key, formData[key]);
                            }
                            break;
                        case REST_FIELD_TYPES.IMAGE:
                            if (formData[key] !== null && this.isFile(formData[key]))
                                datas.append(key, formData[key]);
                            break;
                        case REST_FIELD_TYPES.PDF:
                            if (formData[key] !== null && this.isFile(formData[key]))
                                datas.append(key, formData[key]);
                            break;
                        case REST_FIELD_TYPES.FILE:
                            if (formData[key] !== null && this.isFile(formData[key]))
                                datas.append(key, formData[key]);
                            break;
                        default:
                            // if (search.type === REST_FIELD_TYPES.STRING || search.type === REST_FIELD_TYPES.NUMBER || search.type === REST_FIELD_TYPES.PASSWORD)
                            if (formData[key] !== '')
                                datas.append(key, formData[key]);
                            break;
                    }
                }
            });
            Object.keys(_body).map((key) => {
                datas.append(key, _body[key]);
            });
            // Add map type;
            const mapField = this.resource.fields.filter((item) => item.type === REST_FIELD_TYPES.MAP);
            mapField.forEach((elt) => {
                datas.append([elt.metaData.addConfig.mapConfig.lattiudeKeyField], formData[elt.metaData.addConfig.mapConfig.lattiudeKeyField]);
                datas.append([elt.metaData.addConfig.mapConfig.longitudeKeyField], formData[elt.metaData.addConfig.mapConfig.longitudeKeyField]);
            });
        }
        else {
            const tab = {};
            Object.keys(formData).forEach((key, index) => {
                const search = this.resource.fields.find((elt) => elt.name == key);
                if (search &&
                    this.jsonEditorOptions[key] !== null &&
                    formData[key] !== undefined &&
                    formData[key] !== '') {
                    tab[key] = formData[key];
                }
            });
            // Add map type;
            const mapField = this.resource.fields.filter((item) => item.type === REST_FIELD_TYPES.MAP);
            mapField.forEach((elt) => {
                tab[elt.metaData.addConfig.mapConfig.lattiudeKeyField] =
                    formData[elt.metaData.addConfig.mapConfig.lattiudeKeyField];
                tab[elt.metaData.addConfig.mapConfig.longitudeKeyField] =
                    formData[elt.metaData.addConfig.mapConfig.longitudeKeyField];
            });
            datas = Object.assign(Object.assign({}, tab), _body);
        }
        const saveBelongTomany = [];
        this.resource.fields.forEach((elt) => {
            if (elt.type == REST_FIELD_TYPES.BELONG_TO_MANY) {
                saveBelongTomany.push({
                    resources: datas[elt.name],
                    pivot: elt.metaData.addConfig.belongToManyOptions.pivotName,
                });
            }
        });
        this.serviceRest
            .editResources(this.resource.editConfig, this.resource.hasFile, datas, this.formState.idEntity)
            .subscribe((response) => {
            if (saveBelongTomany.length > 0) {
                saveBelongTomany.forEach((element, index) => {
                    const restResource = this.serviceRestAdminConfig.getSpecificResource(element.pivot);
                    const proms = [];
                    for (let index = 0; index < element.resources.length; index++) {
                        const item = element.resources[index];
                        const data = {
                            [item['saveRelatedIdName']]: item[item['saveRelatedIdName']],
                            [item['saveResourceIdName']]: response.id,
                        };
                        proms.push(this.serviceRest
                            .addResources(restResource.addConfig, data)
                            .toPromise());
                    }
                    Promise.all(proms).then((res) => {
                        if (index == saveBelongTomany.length - 1) {
                            this.notificationService.successToast(msg);
                            this.router.navigate([
                                `/admin/${this.ressourceName}-detail`,
                                this.formState.idEntity,
                            ]);
                            this.reset();
                        }
                    });
                });
                this.loading = false;
            }
            else {
                this.notificationService.successToast(msg);
                this.router.navigate([
                    `/admin/${this.ressourceName}-detail`,
                    this.formState.idEntity,
                ]);
                this.loading = false;
                this.reset();
            }
        }, (error) => {
            this.error = this.restErrorService.handleError(error);
            this.loading = false;
        });
    }
    isFile(variable) {
        return typeof variable === 'object' && variable instanceof File;
    }
    downloadTemplate() {
        const colunms = {};
        const sheetHeader = {};
        this.resource.fields
            .filter((item) => this.resource.listConfig.columns.includes(item.name))
            .forEach((elt) => {
            colunms[elt.name] = {
                title: elt.label,
            };
        });
        Object.entries(colunms).forEach(([key, value], index) => {
            sheetHeader[this.alphabelt[index]] = key;
        });
        const edata = [];
        const udt = {
            data: [
                sheetHeader, // table header
            ],
            skipHeader: true,
        };
        edata.push(udt);
        this.exportService.exportToExcel(edata, 'rest_file_template_data');
    }
    importData() {
        const dialog = this.dialogService.open(UploadFileComponent, {});
        dialog.onClose.subscribe((resp) => {
            if (resp)
                this.source = new LocalDataSource(resp);
        });
    }
    createMatTableColumns() {
        const colunms = {};
        // console.log(this.resource.fields);
        this.resource.fields
            .filter((item) => this.resource.listConfig.columns.includes(item.name))
            .forEach((elt) => {
            colunms[elt.name] = {
                title: elt.label,
                type: 'custom',
                filter: false,
                addable: true,
                valuePrepareFunction: (cell, row) => ({
                    restField: elt,
                    cell,
                    row,
                }),
                editor: {
                    type: 'custom',
                    component: RestResourceEditorFieldsComponent,
                },
                renderComponent: RestResourceListFieldComponent,
            };
        });
        return colunms;
    }
    onSumbit() {
        if (this.formState.isAdd)
            this.onCreate();
        else
            this.onEdit();
    }
    addJSONField(event) {
        this.jsonEditorOptions[event.name].push({
            label: '',
            value: '',
            add: true,
        });
    }
    removeJSONField(event, index) {
        this.jsonEditorOptions[event.name].splice(index, 1);
    }
    onMorphSelectField(event, field) {
        const ressources = this.serviceRestAdminConfig.getSpecificResource(event);
        const fieldConfig = this.resource.fields.find((elt) => elt.name == field);
        this.serviceRest
            .getResources({
            api: ressources.api,
            queryParams: fieldConfig.metaData.addConfig.morphConfig.queryParams
                ? fieldConfig.metaData.addConfig.morphConfig.queryParams
                : {},
        })
            .subscribe((response) => {
            this.options[field] = response;
            this.allFilterContains[field] = of(this.options[field]);
        });
    }
    onLatChange(value, fieldName) {
        const fieldLat = this.resource.fields.find((elt) => elt.name == fieldName);
        const name = fieldLat.metaData.addConfig.mapConfig.lattiudeKeyField;
        this.form.patchValue({
            [name]: value,
        });
    }
    onLngChange(value, fieldName) {
        const fieldLat = this.resource.fields.find((elt) => elt.name == fieldName);
        const name = fieldLat.metaData.addConfig.mapConfig.longitudeKeyField;
        this.form.patchValue({
            [name]: value,
        });
    }
}
RestResourceAddComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0, type: RestResourceAddComponent, deps: [{ token: i1.FormBuilder }, { token: i2.RestResourceService }, { token: i3.RestAdminConfigService }, { token: i4.ActivatedRoute }, { token: i5.NbMenuService }, { token: i6.RestExportService }, { token: i5.NbDialogService }, { token: i4.Router }, { token: i7.NotificationService }, { token: i0.ChangeDetectorRef }, { token: i8.NgxPermissionsService }, { token: i9.RestErrorService }], target: i0.ɵɵFactoryTarget.Component });
RestResourceAddComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.5", type: RestResourceAddComponent, selector: "ngx-rest-resource-add", inputs: { resource: "resource" }, viewQueries: [{ propertyName: "belongTo", first: true, predicate: ["belongTo"], descendants: true }, { propertyName: "inputBelongToMany", first: true, predicate: ["autoBelongToMany"], descendants: true }], ngImport: i0, template: "<ng-container *ngIf=\"resource.permissions.length <= 0\">\n  <nb-card>\n    <nb-card-header *ngIf=\"formState.onReady && !formState.isAdd\"\n      >{{ resource.editConfig.title }}\n    </nb-card-header>\n\n    <nb-card-header *ngIf=\"formState.onReady && formState.isAdd\"\n      >{{ resource.addConfig.title }}\n    </nb-card-header>\n\n    <nb-card-body>\n      <nb-tabset fullWidth>\n        <nb-tab tabTitle=\"Ajout simple\">\n          <form [formGroup]=\"form\" class=\"row\" *ngIf=\"formState.onReady\">\n            <div\n              *ngFor=\"\n                let field of resource.fields;\n                trackBy: trackByFn;\n                let i = index\n              \"\n              class=\"col-12\"\n            >\n              <ng-container *ngIf=\"field.inForm\">\n                <!-- Input type string  -->\n                <div\n                  class=\"input-space\"\n                  *ngIf=\"\n                    field.type == REST_FIELD_TYPES.STRING ||\n                    field.type == REST_FIELD_TYPES.HAS_ONE\n                  \"\n                >\n                  <label class=\"label\">{{ field.label | titlecase }}</label>\n                  <input\n                    nbInput\n                    fullWidth\n                    [id]=\"i\"\n                    [attributes]=\"field.metaData.attributes\"\n                    [placeholder]=\"field.label\"\n                    [formControlName]=\"field.name\"\n                    type=\"text\"\n                  />\n                </div>\n\n                <!-- Input type text -->\n                <div\n                  class=\"input-space\"\n                  *ngIf=\"field.type == REST_FIELD_TYPES.TEXT\"\n                >\n                  <label class=\"label\">{{ field.label | titlecase }}</label>\n                  <textarea\n                    nbInput\n                    fullWidth\n                    [id]=\"i\"\n                    [attributes]=\"field.metaData.attributes\"\n                    [placeholder]=\"field.label\"\n                    [formControlName]=\"field.name\"\n                  ></textarea>\n                </div>\n\n                <ng-container *ngIf=\"field.type == REST_FIELD_TYPES.PASSWORD\">\n                  <div class=\"input-space\">\n                    <label class=\"label\">{{ field.label | titlecase }}</label>\n                    <input\n                      nbInput\n                      fullWidth\n                      [id]=\"i\"\n                      [attributes]=\"field.metaData.attributes\"\n                      [placeholder]=\"field.label\"\n                      [formControlName]=\"field.name\"\n                      type=\"password\"\n                    />\n                  </div>\n                  <ng-container\n                    *ngIf=\"\n                      field?.metaData?.addConfig?.passwordOptions?.isNeedConfirm\n                    \"\n                  >\n                    <div class=\"input-space\">\n                      <label class=\"label\">{{\n                        field?.metaData?.addConfig?.passwordOptions\n                          ?.confirmLabel\n                          ? field?.metaData?.addConfig?.passwordOptions\n                              ?.confirmLabel\n                          : (field.label + \"_confirmation\" | titlecase)\n                      }}</label>\n                      <input\n                        nbInput\n                        fullWidth\n                        [id]=\"i\"\n                        [attributes]=\"field.metaData.attributes\"\n                        [placeholder]=\"field.label + '_confirmation'\"\n                        [formControlName]=\"\n                          field.metaData?.addConfig?.passwordOptions\n                            ?.confirmField\n                            ? field.metaData.addConfig.passwordOptions\n                                .confirmField\n                            : field.name + '_confirmation'\n                        \"\n                        type=\"password\"\n                      />\n                    </div>\n                  </ng-container>\n                </ng-container>\n\n                <!-- Input type number  -->\n                <div\n                  class=\"input-space\"\n                  *ngIf=\"field.type == REST_FIELD_TYPES.NUMBER\"\n                >\n                  <label class=\"label\">{{ field.label | titlecase }}</label>\n                  <input\n                    nbInput\n                    fullWidth\n                    [id]=\"i\"\n                    [attributes]=\"field.metaData.attributes\"\n                    [placeholder]=\"field.label\"\n                    [formControlName]=\"field.name\"\n                    type=\"number\"\n                  />\n                </div>\n\n                <!-- Input type date -->\n                <div\n                  class=\"input-space\"\n                  *ngIf=\"field.type == REST_FIELD_TYPES.DATE\"\n                >\n                  <label class=\"label\">{{ field.label | titlecase }}</label>\n                  <input\n                    nbInput\n                    [placeholder]=\"field.label\"\n                    [nbDatepicker]=\"formpicker\"\n                    [attributes]=\"field.metaData.attributes\"\n                    fullWidth\n                    [formControlName]=\"field.name\"\n                  />\n                  <nb-datepicker #formpicker></nb-datepicker>\n                </div>\n\n                <!-- Input type dateTime -->\n                <div\n                  class=\"input-space\"\n                  *ngIf=\"field.type == REST_FIELD_TYPES.DATETIME\"\n                >\n                  <label class=\"label\">{{ field.label | titlecase }}</label>\n                  <input\n                    nbInput\n                    fullWidth\n                    [attributes]=\"field.metaData.attributes\"\n                    [placeholder]=\"field.label\"\n                    [nbDatepicker]=\"dateTimePicker\"\n                    [formControlName]=\"field.name\"\n                  />\n                  <nb-date-timepicker\n                    withSeconds\n                    #dateTimePicker\n                  ></nb-date-timepicker>\n                </div>\n\n                <!-- Input type time -->\n                <div\n                  class=\"input-space\"\n                  *ngIf=\"field.type == REST_FIELD_TYPES.TIME\"\n                >\n                  <label class=\"label\">{{ field.label | titlecase }}</label>\n                  <input\n                    [nbTimepicker]=\"timepicker\"\n                    fullWidth\n                    [attributes]=\"field.metaData.attributes\"\n                    [formControlName]=\"field.name\"\n                    twelveHoursFormat\n                    nbInput\n                  />\n                  <nb-timepicker #timepicker></nb-timepicker>\n                </div>\n\n                <!-- Input type enum -->\n                <ng-container\n                  class=\"input-space\"\n                  *ngIf=\"field.type == REST_FIELD_TYPES.ENUM\"\n                >\n                  <label class=\"label\">{{ field.label | titlecase }}</label>\n                  <nb-select\n                    fullWidth\n                    [formControlName]=\"field.name\"\n                    [attributes]=\"field.metaData.attributes\"\n                    [placeholder]=\"field.label\"\n                  >\n                    <nb-option\n                      *ngFor=\"\n                        let option of field.metaData.addConfig.enumOptions\n                      \"\n                      [value]=\"option.value\"\n                      >{{ option.label }}</nb-option\n                    >\n                  </nb-select>\n                </ng-container>\n\n                <!-- Input type boolean -->\n                <div\n                  class=\"input-space\"\n                  *ngIf=\"field.type == REST_FIELD_TYPES.BOOLEAN\"\n                >\n                  <!-- <label class=\"label\">{{ field.label | titlecase }}</label> -->\n                  <div style=\"display: flex; align-items: center\">\n                    <label style=\"margin-right: 0.5em\">{{\n                      field.label | titlecase\n                    }}</label>\n                    <!-- [name]=\"field.name\" -->\n                    <nb-toggle [formControlName]=\"field.name\"></nb-toggle>\n                  </div>\n                </div>\n\n                <!-- Input type file -->\n                <div\n                  class=\"input-space\"\n                  *ngIf=\"\n                    field.type == REST_FIELD_TYPES.FILE ||\n                    field.type == REST_FIELD_TYPES.PDF\n                  \"\n                >\n                  <label class=\"label\">{{ field.label | titlecase }}</label>\n                  <div\n                    style=\"border: dashed; display: flex\"\n                    class=\"custom-dropzone form-control-custom rounded m-2\"\n                    ngx-dropzone\n                    (change)=\"onSelect($event, field)\"\n                  >\n                    <img\n                      *ngIf=\"\n                        urlsImage[field.name] != '' &&\n                        filesUpload[field.name].length <= 0\n                      \"\n                      [attributes]=\"field.metaData.attributes\"\n                      [src]=\"urlsImage[field.name]\"\n                      class=\"custom-img-dropzone\"\n                    />\n\n                    <ngx-dropzone-label\n                      *ngIf=\"filesUpload[field.name].length <= 0\"\n                    >\n                      <nb-icon\n                        icon=\"cloud-upload-outline\"\n                        style=\"font-size: 2em; color: #ccc\"\n                      ></nb-icon>\n                      Drag and drop files here or click to upload\n                    </ngx-dropzone-label>\n\n                    <ngx-dropzone-preview\n                      ngProjectAs=\"ngx-dropzone-preview\"\n                      *ngFor=\"let f of filesUpload[field.name]\"\n                      [file]=\"f\"\n                      [removable]=\"true\"\n                      (removed)=\"onRemove(field)\"\n                    >\n                      <ngx-dropzone-label\n                        >{{ f.name }} ({{ f.type }})</ngx-dropzone-label\n                      >\n                    </ngx-dropzone-preview>\n                  </div>\n                </div>\n\n                <div\n                  class=\"input-space\"\n                  *ngIf=\"field.type == REST_FIELD_TYPES.IMAGE\"\n                >\n                  <label class=\"label\">{{ field.label | titlecase }}</label>\n\n                  <div\n                    style=\"border: dashed; display: flex\"\n                    class=\"custom-dropzone form-control-custom rounded m-2\"\n                    ngx-dropzone\n                    (change)=\"onSelect($event, field)\"\n                  >\n                    <img\n                      *ngIf=\"\n                        urlsImage[field.name] != '' &&\n                        filesUpload[field.name].length <= 0\n                      \"\n                      [attributes]=\"field.metaData.attributes\"\n                      [src]=\"urlsImage[field.name]\"\n                      class=\"custom-img-dropzone\"\n                    />\n\n                    <ngx-dropzone-label\n                      *ngIf=\"\n                        filesUpload[field.name].length <= 0 &&\n                        urlsImage[field.name] == ''\n                      \"\n                    >\n                      <nb-icon\n                        icon=\"cloud-upload-outline\"\n                        style=\"font-size: 2em; color: #ccc\"\n                      ></nb-icon>\n                      Drag and drop files here or click to upload\n                    </ngx-dropzone-label>\n\n                    <!-- <ng-container\n                      *ngIf=\"filesUpload[field.name].length > 0\"\n                    > -->\n                    <ngx-dropzone-image-preview\n                      ngProjectAs=\"ngx-dropzone-preview\"\n                      *ngFor=\"let f of filesUpload[field.name]\"\n                      [file]=\"f\"\n                      [removable]=\"true\"\n                      (removed)=\"onRemove(field)\"\n                    >\n                    </ngx-dropzone-image-preview>\n                    <!-- </ng-container> -->\n                  </div>\n\n                  <button\n                    nbButton\n                    status=\"primary\"\n                    *ngIf=\"\n                      !isCrop[field.name] && controlCroper[field.name] != null\n                    \"\n                    (click)=\"activeCroper(field)\"\n                  >\n                    CROP\n                  </button>\n\n                  <ng-container *ngIf=\"isCrop[field.name]\">\n                    <image-cropper\n                      [imageFile]=\"controlCroper[field.name]\"\n                      [maintainAspectRatio]=\"true\"\n                      [aspectRatio]=\"4 / 3\"\n                      format=\"png\"\n                      (imageCropped)=\"imageCropped($event, field)\"\n                    ></image-cropper>\n\n                    <button\n                      nbButton\n                      status=\"primary\"\n                      (click)=\"saveCroper(field)\"\n                    >\n                      SAVE CHANGE\n                    </button>\n                    <button\n                      nbButton\n                      status=\"danger\"\n                      (click)=\"desactiveCrop(field)\"\n                    >\n                      Cancel\n                    </button>\n                  </ng-container>\n\n                  <!-- <img [src]=\"croppedImage\" /> -->\n                </div>\n\n                <!-- Input type hasMany -->\n                <div\n                  *ngIf=\"field.type == REST_FIELD_TYPES.HAS_MANY\"\n                  class=\"input-space\"\n                >\n                  <label class=\"label\">{{ field.label | titlecase }}</label>\n                  <nb-tag-list\n                    (tagRemove)=\"onTagRemove($event, field.name)\"\n                    fullWidth\n                  >\n                    <nb-tag\n                      *ngFor=\"let tree of form.get([field.name]).value\"\n                      [text]=\"tree\"\n                      removable\n                    ></nb-tag>\n                    <input\n                      type=\"text\"\n                      fullWidth\n                      nbTagInput\n                      [attributes]=\"field.metaData.attributes\"\n                      [placeholder]=\"field.label\"\n                      (tagAdd)=\"onTagAdd($event, field.name)\"\n                    />\n                  </nb-tag-list>\n                </div>\n\n                <!-- Input type belong_to -->\n                <div\n                  *ngIf=\"field.type == REST_FIELD_TYPES.BELONG_TO\"\n                  class=\"input-space\"\n                >\n                  <label class=\"label\">{{ field.label | titlecase }}</label>\n\n                  <div class=\"row\">\n                    <div class=\"col-9\">\n                      <input\n                        #autoInput\n                        nbInput\n                        fullWidth\n                        type=\"text\"\n                        [attributes]=\"field.metaData.attributes\"\n                        [formControlName]=\"field.name\"\n                        placeholder=\"Enter value\"\n                        [nbAutocomplete]=\"autoComplete\"\n                        (keyup)=\"filterInput($event, field)\"\n                        [id]=\"i\"\n                      />\n                    </div>\n                    <div\n                      *ngIf=\"\n                        !field.metaData?.addConfig?.belongToOptions?.secondField\n                      \"\n                      class=\"col-3\"\n                    >\n                      <input\n                        nbInput\n                        fullWidth\n                        [attributes]=\"field.metaData.attributes\"\n                        disabled=\"true\"\n                        type=\"text\"\n                        placeholder=\"Value\"\n                        [value]=\"\n                          belongToValue[field.name]\n                            ? belongToValue[field.name]\n                            : ''\n                        \"\n                        [id]=\"i + 100\"\n                      />\n                    </div>\n                  </div>\n\n                  <nb-autocomplete\n                    #autoComplete\n                    (selectedChange)=\"onSelectionChange($event, field)\"\n                  >\n                    <nb-option\n                      *ngFor=\"\n                        let option of allFilterContains[field.name] | async\n                      \"\n                      [value]=\"\n                        option[\n                          field?.metaData?.addConfig.belongToOptions?.value\n                            ? field?.metaData?.addConfig?.belongToOptions?.value\n                            : 'id'\n                        ]\n                      \"\n                      [attributes]=\"field.metaData.attributes\"\n                    >\n                      {{\n                        option[\n                          field.metaData.addConfig.belongToOptions.template\n                            ? field.metaData.addConfig.belongToOptions.template\n                            : field.metaData.addConfig.belongToOptions\n                                .filterKeys[0]\n                        ]\n                      }}\n                    </nb-option>\n                  </nb-autocomplete>\n                </div>\n\n                <!-- Input type belong_to_many -->\n                <div\n                  class=\"input-space\"\n                  *ngIf=\"field.type == REST_FIELD_TYPES.BELONG_TO_MANY\"\n                >\n                  <label class=\"label\">{{ field.label | titlecase }}</label>\n                  <nb-tag-list (tagRemove)=\"onTagRemoveBelong($event, field)\">\n                    <nb-tag\n                      *ngFor=\"let tree of belongToMany[field.name]\"\n                      [text]=\"\n                        tree[\n                          field.metaData.addConfig.belongToManyOptions.template\n                            ? field.metaData.addConfig.belongToManyOptions\n                                .template\n                            : field.metaData.addConfig.belongToManyOptions\n                                .filterKeys[0]\n                        ]\n                      \"\n                      [attributes]=\"field.metaData.attributes\"\n                      removable\n                    ></nb-tag>\n                    <input\n                      type=\"text\"\n                      nbTagInput\n                      #autoBelongToMany\n                      [attributes]=\"field.metaData.attributes\"\n                      [nbAutocomplete]=\"belongToField\"\n                      (keyup)=\"filterInput($event, field)\"\n                      [placeholder]=\"field.label\"\n                      [formControlName]=\"field.name\"\n                      fullWidth\n                    />\n                  </nb-tag-list>\n\n                  <nb-autocomplete\n                    #belongToField\n                    (selectedChange)=\"onChoose($event, field)\"\n                  >\n                    <nb-option\n                      *ngFor=\"\n                        let option of allFilterContains[field.name] | async\n                      \"\n                      [value]=\"option\"\n                      [attributes]=\"field.metaData.attributes\"\n                    >\n                      {{\n                        option[\n                          field.metaData.addConfig.belongToManyOptions.template\n                            ? field.metaData.addConfig.belongToManyOptions\n                                .template\n                            : field.metaData.addConfig.belongToManyOptions\n                                .filterKeys[0]\n                        ]\n                      }}\n                    </nb-option>\n                  </nb-autocomplete>\n                </div>\n\n                <!-- Input type color  -->\n                <div\n                  class=\"input-space\"\n                  *ngIf=\"field.type == REST_FIELD_TYPES.COLOR\"\n                >\n                  <label class=\"label\">{{ field.label | titlecase }}</label>\n                  <div class=\"color-row\">\n                    <input\n                      nbInput\n                      fullWidth\n                      style=\"height: 45px\"\n                      [id]=\"i\"\n                      [attributes]=\"field.metaData.attributes\"\n                      [placeholder]=\"field.label\"\n                      [formControlName]=\"field.name\"\n                      type=\"color\"\n                    />\n                  </div>\n                </div>\n\n                <!-- Input type link -->\n                <div\n                  class=\"input-space\"\n                  *ngIf=\"field.type == REST_FIELD_TYPES.LINK\"\n                >\n                  <label class=\"label\">{{ field.label | titlecase }}</label>\n                  <input\n                    nbInput\n                    fullWidth\n                    [id]=\"i\"\n                    [attributes]=\"field.metaData.attributes\"\n                    [placeholder]=\"field.label\"\n                    [formControlName]=\"field.name\"\n                    type=\"text\"\n                  />\n\n                  <!-- <div\n                  *ngIf=\"\n                    form.get([field.name]).hasError('invalidUrl') &&\n                    form.get([field.name]).touched\n                  \"\n                  class=\"text-error\"\n                >\n                  {{ \"rest-add.invalid-link\" | translate }}\n                </div> -->\n                </div>\n\n                <!-- Input type JSON -->\n                <div\n                  class=\"input-space\"\n                  *ngIf=\"field.type == REST_FIELD_TYPES.JSON\"\n                >\n                  <div>\n                    <label class=\"label\">{{ field.label | titlecase }}</label>\n                    <button\n                      nbButton\n                      status=\"primary\"\n                      shape=\"round\"\n                      size=\"small\"\n                      [attributes]=\"field.metaData.attributes\"\n                      outline\n                      ghost\n                      *ngIf=\"field.metaData.addConfig.jsonConfig.isOpen\"\n                      (click)=\"addJSONField(field)\"\n                    >\n                      <nb-icon icon=\"plus\" pack=\"fas\"></nb-icon>\n                    </button>\n                  </div>\n\n                  <div\n                    class=\"row mb-2\"\n                    *ngFor=\"\n                      let item of jsonEditorOptions[field.name];\n                      let index = index\n                    \"\n                  >\n                    <div class=\"col\" [id]=\"index\">\n                      <input\n                        fullWidth\n                        nbInput\n                        *ngIf=\"item.add; else elseBlock\"\n                        [(ngModel)]=\"item.label\"\n                        [attributes]=\"field.metaData.attributes\"\n                        [ngModelOptions]=\"{ standalone: true }\"\n                      />\n                      <ng-template #elseBlock>\n                        <input\n                          fullWidth\n                          nbInput\n                          disabled\n                          [value]=\"item.label\"\n                        />\n                      </ng-template>\n                    </div>\n                    <div class=\"col\">\n                      <input\n                        fullWidth\n                        nbInput\n                        [(ngModel)]=\"item.value\"\n                        [ngModelOptions]=\"{ standalone: true }\"\n                      />\n                    </div>\n                    <div class=\"col\" *ngIf=\"item.add\">\n                      <button\n                        nbButton\n                        status=\"primary\"\n                        shape=\"round\"\n                        size=\"small\"\n                        outline\n                        ghost\n                        (click)=\"removeJSONField(field, index)\"\n                      >\n                        <nb-icon icon=\"trash-alt\" pack=\"fas\"></nb-icon>\n                      </button>\n                    </div>\n                  </div>\n                </div>\n\n                <!-- Input type MORPH -->\n                <div\n                  class=\"input-space\"\n                  *ngIf=\"field.type == REST_FIELD_TYPES.MORPH\"\n                >\n                  <div class=\"row\">\n                    <div class=\"col-3\">\n                      <label class=\"label\">Ressources</label>\n                      <nb-select\n                        fullWidth\n                        (selectedChange)=\"\n                          onMorphSelectField($event, field.name)\n                        \"\n                      >\n                        <nb-option\n                          *ngFor=\"\n                            let option of field.metaData.addConfig.morphConfig\n                              .related\n                          \"\n                          [attributes]=\"field.metaData.attributes\"\n                          [value]=\"option.value\"\n                          >{{ option.label }}</nb-option\n                        >\n                      </nb-select>\n                    </div>\n\n                    <div class=\"col-9\">\n                      <label class=\"label\">{{ field.label | titlecase }}</label>\n                      <input\n                        #autoInput\n                        nbInput\n                        fullWidth\n                        type=\"text\"\n                        [attributes]=\"field.metaData.attributes\"\n                        [formControlName]=\"field.name\"\n                        placeholder=\"Enter value\"\n                        [nbAutocomplete]=\"autoComplete\"\n                        (keyup)=\"filterInput($event, field)\"\n                        [id]=\"i\"\n                        [disabled]=\"!allFilterContains[field.name]\"\n                      />\n                      <nb-autocomplete\n                        #autoComplete\n                        (selectedChange)=\"onSelectionChange($event, field)\"\n                      >\n                        <nb-option\n                          *ngFor=\"\n                            let option of allFilterContains[field.name] | async\n                          \"\n                          [value]=\"\n                            option[\n                              field?.metaData?.addConfig.morphConfig?.value\n                                ? field?.metaData?.addConfig.morphConfig?.value\n                                : 'id'\n                            ]\n                          \"\n                          [attributes]=\"field.metaData.attributes\"\n                        >\n                          {{\n                            option[\n                              field.metaData.addConfig.morphConfig.template\n                                ? field.metaData.addConfig.morphConfig.template\n                                : field.metaData.addConfig.morphConfig\n                                    .filterKeys[0]\n                            ]\n                          }}\n                        </nb-option>\n                      </nb-autocomplete>\n                    </div>\n                  </div>\n                </div>\n\n                <!-- Input type GOOGLEMAP -->\n                <div\n                  class=\"input-space\"\n                  *ngIf=\"field.type == REST_FIELD_TYPES.MAP\"\n                >\n                  <label class=\"label\">{{ field.label | titlecase }}</label>\n                  <ngx-gmaps\n                    (latChange)=\"onLatChange($event, field.name)\"\n                    (lngChange)=\"onLngChange($event, field.name)\"\n                    [googleMapKey]=\"googleMapKeys\"\n                  ></ngx-gmaps>\n                </div>\n              </ng-container>\n\n              <div class=\"\">\n                <ng-container *ngIf=\"field.note != ''\">\n                  <span class=\"text-muted ml-20 mt-3\">{{ field.note }}</span>\n                </ng-container>\n              </div>\n            </div>\n          </form>\n\n          <div class=\"row text-center my-2\">\n            <div class=\"col-12\">\n              <div class=\"text-danger\" [innerHTML]=\"error\"></div> \n            </div>\n          </div>\n        </nb-tab>\n        <nb-tab tabTitle=\"Importation\">\n          <div class=\"row\">\n            <div class=\"col-9\"></div>\n            <div class=\"col-3\">\n              <button\n                nbButton\n                status=\"primary\"\n                [nbContextMenu]=\"items\"\n                nbContextMenuTag=\"my-context-add\"\n              >\n                {{ \"rest-add.import\" | translate }}\n              </button>\n            </div>\n          </div>\n\n          <div>\n            <ng2-smart-table [settings]=\"settings\" [source]=\"source\">\n            </ng2-smart-table>\n          </div>\n        </nb-tab>\n      </nb-tabset>\n    </nb-card-body>\n\n    <nb-card-footer>\n      <div class=\"buttons-row\">\n        <button\n          nbButton\n          (click)=\"onSumbit()\"\n          status=\"primary\"\n          [disabled]=\"loading\"\n        >\n          >\n          <!-- [disabled]=\"loading\" -->\n          <span\n            *ngIf=\"loading\"\n            class=\"spinner-border spinner-border-sm mr-2\"\n          ></span>\n          {{ formState.btnLabel }}\n        </button>\n      </div>\n    </nb-card-footer>\n  </nb-card>\n</ng-container>\n\n<ng-container *ngIf=\"resource.permissions.length > 0\">\n  <div *ngxPermissionsOnly=\"permissions\">\n    <nb-card>\n      <nb-card-header *ngIf=\"formState.onReady && !formState.isAdd\"\n        >{{ resource.editConfig.title }}\n      </nb-card-header>\n\n      <nb-card-header *ngIf=\"formState.onReady && formState.isAdd\"\n        >{{ resource.addConfig.title }}\n      </nb-card-header>\n\n      <nb-card-body>\n        <nb-tabset fullWidth>\n          <nb-tab tabTitle=\"Ajout simple\">\n            <form [formGroup]=\"form\" class=\"row\" *ngIf=\"formState.onReady\">\n              <div\n                *ngFor=\"\n                  let field of resource.fields;\n                  trackBy: trackByFn;\n                  let i = index\n                \"\n                class=\"col-12\"\n              >\n                <ng-container *ngIf=\"field.inForm\">\n                  <!-- Input type string  -->\n                  <div\n                    class=\"input-space\"\n                    *ngIf=\"\n                      field.type == REST_FIELD_TYPES.STRING ||\n                      field.type == REST_FIELD_TYPES.HAS_ONE\n                    \"\n                  >\n                    <label class=\"label\">{{ field.label | titlecase }}</label>\n                    <input\n                      nbInput\n                      fullWidth\n                      [id]=\"i\"\n                      [attributes]=\"field.metaData.attributes\"\n                      [placeholder]=\"field.label\"\n                      [formControlName]=\"field.name\"\n                      type=\"text\"\n                    />\n                  </div>\n\n                  <!-- Input type text -->\n                  <div\n                    class=\"input-space\"\n                    *ngIf=\"field.type == REST_FIELD_TYPES.TEXT\"\n                  >\n                    <label class=\"label\">{{ field.label | titlecase }}</label>\n                    <textarea\n                      nbInput\n                      fullWidth\n                      [id]=\"i\"\n                      [attributes]=\"field.metaData.attributes\"\n                      [placeholder]=\"field.label\"\n                      [formControlName]=\"field.name\"\n                    ></textarea>\n                  </div>\n\n                  <ng-container *ngIf=\"field.type == REST_FIELD_TYPES.PASSWORD\">\n                    <div class=\"input-space\">\n                      <label class=\"label\">{{ field.label | titlecase }}</label>\n                      <input\n                        nbInput\n                        fullWidth\n                        [id]=\"i\"\n                        [attributes]=\"field.metaData.attributes\"\n                        [placeholder]=\"field.label\"\n                        [formControlName]=\"field.name\"\n                        type=\"password\"\n                      />\n                    </div>\n                    <ng-container\n                      *ngIf=\"\n                        field?.metaData?.addConfig?.passwordOptions\n                          ?.isNeedConfirm\n                      \"\n                    >\n                      <div class=\"input-space\">\n                        <label class=\"label\">{{\n                          field?.metaData?.addConfig?.passwordOptions\n                            ?.confirmLabel\n                            ? field?.metaData?.addConfig?.passwordOptions\n                                ?.confirmLabel\n                            : (field.label + \"_confirmation\" | titlecase)\n                        }}</label>\n                        <input\n                          nbInput\n                          fullWidth\n                          [id]=\"i\"\n                          [attributes]=\"field.metaData.attributes\"\n                          [placeholder]=\"field.label + '_confirmation'\"\n                          [formControlName]=\"\n                            field.metaData?.addConfig?.passwordOptions\n                              ?.confirmField\n                              ? field.metaData.addConfig.passwordOptions\n                                  .confirmField\n                              : field.name + '_confirmation'\n                          \"\n                          type=\"password\"\n                        />\n                      </div>\n                    </ng-container>\n                  </ng-container>\n\n                  <!-- Input type number  -->\n                  <div\n                    class=\"input-space\"\n                    *ngIf=\"field.type == REST_FIELD_TYPES.NUMBER\"\n                  >\n                    <label class=\"label\">{{ field.label | titlecase }}</label>\n                    <input\n                      nbInput\n                      fullWidth\n                      [id]=\"i\"\n                      [attributes]=\"field.metaData.attributes\"\n                      [placeholder]=\"field.label\"\n                      [formControlName]=\"field.name\"\n                      type=\"number\"\n                    />\n                  </div>\n\n                  <!-- Input type date -->\n                  <div\n                    class=\"input-space\"\n                    *ngIf=\"field.type == REST_FIELD_TYPES.DATE\"\n                  >\n                    <label class=\"label\">{{ field.label | titlecase }}</label>\n                    <input\n                      nbInput\n                      [placeholder]=\"field.label\"\n                      [nbDatepicker]=\"formpicker\"\n                      [attributes]=\"field.metaData.attributes\"\n                      fullWidth\n                      [formControlName]=\"field.name\"\n                    />\n                    <nb-datepicker #formpicker></nb-datepicker>\n                  </div>\n\n                  <!-- Input type dateTime -->\n                  <div\n                    class=\"input-space\"\n                    *ngIf=\"field.type == REST_FIELD_TYPES.DATETIME\"\n                  >\n                    <label class=\"label\">{{ field.label | titlecase }}</label>\n                    <input\n                      nbInput\n                      fullWidth\n                      [attributes]=\"field.metaData.attributes\"\n                      [placeholder]=\"field.label\"\n                      [nbDatepicker]=\"dateTimePicker\"\n                      [formControlName]=\"field.name\"\n                    />\n                    <nb-date-timepicker\n                      withSeconds\n                      #dateTimePicker\n                    ></nb-date-timepicker>\n                  </div>\n\n                  <!-- Input type time -->\n                  <div\n                    class=\"input-space\"\n                    *ngIf=\"field.type == REST_FIELD_TYPES.TIME\"\n                  >\n                    <label class=\"label\">{{ field.label | titlecase }}</label>\n                    <input\n                      [nbTimepicker]=\"timepicker\"\n                      fullWidth\n                      [attributes]=\"field.metaData.attributes\"\n                      [formControlName]=\"field.name\"\n                      twelveHoursFormat\n                      nbInput\n                    />\n                    <nb-timepicker #timepicker></nb-timepicker>\n                  </div>\n\n                  <!-- Input type enum -->\n                  <ng-container\n                    class=\"input-space\"\n                    *ngIf=\"field.type == REST_FIELD_TYPES.ENUM\"\n                  >\n                    <label class=\"label\">{{ field.label | titlecase }}</label>\n                    <nb-select\n                      fullWidth\n                      [formControlName]=\"field.name\"\n                      [attributes]=\"field.metaData.attributes\"\n                      [placeholder]=\"field.label\"\n                    >\n                      <nb-option\n                        *ngFor=\"\n                          let option of field.metaData.addConfig.enumOptions\n                        \"\n                        [value]=\"option.value\"\n                        >{{ option.label }}</nb-option\n                      >\n                    </nb-select>\n                  </ng-container>\n\n                  <!-- Input type boolean -->\n                  <div\n                    class=\"input-space\"\n                    *ngIf=\"field.type == REST_FIELD_TYPES.BOOLEAN\"\n                  >\n                    <!-- <label class=\"label\">{{ field.label | titlecase }}</label> -->\n                    <div style=\"display: flex; align-items: center\">\n                      <label style=\"margin-right: 0.5em\">{{\n                        field.label | titlecase\n                      }}</label>\n                      <!-- [name]=\"field.name\" -->\n                      <nb-toggle [formControlName]=\"field.name\"></nb-toggle>\n                    </div>\n                  </div>\n\n                  <!-- Input type file -->\n                  <div\n                    class=\"input-space\"\n                    *ngIf=\"\n                      field.type == REST_FIELD_TYPES.FILE ||\n                      field.type == REST_FIELD_TYPES.PDF\n                    \"\n                  >\n                    <label class=\"label\">{{ field.label | titlecase }}</label>\n                    <div\n                      style=\"border: dashed; display: flex\"\n                      class=\"custom-dropzone form-control-custom rounded m-2\"\n                      ngx-dropzone\n                      (change)=\"onSelect($event, field)\"\n                    >\n                      <img\n                        *ngIf=\"\n                          urlsImage[field.name] != '' &&\n                          filesUpload[field.name].length <= 0\n                        \"\n                        [attributes]=\"field.metaData.attributes\"\n                        [src]=\"urlsImage[field.name]\"\n                        class=\"custom-img-dropzone\"\n                      />\n\n                      <ngx-dropzone-label\n                        *ngIf=\"filesUpload[field.name].length <= 0\"\n                      >\n                        <nb-icon\n                          icon=\"cloud-upload-outline\"\n                          style=\"font-size: 2em; color: #ccc\"\n                        ></nb-icon>\n                        Drag and drop files here or click to upload\n                      </ngx-dropzone-label>\n\n                      <ngx-dropzone-preview\n                        ngProjectAs=\"ngx-dropzone-preview\"\n                        *ngFor=\"let f of filesUpload[field.name]\"\n                        [file]=\"f\"\n                        [removable]=\"true\"\n                        (removed)=\"onRemove(field)\"\n                      >\n                        <ngx-dropzone-label\n                          >{{ f.name }} ({{ f.type }})</ngx-dropzone-label\n                        >\n                      </ngx-dropzone-preview>\n                    </div>\n                  </div>\n\n                  <div\n                    class=\"input-space\"\n                    *ngIf=\"field.type == REST_FIELD_TYPES.IMAGE\"\n                  >\n                    <label class=\"label\">{{ field.label | titlecase }}</label>\n\n                    <div\n                      style=\"border: dashed; display: flex\"\n                      class=\"custom-dropzone form-control-custom rounded m-2\"\n                      ngx-dropzone\n                      (change)=\"onSelect($event, field)\"\n                    >\n                      <img\n                        *ngIf=\"\n                          urlsImage[field.name] != '' &&\n                          filesUpload[field.name].length <= 0\n                        \"\n                        [attributes]=\"field.metaData.attributes\"\n                        [src]=\"urlsImage[field.name]\"\n                        class=\"custom-img-dropzone\"\n                      />\n\n                      <ngx-dropzone-label\n                        *ngIf=\"\n                          filesUpload[field.name].length <= 0 &&\n                          urlsImage[field.name] == ''\n                        \"\n                      >\n                        <nb-icon\n                          icon=\"cloud-upload-outline\"\n                          style=\"font-size: 2em; color: #ccc\"\n                        ></nb-icon>\n                        Drag and drop files here or click to upload\n                      </ngx-dropzone-label>\n\n                      <!-- <ng-container\n                        *ngIf=\"filesUpload[field.name].length > 0\"\n                      > -->\n                      <ngx-dropzone-image-preview\n                        ngProjectAs=\"ngx-dropzone-preview\"\n                        *ngFor=\"let f of filesUpload[field.name]\"\n                        [file]=\"f\"\n                        [removable]=\"true\"\n                        (removed)=\"onRemove(field)\"\n                      >\n                      </ngx-dropzone-image-preview>\n                      <!-- </ng-container> -->\n                    </div>\n\n                    <button\n                      nbButton\n                      status=\"primary\"\n                      *ngIf=\"\n                        !isCrop[field.name] && controlCroper[field.name] != null\n                      \"\n                      (click)=\"activeCroper(field)\"\n                    >\n                      CROP\n                    </button>\n\n                    <ng-container *ngIf=\"isCrop[field.name]\">\n                      <image-cropper\n                        [imageFile]=\"controlCroper[field.name]\"\n                        [maintainAspectRatio]=\"true\"\n                        [aspectRatio]=\"4 / 3\"\n                        format=\"png\"\n                        (imageCropped)=\"imageCropped($event, field)\"\n                      ></image-cropper>\n\n                      <button\n                        nbButton\n                        status=\"primary\"\n                        (click)=\"saveCroper(field)\"\n                      >\n                        SAVE CHANGE\n                      </button>\n                      <button\n                        nbButton\n                        status=\"danger\"\n                        (click)=\"desactiveCrop(field)\"\n                      >\n                        Cancel\n                      </button>\n                    </ng-container>\n\n                    <!-- <img [src]=\"croppedImage\" /> -->\n                  </div>\n\n                  <!-- Input type hasMany -->\n                  <div\n                    *ngIf=\"field.type == REST_FIELD_TYPES.HAS_MANY\"\n                    class=\"input-space\"\n                  >\n                    <label class=\"label\">{{ field.label | titlecase }}</label>\n                    <nb-tag-list\n                      (tagRemove)=\"onTagRemove($event, field.name)\"\n                      fullWidth\n                    >\n                      <nb-tag\n                        *ngFor=\"let tree of form.get([field.name]).value\"\n                        [text]=\"tree\"\n                        removable\n                      ></nb-tag>\n                      <input\n                        type=\"text\"\n                        fullWidth\n                        nbTagInput\n                        [attributes]=\"field.metaData.attributes\"\n                        [placeholder]=\"field.label\"\n                        (tagAdd)=\"onTagAdd($event, field.name)\"\n                      />\n                    </nb-tag-list>\n                  </div>\n\n                  <!-- Input type belong_to -->\n                  <div\n                    *ngIf=\"field.type == REST_FIELD_TYPES.BELONG_TO\"\n                    class=\"input-space\"\n                  >\n                    <label class=\"label\">{{ field.label | titlecase }}</label>\n\n                    <div class=\"row\">\n                      <div class=\"col-9\">\n                        <input\n                          #autoInput\n                          nbInput\n                          fullWidth\n                          type=\"text\"\n                          [attributes]=\"field.metaData.attributes\"\n                          [formControlName]=\"field.name\"\n                          placeholder=\"Enter value\"\n                          [nbAutocomplete]=\"autoComplete\"\n                          (keyup)=\"filterInput($event, field)\"\n                          [id]=\"i\"\n                        />\n                      </div>\n                      <div\n                        *ngIf=\"\n                          !field.metaData?.addConfig?.belongToOptions\n                            ?.secondField\n                        \"\n                        class=\"col-3\"\n                      >\n                        <input\n                          nbInput\n                          fullWidth\n                          [attributes]=\"field.metaData.attributes\"\n                          disabled=\"true\"\n                          type=\"text\"\n                          placeholder=\"Value\"\n                          [value]=\"\n                            belongToValue[field.name]\n                              ? belongToValue[field.name]\n                              : ''\n                          \"\n                          [id]=\"i + 100\"\n                        />\n                      </div>\n                    </div>\n\n                    <nb-autocomplete\n                      #autoComplete\n                      (selectedChange)=\"onSelectionChange($event, field)\"\n                    >\n                      <nb-option\n                        *ngFor=\"\n                          let option of allFilterContains[field.name] | async\n                        \"\n                        [value]=\"\n                          option[\n                            field?.metaData?.addConfig.belongToOptions?.value\n                              ? field?.metaData?.addConfig?.belongToOptions\n                                  ?.value\n                              : 'id'\n                          ]\n                        \"\n                        [attributes]=\"field.metaData.attributes\"\n                      >\n                        {{\n                          option[\n                            field.metaData.addConfig.belongToOptions.template\n                              ? field.metaData.addConfig.belongToOptions\n                                  .template\n                              : field.metaData.addConfig.belongToOptions\n                                  .filterKeys[0]\n                          ]\n                        }}\n                      </nb-option>\n                    </nb-autocomplete>\n                  </div>\n\n                  <!-- Input type belong_to_many -->\n                  <div\n                    class=\"input-space\"\n                    *ngIf=\"field.type == REST_FIELD_TYPES.BELONG_TO_MANY\"\n                  >\n                    <label class=\"label\">{{ field.label | titlecase }}</label>\n                    <nb-tag-list (tagRemove)=\"onTagRemoveBelong($event, field)\">\n                      <nb-tag\n                        *ngFor=\"let tree of belongToMany[field.name]\"\n                        [text]=\"\n                          tree[\n                            field.metaData.addConfig.belongToManyOptions\n                              .template\n                              ? field.metaData.addConfig.belongToManyOptions\n                                  .template\n                              : field.metaData.addConfig.belongToManyOptions\n                                  .filterKeys[0]\n                          ]\n                        \"\n                        [attributes]=\"field.metaData.attributes\"\n                        removable\n                      ></nb-tag>\n                      <input\n                        type=\"text\"\n                        nbTagInput\n                        #autoBelongToMany\n                        [attributes]=\"field.metaData.attributes\"\n                        [nbAutocomplete]=\"belongToField\"\n                        (keyup)=\"filterInput($event, field)\"\n                        [placeholder]=\"field.label\"\n                        [formControlName]=\"field.name\"\n                        fullWidth\n                      />\n                    </nb-tag-list>\n\n                    <nb-autocomplete\n                      #belongToField\n                      (selectedChange)=\"onChoose($event, field)\"\n                    >\n                      <nb-option\n                        *ngFor=\"\n                          let option of allFilterContains[field.name] | async\n                        \"\n                        [value]=\"option\"\n                        [attributes]=\"field.metaData.attributes\"\n                      >\n                        {{\n                          option[\n                            field.metaData.addConfig.belongToManyOptions\n                              .template\n                              ? field.metaData.addConfig.belongToManyOptions\n                                  .template\n                              : field.metaData.addConfig.belongToManyOptions\n                                  .filterKeys[0]\n                          ]\n                        }}\n                      </nb-option>\n                    </nb-autocomplete>\n                  </div>\n\n                  <!-- Input type color  -->\n                  <div\n                    class=\"input-space\"\n                    *ngIf=\"field.type == REST_FIELD_TYPES.COLOR\"\n                  >\n                    <label class=\"label\">{{ field.label | titlecase }}</label>\n                    <div class=\"color-row\">\n                      <input\n                        nbInput\n                        fullWidth\n                        style=\"height: 45px\"\n                        [id]=\"i\"\n                        [attributes]=\"field.metaData.attributes\"\n                        [placeholder]=\"field.label\"\n                        [formControlName]=\"field.name\"\n                        type=\"color\"\n                      />\n                    </div>\n                  </div>\n\n                  <!-- Input type link -->\n                  <div\n                    class=\"input-space\"\n                    *ngIf=\"field.type == REST_FIELD_TYPES.LINK\"\n                  >\n                    <label class=\"label\">{{ field.label | titlecase }}</label>\n                    <input\n                      nbInput\n                      fullWidth\n                      [id]=\"i\"\n                      [attributes]=\"field.metaData.attributes\"\n                      [placeholder]=\"field.label\"\n                      [formControlName]=\"field.name\"\n                      type=\"text\"\n                    />\n\n                    <!-- <div\n                    *ngIf=\"\n                      form.get([field.name]).hasError('invalidUrl') &&\n                      form.get([field.name]).touched\n                    \"\n                    class=\"text-error\"\n                  >\n                    {{ \"rest-add.invalid-link\" | translate }}\n                  </div> -->\n                  </div>\n\n                  <!-- Input type JSON -->\n                  <div\n                    class=\"input-space\"\n                    *ngIf=\"field.type == REST_FIELD_TYPES.JSON\"\n                  >\n                    <div>\n                      <label class=\"label\">{{ field.label | titlecase }}</label>\n                      <button\n                        nbButton\n                        status=\"primary\"\n                        shape=\"round\"\n                        size=\"small\"\n                        [attributes]=\"field.metaData.attributes\"\n                        outline\n                        ghost\n                        *ngIf=\"field.metaData.addConfig.jsonConfig.isOpen\"\n                        (click)=\"addJSONField(field)\"\n                      >\n                        <nb-icon icon=\"plus\" pack=\"fas\"></nb-icon>\n                      </button>\n                    </div>\n\n                    <div\n                      class=\"row mb-2\"\n                      *ngFor=\"\n                        let item of jsonEditorOptions[field.name];\n                        let index = index\n                      \"\n                    >\n                      <div class=\"col\" [id]=\"index\">\n                        <input\n                          fullWidth\n                          nbInput\n                          *ngIf=\"item.add; else elseBlock\"\n                          [(ngModel)]=\"item.label\"\n                          [attributes]=\"field.metaData.attributes\"\n                          [ngModelOptions]=\"{ standalone: true }\"\n                        />\n                        <ng-template #elseBlock>\n                          <input\n                            fullWidth\n                            nbInput\n                            disabled\n                            [value]=\"item.label\"\n                          />\n                        </ng-template>\n                      </div>\n                      <div class=\"col\">\n                        <input\n                          fullWidth\n                          nbInput\n                          [(ngModel)]=\"item.value\"\n                          [ngModelOptions]=\"{ standalone: true }\"\n                        />\n                      </div>\n                      <div class=\"col\" *ngIf=\"item.add\">\n                        <button\n                          nbButton\n                          status=\"primary\"\n                          shape=\"round\"\n                          size=\"small\"\n                          outline\n                          ghost\n                          (click)=\"removeJSONField(field, index)\"\n                        >\n                          <nb-icon icon=\"trash-alt\" pack=\"fas\"></nb-icon>\n                        </button>\n                      </div>\n                    </div>\n                  </div>\n\n                  <!-- Input type MORPH -->\n                  <div\n                    class=\"input-space\"\n                    *ngIf=\"field.type == REST_FIELD_TYPES.MORPH\"\n                  >\n                    <div class=\"row\">\n                      <div class=\"col-3\">\n                        <label class=\"label\">Ressources</label>\n                        <nb-select\n                          fullWidth\n                          (selectedChange)=\"\n                            onMorphSelectField($event, field.name)\n                          \"\n                        >\n                          <nb-option\n                            *ngFor=\"\n                              let option of field.metaData.addConfig.morphConfig\n                                .related\n                            \"\n                            [attributes]=\"field.metaData.attributes\"\n                            [value]=\"option.value\"\n                            >{{ option.label }}</nb-option\n                          >\n                        </nb-select>\n                      </div>\n\n                      <div class=\"col-9\">\n                        <label class=\"label\">{{\n                          field.label | titlecase\n                        }}</label>\n                        <input\n                          #autoInput\n                          nbInput\n                          fullWidth\n                          type=\"text\"\n                          [attributes]=\"field.metaData.attributes\"\n                          [formControlName]=\"field.name\"\n                          placeholder=\"Enter value\"\n                          [nbAutocomplete]=\"autoComplete\"\n                          (keyup)=\"filterInput($event, field)\"\n                          [id]=\"i\"\n                          [disabled]=\"!allFilterContains[field.name]\"\n                        />\n                        <nb-autocomplete\n                          #autoComplete\n                          (selectedChange)=\"onSelectionChange($event, field)\"\n                        >\n                          <nb-option\n                            *ngFor=\"\n                              let option of allFilterContains[field.name]\n                                | async\n                            \"\n                            [value]=\"\n                              option[\n                                field?.metaData?.addConfig.morphConfig?.value\n                                  ? field?.metaData?.addConfig.morphConfig\n                                      ?.value\n                                  : 'id'\n                              ]\n                            \"\n                            [attributes]=\"field.metaData.attributes\"\n                          >\n                            {{\n                              option[\n                                field.metaData.addConfig.morphConfig.template\n                                  ? field.metaData.addConfig.morphConfig\n                                      .template\n                                  : field.metaData.addConfig.morphConfig\n                                      .filterKeys[0]\n                              ]\n                            }}\n                          </nb-option>\n                        </nb-autocomplete>\n                      </div>\n                    </div>\n                  </div>\n\n                  <!-- Input type GOOGLEMAP -->\n                  <div\n                    class=\"input-space\"\n                    *ngIf=\"field.type == REST_FIELD_TYPES.MAP\"\n                  >\n                    <label class=\"label\">{{ field.label | titlecase }}</label>\n                    <ngx-gmaps\n                      (latChange)=\"onLatChange($event, field.name)\"\n                      (lngChange)=\"onLngChange($event, field.name)\"\n                      [googleMapKey]=\"googleMapKeys\"\n                    ></ngx-gmaps>\n                  </div>\n                </ng-container>\n\n                <div class=\"\">\n                  <ng-container *ngIf=\"field.note != ''\">\n                    <span class=\"text-muted ml-20 mt-3\">{{ field.note }}</span>\n                  </ng-container>\n                </div>\n              </div>\n            </form>\n          </nb-tab>\n          <nb-tab tabTitle=\"Importation\">\n            <div class=\"row\">\n              <div class=\"col-9\"></div>\n              <div class=\"col-3\">\n                <button\n                  nbButton\n                  status=\"primary\"\n                  [nbContextMenu]=\"items\"\n                  nbContextMenuTag=\"my-context-add\"\n                >\n                  {{ \"rest-add.import\" | translate }}\n                </button>\n              </div>\n            </div>\n\n            <div>\n              <ng2-smart-table [settings]=\"settings\" [source]=\"source\">\n              </ng2-smart-table>\n            </div>\n          </nb-tab>\n        </nb-tabset>\n      </nb-card-body>\n\n      <nb-card-footer>\n        <div class=\"buttons-row\" *ngIf=\"!formState.isAdd\">\n          <button\n            nbButton\n            (click)=\"onEdit()\"\n            status=\"primary\"\n            [disabled]=\"loading\"\n            *ngxPermissionsOnly=\"PERMISSION.UPDATE\"\n          >\n            >\n            <span\n              *ngIf=\"loading\"\n              class=\"spinner-border spinner-border-sm mr-2\"\n            ></span>\n            {{ formState.btnLabel }}\n          </button>\n        </div>\n        <div class=\"buttons-row\" *ngIf=\"formState.isAdd\">\n          <button\n            nbButton\n            (click)=\"onCreate()\"\n            status=\"primary\"\n            [disabled]=\"loading\"\n            *ngxPermissionsOnly=\"PERMISSION.CREATE\"\n          >\n            >\n            <span\n              *ngIf=\"loading\"\n              class=\"spinner-border spinner-border-sm mr-2\"\n            ></span>\n            {{ formState.btnLabel }}\n          </button>\n        </div>\n      </nb-card-footer>\n    </nb-card>\n  </div>\n</ng-container>\n", styles: ["nb-card-body{overflow:visible;padding-top:0}.input-space{margin-top:1rem}.color-row{justify-content:space-between;height:45px}.color-card{width:80px;height:30px;border-radius:2px;border-width:2px;border-color:#909293;margin-left:5px;justify-content:center;align-items:center}@use \"@nebular/theme/styles/themes/default\";.nb-theme-default :host .buttons-row{margin:-.5rem}.nb-theme-default :host button[nbButton]{margin:.5rem}[dir=ltr] .nb-theme-default :host .action-icon{margin-right:.5rem}[dir=rtl] .nb-theme-default :host .action-icon{margin-left:.5rem}.nb-theme-default :host .actions-card{height:8rem}.nb-theme-dark :host .buttons-row{margin:-.5rem}.nb-theme-dark :host button[nbButton]{margin:.5rem}[dir=ltr] .nb-theme-dark :host .action-icon{margin-right:.5rem}[dir=rtl] .nb-theme-dark :host .action-icon{margin-left:.5rem}.nb-theme-dark :host .actions-card{height:8rem}.nb-theme-cosmic :host .buttons-row{margin:-.5rem}.nb-theme-cosmic :host button[nbButton]{margin:.5rem}[dir=ltr] .nb-theme-cosmic :host .action-icon{margin-right:.5rem}[dir=rtl] .nb-theme-cosmic :host .action-icon{margin-left:.5rem}.nb-theme-cosmic :host .actions-card{height:8rem}.nb-theme-corporate :host .buttons-row{margin:-.5rem}.nb-theme-corporate :host button[nbButton]{margin:.5rem}[dir=ltr] .nb-theme-corporate :host .action-icon{margin-right:.5rem}[dir=rtl] .nb-theme-corporate :host .action-icon{margin-left:.5rem}.nb-theme-corporate :host .actions-card{height:8rem}.icon{height:35px;width:35px;line-height:30px;text-align:center;border:1px solid #eaeaea;border-radius:4px;float:left;margin-right:20px}.upload-text{overflow:hidden;width:auto;font-size:14px}svg{fill:#909293;height:20px}.overlay{position:relative}.delete-button{background-color:#fafafa;position:absolute;top:-6px;right:-6px;cursor:pointer;z-index:10;width:40px;height:40px;text-align:center;font-size:20px;line-height:40px}.file-image img{width:100%}nb-toggle{text-align:center}\n"], components: [{ type: i5.NbCardComponent, selector: "nb-card", inputs: ["status", "accent", "size"] }, { type: i5.NbCardHeaderComponent, selector: "nb-card-header" }, { type: i5.NbCardBodyComponent, selector: "nb-card-body" }, { type: i5.NbTabsetComponent, selector: "nb-tabset", inputs: ["fullWidth", "routeParam"], outputs: ["changeTab"] }, { type: i5.NbTabComponent, selector: "nb-tab", inputs: ["badgeStatus", "badgeDot", "disabled", "responsive", "active", "lazyLoad", "tabTitle", "tabId", "tabIcon", "route", "badgeText", "badgePosition"] }, { type: i5.NbDatepickerComponent, selector: "nb-datepicker", inputs: ["date"], outputs: ["dateChange"] }, { type: i5.NbDateTimePickerComponent, selector: "nb-date-timepicker", inputs: ["twelveHoursFormat", "withSeconds", "singleColumn", "step", "title", "applyButtonText", "currentTimeButtonText"] }, { type: i5.NbTimePickerComponent, selector: "nb-timepicker", inputs: ["showFooter", "timeFormat", "twelveHoursFormat", "withSeconds", "singleColumn", "step", "date", "hoursText", "minutesText", "secondsText", "ampmText", "applyButtonText", "currentTimeButtonText"], outputs: ["onSelectTime"], exportAs: ["nbTimepicker"] }, { type: i5.NbSelectComponent, selector: "nb-select", inputs: ["size", "status", "shape", "appearance", "placeholder", "optionsOverlayOffset", "scrollStrategy", "outline", "filled", "hero", "disabled", "fullWidth", "compareWith", "selected", "multiple", "optionsListClass", "optionsPanelClass"], outputs: ["selectedChange"] }, { type: i5.NbOptionComponent, selector: "nb-option", inputs: ["disabled", "value"], outputs: ["selectionChange"] }, { type: i5.NbToggleComponent, selector: "nb-toggle", inputs: ["status", "labelPosition", "checked", "disabled"], outputs: ["checkedChange"] }, { type: i10.NgxDropzoneComponent, selector: "ngx-dropzone, [ngx-dropzone]", inputs: ["accept", "disabled", "multiple", "maxFileSize", "expandable", "disableClick", "processDirectoryDrop", "id", "aria-label", "aria-labelledby", "aria-describedby"], outputs: ["change"] }, { type: i5.NbIconComponent, selector: "nb-icon", inputs: ["config", "icon", "pack", "status", "options"] }, { type: i10.NgxDropzonePreviewComponent, selector: "ngx-dropzone-preview", inputs: ["file", "removable"], outputs: ["removed"] }, { type: i10.NgxDropzoneImagePreviewComponent, selector: "ngx-dropzone-image-preview", inputs: ["file"] }, { type: i5.NbButtonComponent, selector: "button[nbButton],a[nbButton],input[type=\"button\"][nbButton],input[type=\"submit\"][nbButton]", inputs: ["hero"] }, { type: i11.ImageCropperComponent, selector: "image-cropper", inputs: ["imageChangedEvent", "imageURL", "imageBase64", "imageFile", "format", "transform", "maintainAspectRatio", "aspectRatio", "resetCropOnAspectRatioChange", "resizeToWidth", "resizeToHeight", "cropperMinWidth", "cropperMinHeight", "cropperMaxHeight", "cropperMaxWidth", "cropperStaticWidth", "cropperStaticHeight", "canvasRotation", "initialStepSize", "roundCropper", "onlyScaleDown", "imageQuality", "autoCrop", "backgroundColor", "containWithinAspectRatio", "hideResizeSquares", "allowMoveImage", "cropper", "alignImage", "disabled", "hidden"], outputs: ["imageCropped", "startCropImage", "imageLoaded", "cropperReady", "loadImageFailed", "transformChange"] }, { type: i5.NbTagListComponent, selector: "nb-tag-list", inputs: ["size", "tabIndex", "role", "multiple"], outputs: ["tagRemove"], exportAs: ["nbTagList"] }, { type: i5.NbTagComponent, selector: "nb-tag", inputs: ["appearance", "status", "size", "role", "selected", "removable", "text"], outputs: ["remove", "selectedChange"], exportAs: ["nbTag"] }, { type: i5.NbAutocompleteComponent, selector: "nb-autocomplete", inputs: ["size", "activeFirst", "handleDisplayFn", "optionsListClass", "optionsPanelClass"], outputs: ["selectedChange"] }, { type: i12.GmapsComponent, selector: "ngx-gmaps", inputs: ["lat", "lng", "googleMapKey"], outputs: ["latChange", "lngChange"] }, { type: i13.Ng2SmartTableComponent, selector: "ng2-smart-table", inputs: ["settings", "source"], outputs: ["rowSelect", "rowDeselect", "userRowSelect", "delete", "edit", "create", "custom", "deleteConfirm", "editConfirm", "createConfirm", "rowHover"] }, { type: i5.NbCardFooterComponent, selector: "nb-card-footer" }], directives: [{ type: i14.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i1.ɵNgNoValidate, selector: "form:not([ngNoForm]):not([ngNativeValidate])" }, { type: i1.NgControlStatusGroup, selector: "[formGroupName],[formArrayName],[ngModelGroup],[formGroup],form:not([ngNoForm]),[ngForm]" }, { type: i1.FormGroupDirective, selector: "[formGroup]", inputs: ["formGroup"], outputs: ["ngSubmit"], exportAs: ["ngForm"] }, { type: i14.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i5.NbInputDirective, selector: "input[nbInput],textarea[nbInput]", inputs: ["fieldSize", "status", "shape", "fullWidth"] }, { type: i1.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { type: i15.AttributeDirective, selector: "[attributes]", inputs: ["attributes"] }, { type: i1.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { type: i1.FormControlName, selector: "[formControlName]", inputs: ["disabled", "formControlName", "ngModel"], outputs: ["ngModelChange"] }, { type: i1.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { type: i5.NbDatepickerDirective, selector: "input[nbDatepicker]", inputs: ["nbDatepicker"] }, { type: i5.NbTimePickerDirective, selector: "input[nbTimepicker]", inputs: ["overlayOffset", "nbTimepicker"] }, { type: i10.NgxDropzoneLabelDirective, selector: "ngx-dropzone-label" }, { type: i5.NbTagInputDirective, selector: "input[nbTagInput]", inputs: ["separatorKeys"], outputs: ["tagAdd"], exportAs: ["nbTagInput"] }, { type: i5.NbAutocompleteDirective, selector: "input[nbAutocomplete]", inputs: ["overlayOffset", "scrollStrategy", "nbAutocomplete", "focusInputOnValueChange", "customOverlayHost"] }, { type: i1.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { type: i5.NbContextMenuDirective, selector: "[nbContextMenu]", inputs: ["nbContextMenuAdjustment", "nbContextMenuTrigger", "nbContextMenuPlacement", "nbContextMenuTag", "nbContextMenu", "nbContextMenuClass"] }, { type: i8.NgxPermissionsDirective, selector: "[ngxPermissionsOnly],[ngxPermissionsExcept]", inputs: ["ngxPermissionsOnly", "ngxPermissionsOnlyThen", "ngxPermissionsOnlyElse", "ngxPermissionsExcept", "ngxPermissionsExceptElse", "ngxPermissionsExceptThen", "ngxPermissionsThen", "ngxPermissionsElse", "ngxPermissionsOnlyAuthorisedStrategy", "ngxPermissionsOnlyUnauthorisedStrategy", "ngxPermissionsExceptUnauthorisedStrategy", "ngxPermissionsExceptAuthorisedStrategy", "ngxPermissionsUnauthorisedStrategy", "ngxPermissionsAuthorisedStrategy"], outputs: ["permissionsAuthorized", "permissionsUnauthorized"] }], pipes: { "titlecase": i14.TitleCasePipe, "async": i14.AsyncPipe, "translate": i16.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0, type: RestResourceAddComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-rest-resource-add',
                    templateUrl: './rest-resource-add.component.html',
                    styleUrls: ['./rest-resource-add.component.scss'],
                }]
        }], ctorParameters: function () { return [{ type: i1.FormBuilder }, { type: i2.RestResourceService }, { type: i3.RestAdminConfigService }, { type: i4.ActivatedRoute }, { type: i5.NbMenuService }, { type: i6.RestExportService }, { type: i5.NbDialogService }, { type: i4.Router }, { type: i7.NotificationService }, { type: i0.ChangeDetectorRef }, { type: i8.NgxPermissionsService }, { type: i9.RestErrorService }]; }, propDecorators: { resource: [{
                type: Input
            }], belongTo: [{
                type: ViewChild,
                args: ['belongTo']
            }], inputBelongToMany: [{
                type: ViewChild,
                args: ['autoBelongToMany']
            }] } });
//# sourceMappingURL=data:application/json;base64,