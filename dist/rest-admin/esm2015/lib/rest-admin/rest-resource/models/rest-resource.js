import { REST_FIELD_TYPES, TYPE_GROUP, TYPE_METHOD_REQUEST, } from './rest-resource.model';
export class RestResource {
    constructor(mainConfig, fields, listConfig, addConfig, editConfig, detailConfig) {
        this._hasFile = false;
        this._name = mainConfig.name;
        this._icon = mainConfig.icon;
        this._description = mainConfig.description;
        this._api = mainConfig.api;
        this._authRequired = mainConfig.authRequired;
        this._showInMenu = mainConfig.showInMenu;
        this._fields = fields;
        this._listConfig = listConfig;
        this._addConfig = addConfig;
        this._editConfig = editConfig;
        this._detailConfig = detailConfig;
    }
    // Getters
    get name() {
        return this._name;
    }
    get api() {
        return this._api == null ? this.name.toLowerCase() + 's' : this._api;
    }
    get authRequired() {
        return this._authRequired == null ? false : this._authRequired;
    }
    get showInMenu() {
        return this._showInMenu == null ? true : this._showInMenu;
    }
    get icon() {
        if (this._icon == null)
            return 'browser-outline';
        else if (typeof this._icon == 'string')
            return this._icon;
        else
            return { icon: this._icon.icon, pack: this._icon.pack };
    }
    get fields() {
        return this._fields.map((field) => {
            var _a;
            return ({
                name: field.name,
                type: field.type ? field.type : REST_FIELD_TYPES.STRING,
                label: field.label ? field.label : field.name,
                inForm: field.inForm !== undefined ? field.inForm : true,
                metaData: ((_a = field.metaData) === null || _a === void 0 ? void 0 : _a.attributes) !== undefined ? field.metaData : Object.assign(Object.assign({}, field === null || field === void 0 ? void 0 : field.metaData), { attributes: {} }),
                i18n: field.i18n !== undefined ? field.i18n : false,
            });
        });
    }
    get hasFile() {
        return (this.fields.findIndex((field) => [
            REST_FIELD_TYPES.IMAGE,
            REST_FIELD_TYPES.PDF,
            REST_FIELD_TYPES.FILE,
        ].includes(field.type)) >= 0);
    }
    get permissions() {
        return this._permissions == null ? [] : this._permissions;
    }
    // Defini afin de tester les valeurs des metadatas
    // get metaData(): REST_FIELD_METADATA {
    //   const metaData: REST_FIELD_METADATA = {};
    //   this._fields.forEach((field) => {
    //     switch (metaData.addConfig) {
    //       case metaData.addConfig?.belongToOptions:
    //         metaData.addConfig.belongToOptions = {
    //           ...metaData.addConfig?.belongToOptions,
    //           value: field?.metaData?.addConfig.belongToOptions?.value
    //             ? field?.metaData?.addConfig?.belongToOptions?.value
    //             : "id",
    //           template: field.metaData.addConfig.belongToOptions.template
    //             ? field.metaData.addConfig.belongToOptions.template
    //             : field.metaData.addConfig.belongToOptions.filterKeys[0],
    //           filterKeys: field.metaData.addConfig.belongToOptions.filterKeys
    //             ? field.metaData.addConfig.belongToOptions.filterKeys
    //             : ["name"],
    //         };
    //         break;
    //       default:
    //         break;
    //     }
    //   });
    //   return metaData;
    // }
    get listConfig() {
        const rest = {};
        if (this._listConfig.columns)
            rest.columns = this._listConfig.columns;
        else {
            rest.columns = this.fields.reduce((cumul, item) => {
                cumul.push(item.name);
                return cumul;
            }, []);
        }
        rest.api = this._listConfig.api ? this._listConfig.api : this.api;
        rest.group = this._listConfig.group ? this._listConfig.group : null;
        rest.hideAddSubHeader = this._listConfig.hideAddSubHeader
            ? this._listConfig.hideAddSubHeader
            : false;
        rest.queryParams = this._listConfig.queryParams
            ? this._listConfig.queryParams
            : this.queryParams;
        rest.description = this._listConfig.description
            ? this._listConfig.description
            : 'list of ' + this.name;
        rest.perPage = this._listConfig.perPage ? this._listConfig.perPage : 25;
        rest.title = this._listConfig.title
            ? this._listConfig.title
            : 'List of ' + this.name;
        rest.searchFilter = this._listConfig.searchFilter
            ? this._listConfig.searchFilter
            : null;
        if (rest.group) {
            rest.group = this._listConfig.group;
            rest.group.priority = rest.group.priority ? rest.group.priority : 0;
            rest.group.icon = rest.group.icon ? rest.group.icon : 'folder-outline';
        }
        else
            rest.group = {
                priority: 0,
                name: 'default',
                type: TYPE_GROUP.DEFAULT,
            };
        return rest;
    }
    get addConfig() {
        const rest = {};
        rest.api = this._addConfig.api ? this._addConfig.api : this.api;
        rest.title = this._addConfig.title
            ? this._addConfig.title
            : 'Add ' + this.name;
        rest.method = this._addConfig.method
            ? this._addConfig.method
            : TYPE_METHOD_REQUEST.POST;
        rest.body = this._addConfig.body ? this._addConfig.body : {};
        rest.header = this._addConfig.header ? this._addConfig.header : {};
        return rest;
    }
    get editConfig() {
        const rest = {};
        rest.api = this._editConfig.api ? this._editConfig.api : this.api;
        rest.isLaravel = this._editConfig.isLaravel
            ? this._editConfig.isLaravel
            : false;
        this._hasFile = this.hasFile;
        rest.method = this._editConfig.method
            ? this._editConfig.method
            : TYPE_METHOD_REQUEST.POST;
        rest.body = this._editConfig.body ? this._editConfig.body : {};
        rest.header = this._editConfig.header ? this._editConfig.header : {};
        rest.title = this._editConfig.title
            ? this._editConfig.title
            : 'Edit ' + this.name;
        rest.queryParams = this._editConfig.queryParams
            ? this._editConfig.queryParams
            : this.queryParams;
        return rest;
    }
    get detailConfig() {
        const rest = {};
        rest.api = this._detailConfig.api ? this._detailConfig.api : this.api;
        rest.title = this._detailConfig.title ? this._detailConfig.title : '';
        rest.tabsConfig = this._detailConfig.tabsConfig
            ? this._detailConfig.tabsConfig
            : null;
        rest.queryParams = this._detailConfig.queryParams
            ? this._detailConfig.queryParams
            : this.queryParams;
        rest.preparedStatementQuery = this._detailConfig.preparedStatementQuery
            ? this._detailConfig.preparedStatementQuery
            : null;
        return rest;
    }
    get description() {
        return this._description == null
            ? 'manage ' + this.name
            : this._description;
    }
    get queryParams() {
        return this._queryParams == null ? {} : this._queryParams;
    }
    // Setters
    set name(v) {
        this._name = v;
    }
    set fields(v) {
        this._fields = v;
    }
    set listConfig(v) {
        this._listConfig = v;
    }
    set editConfig(v) {
        this._editConfig = v;
    }
    set detailConfig(v) {
        this._detailConfig = v;
    }
    set api(v) {
        this._api = v;
    }
    set icon(v) {
        this._icon = v;
    }
    set description(v) {
        this._description = v;
    }
    set queryParams(v) {
        this._queryParams = v;
    }
    set authRequired(v) {
        this._authRequired = v;
    }
    set showInMenu(v) {
        this._showInMenu = v;
    }
    set permissions(v) {
        this._permissions = v;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdC1yZXNvdXJjZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL3Jlc3QtYWRtaW4vc3JjL2xpYi9yZXN0LWFkbWluL3Jlc3QtcmVzb3VyY2UvbW9kZWxzL3Jlc3QtcmVzb3VyY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUdMLGdCQUFnQixFQU9oQixVQUFVLEVBQ1YsbUJBQW1CLEdBQ3BCLE1BQU0sdUJBQXVCLENBQUM7QUFFL0IsTUFBTSxPQUFPLFlBQVk7SUFrQnZCLFlBQ0UsVUFBc0IsRUFDdEIsTUFBbUIsRUFDbkIsVUFBc0IsRUFDdEIsU0FBb0IsRUFDcEIsVUFBc0IsRUFDdEIsWUFBMEI7UUFsQnBCLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFvQnZCLElBQUksQ0FBQyxLQUFLLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQztRQUM3QixJQUFJLENBQUMsS0FBSyxHQUFHLFVBQVUsQ0FBQyxJQUFJLENBQUM7UUFDN0IsSUFBSSxDQUFDLFlBQVksR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDO1FBQzNDLElBQUksQ0FBQyxJQUFJLEdBQUcsVUFBVSxDQUFDLEdBQUcsQ0FBQztRQUMzQixJQUFJLENBQUMsYUFBYSxHQUFHLFVBQVUsQ0FBQyxZQUFZLENBQUM7UUFDN0MsSUFBSSxDQUFDLFdBQVcsR0FBRyxVQUFVLENBQUMsVUFBVSxDQUFDO1FBRXpDLElBQUksQ0FBQyxPQUFPLEdBQUcsTUFBTSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDO1FBQzlCLElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1FBQzVCLElBQUksQ0FBQyxXQUFXLEdBQUcsVUFBVSxDQUFDO1FBQzlCLElBQUksQ0FBQyxhQUFhLEdBQUcsWUFBWSxDQUFDO0lBQ3BDLENBQUM7SUFFRCxVQUFVO0lBRVYsSUFBSSxJQUFJO1FBQ04sT0FBTyxJQUFJLENBQUMsS0FB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QUN6QixDQUFDO0lBRUQsSUFBSSxVQUFVLENBQUMsQ0FBVTtRQUN2QixJQUFJLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQztJQUN2QixDQUFDO0lBRUQsSUFBSSxXQUFXLENBQUMsQ0FBVztRQUN6QixJQUFJLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQztJQUN4QixDQUFDO0NBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1xuICBSZXN0RmllbGQsXG4gIExpc3RDb25maWcsXG4gIFJFU1RfRklFTERfVFlQRVMsXG4gIEFkZENvbmZpZyxcbiAgUkVTVF9GSUVMRF9NRVRBREFUQSxcbiAgTWFpbkNvbmZpZyxcbiAgRWRpdENvbmZpZyxcbiAgQ3VzdG9tSWNvbixcbiAgRGV0YWlsQ29uZmlnLFxuICBUWVBFX0dST1VQLFxuICBUWVBFX01FVEhPRF9SRVFVRVNULFxufSBmcm9tICcuL3Jlc3QtcmVzb3VyY2UubW9kZWwnO1xuXG5leHBvcnQgY2xhc3MgUmVzdFJlc291cmNlIHtcbiAgcHJpdmF0ZSBfYXBpOiBzdHJpbmc7XG4gIHByaXZhdGUgX2Rlc2NyaXB0aW9uOiBzdHJpbmc7XG4gIHByaXZhdGUgX2ljb246IHN0cmluZyB8IEN1c3RvbUljb247XG4gIHByaXZhdGUgX25hbWU6IHN0cmluZztcbiAgcHJpdmF0ZSBfYXV0aFJlcXVpcmVkOiBib29sZWFuO1xuICBwcml2YXRlIF9oYXNGaWxlID0gZmFsc2U7XG4gIHByaXZhdGUgX3Nob3dJbk1lbnU6IGJvb2xlYW47XG4gIHByaXZhdGUgX3Blcm1pc3Npb25zOiBzdHJpbmdbXTtcblxuICBwcml2YXRlIF9maWVsZHM6IFJlc3RGaWVsZFtdO1xuICBwcml2YXRlIF9saXN0Q29uZmlnOiBMaXN0Q29uZmlnO1xuICBwcml2YXRlIF9hZGRDb25maWc6IEFkZENvbmZpZztcbiAgcHJpdmF0ZSBfZWRpdENvbmZpZzogRWRpdENvbmZpZztcbiAgcHJpdmF0ZSBfZGV0YWlsQ29uZmlnOiBEZXRhaWxDb25maWc7XG5cbiAgcHJpdmF0ZSBfcXVlcnlQYXJhbXM6IGFueTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBtYWluQ29uZmlnOiBNYWluQ29uZmlnLFxuICAgIGZpZWxkczogUmVzdEZpZWxkW10sXG4gICAgbGlzdENvbmZpZzogTGlzdENvbmZpZyxcbiAgICBhZGRDb25maWc6IEFkZENvbmZpZyxcbiAgICBlZGl0Q29uZmlnOiBFZGl0Q29uZmlnLFxuICAgIGRldGFpbENvbmZpZzogRGV0YWlsQ29uZmlnXG4gICkge1xuICAgIHRoaXMuX25hbWUgPSBtYWluQ29uZmlnLm5hbWU7XG4gICAgdGhpcy5faWNvbiA9IG1haW5Db25maWcuaWNvbjtcbiAgICB0aGlzLl9kZXNjcmlwdGlvbiA9IG1haW5Db25maWcuZGVzY3JpcHRpb247XG4gICAgdGhpcy5fYXBpID0gbWFpbkNvbmZpZy5hcGk7XG4gICAgdGhpcy5fYXV0aFJlcXVpcmVkID0gbWFpbkNvbmZpZy5hdXRoUmVxdWlyZWQ7XG4gICAgdGhpcy5fc2hvd0luTWVudSA9IG1haW5Db25maWcuc2hvd0luTWVudTtcblxuICAgIHRoaXMuX2ZpZWxkcyA9IGZpZWxkcztcbiAgICB0aGlzLl9saXN0Q29uZmlnID0gbGlzdENvbmZpZztcbiAgICB0aGlzLl9hZGRDb25maWcgPSBhZGRDb25maWc7XG4gICAgdGhpcy5fZWRpdENvbmZpZyA9IGVkaXRDb25maWc7XG4gICAgdGhpcy5fZGV0YWlsQ29uZmlnID0gZGV0YWlsQ29uZmlnO1xuICB9XG5cbiAgLy8gR2V0dGVyc1xuXG4gIGdldCBuYW1lKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gIH1cblxuICBnZXQgYXBpKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX2FwaSA9PSBudWxsID8gdGhpcy5uYW1lLnRvTG93ZXJDYXNlKCkgKyAncycgOiB0aGlzLl9hcGk7XG4gIH1cblxuICBnZXQgYXV0aFJlcXVpcmVkKCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9hdXRoUmVxdWlyZWQgPT0gbnVsbCA/IGZhbHNlIDogdGhpcy5fYXV0aFJlcXVpcmVkO1xuICB9XG5cbiAgZ2V0IHNob3dJbk1lbnUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuX3Nob3dJbk1lbnUgPT0gbnVsbCA/IHRydWUgOiB0aGlzLl9zaG93SW5NZW51O1xuICB9XG5cbiAgZ2V0IGljb24oKTogc3RyaW5nIHwgQ3VzdG9tSWNvbiB7XG4gICAgaWYgKHRoaXMuX2ljb24gPT0gbnVsbCkgcmV0dXJuICdicm93c2VyLW91dGxpbmUnO1xuICAgIGVsc2UgaWYgKHR5cGVvZiB0aGlzLl9pY29uID09ICdzdHJpbmcnKSByZXR1cm4gdGhpcy5faWNvbjtcbiAgICBlbHNlIHJldHVybiB7IGljb246IHRoaXMuX2ljb24uaWNvbiwgcGFjazogdGhpcy5faWNvbi5wYWNrIH07XG4gIH1cblxuICBnZXQgZmllbGRzKCk6IFJlc3RGaWVsZFtdIHtcbiAgICByZXR1cm4gdGhpcy5fZmllbGRzLm1hcCgoZmllbGQpID0+ICh7XG4gICAgICBuYW1lOiBmaWVsZC5uYW1lLFxuICAgICAgdHlwZTogZmllbGQudHlwZSA/IGZpZWxkLnR5cGUgOiBSRVNUX0ZJRUxEX1RZUEVTLlNUUklORyxcbiAgICAgIGxhYmVsOiBmaWVsZC5sYWJlbCA/IGZpZWxkLmxhYmVsIDogZmllbGQubmFtZSxcbiAgICAgIGluRm9ybTogZmllbGQuaW5Gb3JtICE9PSB1bmRlZmluZWQgPyBmaWVsZC5pbkZvcm0gOiB0cnVlLFxuICAgICAgbWV0YURhdGE6IGZpZWxkLm1ldGFEYXRhPy5hdHRyaWJ1dGVzICE9PSB1bmRlZmluZWQgPyBmaWVsZC5tZXRhRGF0YSA6IHsuLi5maWVsZD8ubWV0YURhdGEsICBhdHRyaWJ1dGVzOiB7fX0sXG4gICAgICBpMThuOiBmaWVsZC5pMThuICE9PSB1bmRlZmluZWQgPyBmaWVsZC5pMThuIDogZmFsc2UsXG4gICAgfSkpO1xuICB9XG5cbiAgZ2V0IGhhc0ZpbGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIChcbiAgICAgIHRoaXMuZmllbGRzLmZpbmRJbmRleCgoZmllbGQpID0+XG4gICAgICAgIFtcbiAgICAgICAgICBSRVNUX0ZJRUxEX1RZUEVTLklNQUdFLFxuICAgICAgICAgIFJFU1RfRklFTERfVFlQRVMuUERGLFxuICAgICAgICAgIFJFU1RfRklFTERfVFlQRVMuRklMRSxcbiAgICAgICAgXS5pbmNsdWRlcyhmaWVsZC50eXBlKVxuICAgICAgKSA+PSAwXG4gICAgKTtcbiAgfVxuXG4gIGdldCBwZXJtaXNzaW9ucygpOiBzdHJpbmdbXSB7XG4gICAgcmV0dXJuIHRoaXMuX3Blcm1pc3Npb25zID09IG51bGwgPyBbXSA6IHRoaXMuX3Blcm1pc3Npb25zO1xuICB9XG5cbiAgLy8gRGVmaW5pIGFmaW4gZGUgdGVzdGVyIGxlcyB2YWxldXJzIGRlcyBtZXRhZGF0YXNcbiAgLy8gZ2V0IG1ldGFEYXRhKCk6IFJFU1RfRklFTERfTUVUQURBVEEge1xuICAvLyAgIGNvbnN0IG1ldGFEYXRhOiBSRVNUX0ZJRUxEX01FVEFEQVRBID0ge307XG5cbiAgLy8gICB0aGlzLl9maWVsZHMuZm9yRWFjaCgoZmllbGQpID0+IHtcbiAgLy8gICAgIHN3aXRjaCAobWV0YURhdGEuYWRkQ29uZmlnKSB7XG4gIC8vICAgICAgIGNhc2UgbWV0YURhdGEuYWRkQ29uZmlnPy5iZWxvbmdUb09wdGlvbnM6XG4gIC8vICAgICAgICAgbWV0YURhdGEuYWRkQ29uZmlnLmJlbG9uZ1RvT3B0aW9ucyA9IHtcbiAgLy8gICAgICAgICAgIC4uLm1ldGFEYXRhLmFkZENvbmZpZz8uYmVsb25nVG9PcHRpb25zLFxuICAvLyAgICAgICAgICAgdmFsdWU6IGZpZWxkPy5tZXRhRGF0YT8uYWRkQ29uZmlnLmJlbG9uZ1RvT3B0aW9ucz8udmFsdWVcbiAgLy8gICAgICAgICAgICAgPyBmaWVsZD8ubWV0YURhdGE/LmFkZENvbmZpZz8uYmVsb25nVG9PcHRpb25zPy52YWx1ZVxuICAvLyAgICAgICAgICAgICA6IFwiaWRcIixcbiAgLy8gICAgICAgICAgIHRlbXBsYXRlOiBmaWVsZC5tZXRhRGF0YS5hZGRDb25maWcuYmVsb25nVG9PcHRpb25zLnRlbXBsYXRlXG4gIC8vICAgICAgICAgICAgID8gZmllbGQubWV0YURhdGEuYWRkQ29uZmlnLmJlbG9uZ1RvT3B0aW9ucy50ZW1wbGF0ZVxuICAvLyAgICAgICAgICAgICA6IGZpZWxkLm1ldGFEYXRhLmFkZENvbmZpZy5iZWxvbmdUb09wdGlvbnMuZmlsdGVyS2V5c1swXSxcbiAgLy8gICAgICAgICAgIGZpbHRlcktleXM6IGZpZWxkLm1ldGFEYXRhLmFkZENvbmZpZy5iZWxvbmdUb09wdGlvbnMuZmlsdGVyS2V5c1xuICAvLyAgICAgICAgICAgICA/IGZpZWxkLm1ldGFEYXRhLmFkZENvbmZpZy5iZWxvbmdUb09wdGlvbnMuZmlsdGVyS2V5c1xuICAvLyAgICAgICAgICAgICA6IFtcIm5hbWVcIl0sXG4gIC8vICAgICAgICAgfTtcbiAgLy8gICAgICAgICBicmVhaztcblxuICAvLyAgICAgICBkZWZhdWx0OlxuICAvLyAgICAgICAgIGJyZWFrO1xuICAvLyAgICAgfVxuICAvLyAgIH0pO1xuXG4gIC8vICAgcmV0dXJuIG1ldGFEYXRhO1xuICAvLyB9XG5cbiAgZ2V0IGxpc3RDb25maWcoKTogTGlzdENvbmZpZyB7XG4gICAgY29uc3QgcmVzdDogTGlzdENvbmZpZyA9IHt9O1xuXG4gICAgaWYgKHRoaXMuX2xpc3RDb25maWcuY29sdW1ucykgcmVzdC5jb2x1bW5zID0gdGhpcy5fbGlzdENvbmZpZy5jb2x1bW5zO1xuICAgIGVsc2Uge1xuICAgICAgcmVzdC5jb2x1bW5zID0gdGhpcy5maWVsZHMucmVkdWNlPHN0cmluZ1tdPigoY3VtdWwsIGl0ZW0pID0+IHtcbiAgICAgICAgY3VtdWwucHVzaChpdGVtLm5hbWUpO1xuICAgICAgICByZXR1cm4gY3VtdWw7XG4gICAgICB9LCBbXSk7XG4gICAgfVxuICAgIHJlc3QuYXBpID0gdGhpcy5fbGlzdENvbmZpZy5hcGkgPyB0aGlzLl9saXN0Q29uZmlnLmFwaSA6IHRoaXMuYXBpO1xuICAgIHJlc3QuZ3JvdXAgPSB0aGlzLl9saXN0Q29uZmlnLmdyb3VwID8gdGhpcy5fbGlzdENvbmZpZy5ncm91cCA6IG51bGw7XG5cbiAgICByZXN0LmhpZGVBZGRTdWJIZWFkZXIgPSB0aGlzLl9saXN0Q29uZmlnLmhpZGVBZGRTdWJIZWFkZXJcbiAgICAgID8gdGhpcy5fbGlzdENvbmZpZy5oaWRlQWRkU3ViSGVhZGVyXG4gICAgICA6IGZhbHNlO1xuICAgIHJlc3QucXVlcnlQYXJhbXMgPSB0aGlzLl9saXN0Q29uZmlnLnF1ZXJ5UGFyYW1zXG4gICAgICA/IHRoaXMuX2xpc3RDb25maWcucXVlcnlQYXJhbXNcbiAgICAgIDogdGhpcy5xdWVyeVBhcmFtcztcbiAgICByZXN0LmRlc2NyaXB0aW9uID0gdGhpcy5fbGlzdENvbmZpZy5kZXNjcmlwdGlvblxuICAgICAgPyB0aGlzLl9saXN0Q29uZmlnLmRlc2NyaXB0aW9uXG4gICAgICA6ICdsaXN0IG9mICcgKyB0aGlzLm5hbWU7XG4gICAgcmVzdC5wZXJQYWdlID0gdGhpcy5fbGlzdENvbmZpZy5wZXJQYWdlID8gdGhpcy5fbGlzdENvbmZpZy5wZXJQYWdlIDogMjU7XG4gICAgcmVzdC50aXRsZSA9IHRoaXMuX2xpc3RDb25maWcudGl0bGVcbiAgICAgID8gdGhpcy5fbGlzdENvbmZpZy50aXRsZVxuICAgICAgOiAnTGlzdCBvZiAnICsgdGhpcy5uYW1lO1xuICAgIHJlc3Quc2VhcmNoRmlsdGVyID0gdGhpcy5fbGlzdENvbmZpZy5zZWFyY2hGaWx0ZXJcbiAgICAgID8gdGhpcy5fbGlzdENvbmZpZy5zZWFyY2hGaWx0ZXJcbiAgICAgIDogbnVsbDtcbiAgICBpZiAocmVzdC5ncm91cCkge1xuICAgICAgcmVzdC5ncm91cCA9IHRoaXMuX2xpc3RDb25maWcuZ3JvdXA7XG4gICAgICByZXN0Lmdyb3VwLnByaW9yaXR5ID0gcmVzdC5ncm91cC5wcmlvcml0eSA/IHJlc3QuZ3JvdXAucHJpb3JpdHkgOiAwO1xuICAgICAgcmVzdC5ncm91cC5pY29uID0gcmVzdC5ncm91cC5pY29uID8gcmVzdC5ncm91cC5pY29uIDogJ2ZvbGRlci1vdXRsaW5lJztcbiAgICB9IGVsc2VcbiAgICAgIHJlc3QuZ3JvdXAgPSB7XG4gICAgICAgIHByaW9yaXR5OiAwLFxuICAgICAgICBuYW1lOiAnZGVmYXVsdCcsXG4gICAgICAgIHR5cGU6IFRZUEVfR1JPVVAuREVGQVVMVCxcbiAgICAgIH07XG5cbiAgICByZXR1cm4gcmVzdDtcbiAgfVxuXG4gIGdldCBhZGRDb25maWcoKTogQWRkQ29uZmlnIHtcbiAgICBjb25zdCByZXN0OiBBZGRDb25maWcgPSB7fTtcblxuICAgIHJlc3QuYXBpID0gdGhpcy5fYWRkQ29uZmlnLmFwaSA/IHRoaXMuX2FkZENvbmZpZy5hcGkgOiB0aGlzLmFwaTtcbiAgICByZXN0LnRpdGxlID0gdGhpcy5fYWRkQ29uZmlnLnRpdGxlXG4gICAgICA/IHRoaXMuX2FkZENvbmZpZy50aXRsZVxuICAgICAgOiAnQWRkICcgKyB0aGlzLm5hbWU7XG5cbiAgICByZXN0Lm1ldGhvZCA9IHRoaXMuX2FkZENvbmZpZy5tZXRob2RcbiAgICAgID8gdGhpcy5fYWRkQ29uZmlnLm1ldGhvZFxuICAgICAgOiBUWVBFX01FVEhPRF9SRVFVRVNULlBPU1Q7XG5cbiAgICByZXN0LmJvZHkgPSB0aGlzLl9hZGRDb25maWcuYm9keSA/IHRoaXMuX2FkZENvbmZpZy5ib2R5IDoge307XG4gICAgcmVzdC5oZWFkZXIgPSB0aGlzLl9hZGRDb25maWcuaGVhZGVyID8gdGhpcy5fYWRkQ29uZmlnLmhlYWRlciA6IHt9O1xuICAgIHJldHVybiByZXN0O1xuICB9XG5cbiAgZ2V0IGVkaXRDb25maWcoKTogRWRpdENvbmZpZyB7XG4gICAgY29uc3QgcmVzdDogRWRpdENvbmZpZyA9IHt9O1xuICAgIHJlc3QuYXBpID0gdGhpcy5fZWRpdENvbmZpZy5hcGkgPyB0aGlzLl9lZGl0Q29uZmlnLmFwaSA6IHRoaXMuYXBpO1xuICAgIHJlc3QuaXNMYXJhdmVsID0gdGhpcy5fZWRpdENvbmZpZy5pc0xhcmF2ZWxcbiAgICAgID8gdGhpcy5fZWRpdENvbmZpZy5pc0xhcmF2ZWxcbiAgICAgIDogZmFsc2U7XG4gICAgdGhpcy5faGFzRmlsZSA9IHRoaXMuaGFzRmlsZTtcblxuICAgIHJlc3QubWV0aG9kID0gdGhpcy5fZWRpdENvbmZpZy5tZXRob2RcbiAgICAgID8gdGhpcy5fZWRpdENvbmZpZy5tZXRob2RcbiAgICAgIDogVFlQRV9NRVRIT0RfUkVRVUVTVC5QT1NUO1xuXG4gICAgcmVzdC5ib2R5ID0gdGhpcy5fZWRpdENvbmZpZy5ib2R5ID8gdGhpcy5fZWRpdENvbmZpZy5ib2R5IDoge307XG4gICAgcmVzdC5oZWFkZXIgPSB0aGlzLl9lZGl0Q29uZmlnLmhlYWRlciA/IHRoaXMuX2VkaXRDb25maWcuaGVhZGVyIDoge307XG5cbiAgICByZXN0LnRpdGxlID0gdGhpcy5fZWRpdENvbmZpZy50aXRsZVxuICAgICAgPyB0aGlzLl9lZGl0Q29uZmlnLnRpdGxlXG4gICAgICA6ICdFZGl0ICcgKyB0aGlzLm5hbWU7XG4gICAgcmVzdC5xdWVyeVBhcmFtcyA9IHRoaXMuX2VkaXRDb25maWcucXVlcnlQYXJhbXNcbiAgICAgID8gdGhpcy5fZWRpdENvbmZpZy5xdWVyeVBhcmFtc1xuICAgICAgOiB0aGlzLnF1ZXJ5UGFyYW1zO1xuICAgIHJldHVybiByZXN0O1xuICB9XG5cbiAgZ2V0IGRldGFpbENvbmZpZygpOiBEZXRhaWxDb25maWcge1xuICAgIGNvbnN0IHJlc3Q6IERldGFpbENvbmZpZyA9IHt9O1xuICAgIHJlc3QuYXBpID0gdGhpcy5fZGV0YWlsQ29uZmlnLmFwaSA/IHRoaXMuX2RldGFpbENvbmZpZy5hcGkgOiB0aGlzLmFwaTtcbiAgICByZXN0LnRpdGxlID0gdGhpcy5fZGV0YWlsQ29uZmlnLnRpdGxlID8gdGhpcy5fZGV0YWlsQ29uZmlnLnRpdGxlIDogJyc7XG4gICAgcmVzdC50YWJzQ29uZmlnID0gdGhpcy5fZGV0YWlsQ29uZmlnLnRhYnNDb25maWdcbiAgICAgID8gdGhpcy5fZGV0YWlsQ29uZmlnLnRhYnNDb25maWdcbiAgICAgIDogbnVsbDtcbiAgICByZXN0LnF1ZXJ5UGFyYW1zID0gdGhpcy5fZGV0YWlsQ29uZmlnLnF1ZXJ5UGFyYW1zXG4gICAgICA/IHRoaXMuX2RldGFpbENvbmZpZy5xdWVyeVBhcmFtc1xuICAgICAgOiB0aGlzLnF1ZXJ5UGFyYW1zO1xuXG4gICAgcmVzdC5wcmVwYXJlZFN0YXRlbWVudFF1ZXJ5ID0gdGhpcy5fZGV0YWlsQ29uZmlnLnByZXBhcmVkU3RhdGVtZW50UXVlcnlcbiAgICAgID8gdGhpcy5fZGV0YWlsQ29uZmlnLnByZXBhcmVkU3RhdGVtZW50UXVlcnlcbiAgICAgIDogbnVsbDtcbiAgICByZXR1cm4gcmVzdDtcbiAgfVxuXG4gIGdldCBkZXNjcmlwdGlvbigpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLl9kZXNjcmlwdGlvbiA9PSBudWxsXG4gICAgICA/ICdtYW5hZ2UgJyArIHRoaXMubmFtZVxuICAgICAgOiB0aGlzLl9kZXNjcmlwdGlvbjtcbiAgfVxuXG4gIGdldCBxdWVyeVBhcmFtcygpOiBhbnkge1xuICAgIHJldHVybiB0aGlzLl9xdWVyeVBhcmFtcyA9PSBudWxsID8ge30gOiB0aGlzLl9xdWVyeVBhcmFtcztcbiAgfVxuXG4gIC8vIFNldHRlcnNcbiAgc2V0IG5hbWUodjogc3RyaW5nKSB7XG4gICAgdGhpcy5fbmFtZSA9IHY7XG4gIH1cblxuICBzZXQgZmllbGRzKHY6IFJlc3RGaWVsZFtdKSB7XG4gICAgdGhpcy5fZmllbGRzID0gdjtcbiAgfVxuXG4gIHNldCBsaXN0Q29uZmlnKHY6IExpc3RDb25maWcpIHtcbiAgICB0aGlzLl9saXN0Q29uZmlnID0gdjtcbiAgfVxuXG4gIHNldCBlZGl0Q29uZmlnKHY6IEVkaXRDb25maWcpIHtcbiAgICB0aGlzLl9lZGl0Q29uZmlnID0gdjtcbiAgfVxuXG4gIHNldCBkZXRhaWxDb25maWcodjogRGV0YWlsQ29uZmlnKSB7XG4gICAgdGhpcy5fZGV0YWlsQ29uZmlnID0gdjtcbiAgfVxuXG4gIHNldCBhcGkodjogc3RyaW5nKSB7XG4gICAgdGhpcy5fYXBpID0gdjtcbiAgfVxuXG4gIHNldCBpY29uKHY6IHN0cmluZyB8IEN1c3RvbUljb24pIHtcbiAgICB0aGlzLl9pY29uID0gdjtcbiAgfVxuXG4gIHNldCBkZXNjcmlwdGlvbih2OiBzdHJpbmcpIHtcbiAgICB0aGlzLl9kZXNjcmlwdGlvbiA9IHY7XG4gIH1cblxuICBzZXQgcXVlcnlQYXJhbXModjogYW55KSB7XG4gICAgdGhpcy5fcXVlcnlQYXJhbXMgPSB2O1xuICB9XG5cbiAgc2V0IGF1dGhSZXF1aXJlZCh2OiBib29sZWFuKSB7XG4gICAgdGhpcy5fYXV0aFJlcXVpcmVkID0gdjtcbiAgfVxuXG4gIHNldCBzaG93SW5NZW51KHY6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9zaG93SW5NZW51ID0gdjtcbiAgfVxuXG4gIHNldCBwZXJtaXNzaW9ucyh2OiBzdHJpbmdbXSkge1xuICAgIHRoaXMuX3Blcm1pc3Npb25zID0gdjtcbiAgfVxufVxuIl19