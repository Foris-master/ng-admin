import { Component, Input } from '@angular/core';
import { REST_FIELD_TYPES } from '../models/rest-resource.model';
// import urlToFile from '../../../utils/';
import * as _ from 'lodash';
import urlToFile from '../../../utils/urlToFile';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../service/rest-resource.service";
import * as i3 from "../service/rest-admin-config.service";
import * as i4 from "@nebular/theme";
import * as i5 from "../service/rest-lang.service";
import * as i6 from "@codehint-ng/html-compiler";
import * as i7 from "ngx-dropzone";
import * as i8 from "../components/fs-icon-ccomponent/fs-icon.component";
import * as i9 from "@angular/common";
import * as i10 from "@ngx-translate/core";
export class RestResourceDetailComponent {
    constructor(activatedRoute, serviceRest, serviceRestAdminConfig, router, dataSourceBuilder, langService) {
        this.activatedRoute = activatedRoute;
        this.serviceRest = serviceRest;
        this.serviceRestAdminConfig = serviceRestAdminConfig;
        this.router = router;
        this.dataSourceBuilder = dataSourceBuilder;
        this.langService = langService;
        this.objectKeys = Object.keys;
        this.customColumn = 'name';
        this.allColumns = [this.customColumn];
        this.listDataSource = {};
        this.isTabsMenu = false;
        this.tabsName = [];
        this.filesUpload = {};
        this.isObject = (a) => {
            let isObject = false;
            if (a.metaData)
                isObject = true;
            if (a.type)
                isObject = true;
            if (a.template)
                isObject = true;
            if (a.inForm)
                isObject = true;
            return isObject;
        };
        this.isArray = (a) => {
            return !!a && a.constructor === Array;
        };
        this.getBelongToSecondField = (elt, response) => {
            var _a, _b, _c, _d;
            const belongVal = `${(_c = (_b = (_a = elt.metaData) === null || _a === void 0 ? void 0 : _a.addConfig) === null || _b === void 0 ? void 0 : _b.belongToOptions) === null || _c === void 0 ? void 0 : _c.resourceName}.${(_d = elt.metaData) === null || _d === void 0 ? void 0 : _d.belongToSecondFieldLabel}`.split('.');
            let dat = response;
            if (belongVal && (belongVal === null || belongVal === void 0 ? void 0 : belongVal.length) > 0) {
                belongVal.forEach((val) => {
                    if (dat[val]) {
                        dat = dat[val];
                    }
                    else
                        dat = '';
                });
            }
            else {
                dat = '';
            }
            return dat;
        };
        this.jsonValue = (val) => {
            let _jsonValue;
            if (val.restField.i18n == true) {
                if (val.data[0] == '{')
                    _jsonValue = JSON.parse(val.data)[this.langService.selected];
                else if (typeof val.data !== 'string')
                    _jsonValue = val.data[this.langService.selected];
                else
                    _jsonValue = val.data;
            }
            else {
                _jsonValue = val.data;
            }
            if (typeof val.data == 'object')
                return JSON.stringify(_jsonValue);
            else
                return _jsonValue;
        };
    }
    ngOnInit() {
        let id;
        if (this.ID) {
            id = this.ID;
        }
        else {
            id = this.activatedRoute.snapshot.paramMap.get('id');
            this.ressourceName =
                this.activatedRoute.snapshot.url[this.activatedRoute.snapshot.url.length - 2].path.split('-')[0];
        }
        this.entityId = parseInt(id);
        this.resource = this.serviceRestAdminConfig.getSpecificResource(this.ressourceName);
        // console.log('this.resource.detailConfig', this.resource.detailConfig);
        if (this.resource.detailConfig.preparedStatementQuery) {
            // this.resource.detailConfig.queryParams.fieldForNextQuery
            this.serviceRest
                .getResources({
                api: this.resource.detailConfig.preparedStatementQuery.api.substring(1),
                queryParams: this.resource.detailConfig.preparedStatementQuery
                    .queryParams
                    ? this.resource.detailConfig.preparedStatementQuery.queryParams
                    : {},
            })
                .subscribe((resp) => {
                const val = {};
                const params = {};
                this.resource.detailConfig.preparedStatementQuery.fieldForNextQuery.forEach((item) => {
                    val[item] = _.get(resp, item);
                });
                this.resource.detailConfig.preparedStatementQuery.queryParamsComplete.forEach((element) => {
                    if (element.isPreparedStatement) {
                        params[element.label] = val[element.value];
                    }
                    else {
                        params[element.label] = element.value;
                    }
                });
                this.serviceRest
                    .getOneResource({
                    api: this.resource.detailConfig.api,
                    queryParams: params,
                }, id)
                    .subscribe((response) => {
                    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
                    const colunms = {};
                    this.entityId = response.id;
                    if (this.resource.detailConfig.tabsConfig &&
                        this.resource.detailConfig.tabsConfig.length > 1) {
                        this.isTabsMenu = true;
                        this.resource.detailConfig.tabsConfig.forEach((tab) => {
                            this.tabsName.push(tab.name);
                            const temp = {};
                            tab.datas.forEach((elt) => {
                                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
                                const search = this.resource.fields.find((field) => field.label === elt);
                                if (search) {
                                    temp[search.name] = {
                                        restField: search,
                                        data: response[search.label],
                                    };
                                }
                                switch (temp[search.name].restField.type) {
                                    case REST_FIELD_TYPES.HAS_MANY:
                                        /*Premier cas si les configs ont ete definis dans le listConfig et rien dans le detailConfig
                                      Premier cas si les configs ont ete definis dans le listConfig et rien dans le detailConfig
                                      on considere que les configs sont les memes
                                      */
                                        if (((_c = (_b = (_a = temp[search.name].restField) === null || _a === void 0 ? void 0 : _a.metaData) === null || _b === void 0 ? void 0 : _b.listConfig) === null || _c === void 0 ? void 0 : _c.restManyResources) &&
                                            !((_f = (_e = (_d = temp[search.name].restField) === null || _d === void 0 ? void 0 : _d.metaData) === null || _e === void 0 ? void 0 : _e.detailConfig) === null || _f === void 0 ? void 0 : _f.restManyResources)) {
                                            const datas = [];
                                            // console.log("Xa me concerne");
                                            // console.log(temp[search.name]);
                                            temp[search.name].data.forEach((item) => {
                                                var _a, _b, _c, _d;
                                                datas.push({
                                                    data: {
                                                        name: ((_d = (_c = (_b = (_a = temp[search.name]) === null || _a === void 0 ? void 0 : _a.restField) === null || _b === void 0 ? void 0 : _b.metaData) === null || _c === void 0 ? void 0 : _c.listConfig) === null || _d === void 0 ? void 0 : _d.restManyResources.label)
                                                            ? item[temp[search.name].restField.metaData
                                                                .listConfig.restManyResources.label]
                                                            : item,
                                                        item,
                                                    },
                                                });
                                            });
                                            const rowsT = [
                                                {
                                                    data: {
                                                        name: temp[search.name].restField.name,
                                                        place: 'header-place',
                                                    },
                                                    children: datas,
                                                },
                                            ];
                                            this.listDataSource[temp[search.name].restField.name] = this.dataSourceBuilder.create(rowsT);
                                        }
                                        else if ((_j = (_h = (_g = temp[search.name].restField) === null || _g === void 0 ? void 0 : _g.metaData) === null || _h === void 0 ? void 0 : _h.detailConfig) === null || _j === void 0 ? void 0 : _j.restManyResources) {
                                            if (this.isObject((_m = (_l = (_k = temp[search.name].restField) === null || _k === void 0 ? void 0 : _k.metaData) === null || _l === void 0 ? void 0 : _l.detailConfig) === null || _m === void 0 ? void 0 : _m.restManyResources)) {
                                                const datas = [];
                                                temp[search.name].data.forEach((item) => {
                                                    var _a, _b, _c, _d;
                                                    datas.push({
                                                        data: {
                                                            name: ((_d = (_c = (_b = (_a = temp[search.name]) === null || _a === void 0 ? void 0 : _a.restField) === null || _b === void 0 ? void 0 : _b.metaData) === null || _c === void 0 ? void 0 : _c.detailConfig) === null || _d === void 0 ? void 0 : _d.restManyResources.label)
                                                                ? item[temp[search.name].restField.metaData
                                                                    .detailConfig.restManyResources.label]
                                                                : item,
                                                            item,
                                                        },
                                                    });
                                                });
                                                const rowsT = [
                                                    {
                                                        data: {
                                                            name: temp[search.name].restField.name,
                                                            place: 'header-place',
                                                        },
                                                        children: datas,
                                                    },
                                                ];
                                                this.listDataSource[temp[search.name].restField.name] = this.dataSourceBuilder.create(rowsT);
                                            }
                                            else {
                                                this.listDataSource[temp[search.name].restField.name] = [];
                                                temp[search.name].data.forEach((element) => {
                                                    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
                                                    this.listDataSource[temp[search.name].restField.name].push({
                                                        resource: (_c = (_b = (_a = temp[search.name].restField) === null || _a === void 0 ? void 0 : _a.metaData) === null || _b === void 0 ? void 0 : _b.detailConfig) === null || _c === void 0 ? void 0 : _c.restManyResources.resource,
                                                        resourceName: (_f = (_e = (_d = temp[search.name].restField) === null || _d === void 0 ? void 0 : _d.metaData) === null || _e === void 0 ? void 0 : _e.detailConfig) === null || _f === void 0 ? void 0 : _f.restManyResources.resourceName,
                                                        id: element === null || element === void 0 ? void 0 : element.id,
                                                        style: ((_j = (_h = (_g = temp[search.name].restField) === null || _g === void 0 ? void 0 : _g.metaData) === null || _h === void 0 ? void 0 : _h.detailConfig) === null || _j === void 0 ? void 0 : _j.restManyResources.style)
                                                            ? (_l = (_k = temp[search.name].restField) === null || _k === void 0 ? void 0 : _k.metaData) === null || _l === void 0 ? void 0 : _l.detailConfig.restManyResources.style
                                                            : '',
                                                    });
                                                });
                                            }
                                        }
                                        break;
                                    case REST_FIELD_TYPES.BELONG_TO_MANY:
                                        const items = [];
                                        temp[search.name].data.forEach((item) => {
                                            items.push({
                                                data: {
                                                    name: item[temp[search.name].restField.metaData.listConfig
                                                        .restBelongToManyResources.label],
                                                    item,
                                                },
                                            });
                                        });
                                        const rowsBelongToMany = [
                                            {
                                                data: {
                                                    name: temp[search.name].restField.name,
                                                    place: 'header-place',
                                                },
                                                children: items,
                                            },
                                        ];
                                        this.listDataSource[temp[search.name].restField.name] =
                                            this.dataSourceBuilder.create(rowsBelongToMany);
                                        break;
                                    case REST_FIELD_TYPES.BELONG_TO:
                                        let dat = this.getBelongToSecondField(search, response);
                                        if (search) {
                                            temp[search.name] = {
                                                restField: search,
                                                data: `${dat} (${response[search.label]})`,
                                            };
                                        }
                                        break;
                                    default:
                                        break;
                                }
                                colunms[tab.name] = temp;
                            });
                        });
                        this.datas = colunms;
                        this.datas1 = colunms;
                    }
                    else {
                        this.resource.fields.forEach((elt) => {
                            if (elt.type === REST_FIELD_TYPES.BELONG_TO) {
                                let dat = this.getBelongToSecondField(elt, response);
                                colunms[elt.name] = {
                                    restField: elt,
                                    data: `${dat} (${response[elt.label]})`,
                                };
                            }
                            else {
                                colunms[elt.name] = {
                                    restField: elt,
                                    data: response[elt.label],
                                };
                            }
                        });
                        this.datas = colunms;
                        for (const property in this.datas) {
                            switch (this.datas[property].restField.type) {
                                case REST_FIELD_TYPES.HAS_MANY:
                                    if (((_c = (_b = (_a = this.datas[property].restField) === null || _a === void 0 ? void 0 : _a.metaData) === null || _b === void 0 ? void 0 : _b.listConfig) === null || _c === void 0 ? void 0 : _c.restManyResources) &&
                                        !((_f = (_e = (_d = this.datas[property].restField) === null || _d === void 0 ? void 0 : _d.metaData) === null || _e === void 0 ? void 0 : _e.detailConfig) === null || _f === void 0 ? void 0 : _f.restManyResources)) {
                                        const datas = [];
                                        this.datas[property].data.forEach((item) => {
                                            var _a, _b, _c, _d;
                                            datas.push({
                                                data: {
                                                    name: ((_d = (_c = (_b = (_a = this.datas[property]) === null || _a === void 0 ? void 0 : _a.restField) === null || _b === void 0 ? void 0 : _b.metaData) === null || _c === void 0 ? void 0 : _c.listConfig) === null || _d === void 0 ? void 0 : _d.restManyResources.label)
                                                        ? item[this.datas[property].restField.metaData
                                                            .listConfig.restManyResources.label]
                                                        : item,
                                                    item,
                                                },
                                            });
                                        });
                                        const rowsT = [
                                            {
                                                data: {
                                                    name: this.datas[property].restField.name,
                                                    place: 'header-place',
                                                },
                                                children: datas,
                                            },
                                        ];
                                        this.listDataSource[this.datas[property].restField.name] = this.dataSourceBuilder.create(rowsT);
                                    }
                                    else if ((_j = (_h = (_g = this.datas[property].restField) === null || _g === void 0 ? void 0 : _g.metaData) === null || _h === void 0 ? void 0 : _h.detailConfig) === null || _j === void 0 ? void 0 : _j.restManyResources) {
                                        if (this.isObject((_m = (_l = (_k = this.datas[property].restField) === null || _k === void 0 ? void 0 : _k.metaData) === null || _l === void 0 ? void 0 : _l.detailConfig) === null || _m === void 0 ? void 0 : _m.restManyResources)) {
                                            const datas = [];
                                            this.datas[property].data.forEach((item) => {
                                                var _a, _b, _c, _d;
                                                datas.push({
                                                    data: {
                                                        name: ((_d = (_c = (_b = (_a = this.datas[property]) === null || _a === void 0 ? void 0 : _a.restField) === null || _b === void 0 ? void 0 : _b.metaData) === null || _c === void 0 ? void 0 : _c.detailConfig) === null || _d === void 0 ? void 0 : _d.restManyResources.label)
                                                            ? item[this.datas[property].restField.metaData
                                                                .detailConfig.restManyResources.label]
                                                            : item,
                                                        item,
                                                    },
                                                });
                                            });
                                            const rowsT = [
                                                {
                                                    data: {
                                                        name: this.datas[property].restField.name,
                                                        place: 'header-place',
                                                    },
                                                    children: datas,
                                                },
                                            ];
                                            this.listDataSource[this.datas[property].restField.name] = this.dataSourceBuilder.create(rowsT);
                                        }
                                        else {
                                            this.listDataSource[this.datas[property].restField.name] = [];
                                            this.datas[property].data.forEach((element) => {
                                                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
                                                this.listDataSource[this.datas[property].restField.name].push({
                                                    resource: (_c = (_b = (_a = this.datas[property].restField) === null || _a === void 0 ? void 0 : _a.metaData) === null || _b === void 0 ? void 0 : _b.detailConfig) === null || _c === void 0 ? void 0 : _c.restManyResources.resource,
                                                    resourceName: (_f = (_e = (_d = this.datas[property].restField) === null || _d === void 0 ? void 0 : _d.metaData) === null || _e === void 0 ? void 0 : _e.detailConfig) === null || _f === void 0 ? void 0 : _f.restManyResources.resourceName,
                                                    id: element === null || element === void 0 ? void 0 : element.id,
                                                    style: ((_j = (_h = (_g = this.datas[property].restField) === null || _g === void 0 ? void 0 : _g.metaData) === null || _h === void 0 ? void 0 : _h.detailConfig) === null || _j === void 0 ? void 0 : _j.restManyResources.style)
                                                        ? (_l = (_k = this.datas[property].restField) === null || _k === void 0 ? void 0 : _k.metaData) === null || _l === void 0 ? void 0 : _l.detailConfig.restManyResources.style
                                                        : '',
                                                });
                                            });
                                        }
                                    }
                                    break;
                                case REST_FIELD_TYPES.BELONG_TO_MANY:
                                    const items = [];
                                    this.datas[property].data.forEach((item) => {
                                        items.push({
                                            data: {
                                                name: item[this.datas[property].restField.metaData.listConfig
                                                    .restBelongToManyResources.label],
                                                item,
                                            },
                                        });
                                    });
                                    const rowsBelongToMany = [
                                        {
                                            data: {
                                                name: this.datas[property].restField.name,
                                                place: 'header-place',
                                            },
                                            children: items,
                                        },
                                    ];
                                    this.listDataSource[this.datas[property].restField.name] =
                                        this.dataSourceBuilder.create(rowsBelongToMany);
                                    break;
                                default:
                                    break;
                            }
                        }
                    }
                });
            });
        }
        else {
            this.serviceRest
                .getOneResource({
                api: this.resource.detailConfig.api,
                queryParams: this.resource.detailConfig.queryParams,
            }, id)
                .subscribe((response) => {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
                const colunms = {};
                this.entityId = response.id;
                if (this.resource.detailConfig.tabsConfig &&
                    this.resource.detailConfig.tabsConfig.length > 1) {
                    this.isTabsMenu = true;
                    this.resource.detailConfig.tabsConfig.forEach((tab) => {
                        this.tabsName.push(tab.name);
                        const temp = {};
                        tab.datas.forEach((elt) => {
                            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
                            const search = this.resource.fields.find((field) => field.label === elt);
                            if (search) {
                                temp[search.name] = {
                                    restField: search,
                                    data: response[search.label],
                                };
                            }
                            switch (temp[search.name].restField.type) {
                                case REST_FIELD_TYPES.HAS_MANY:
                                    /*Premier cas si les configs ont ete definis dans le listConfig et rien dans le detailConfig
                                    Premier cas si les configs ont ete definis dans le listConfig et rien dans le detailConfig
                                    on considere que les configs sont les memes
                                    */
                                    if (((_c = (_b = (_a = temp[search.name].restField) === null || _a === void 0 ? void 0 : _a.metaData) === null || _b === void 0 ? void 0 : _b.listConfig) === null || _c === void 0 ? void 0 : _c.restManyResources) &&
                                        !((_f = (_e = (_d = temp[search.name].restField) === null || _d === void 0 ? void 0 : _d.metaData) === null || _e === void 0 ? void 0 : _e.detailConfig) === null || _f === void 0 ? void 0 : _f.restManyResources)) {
                                        const datas = [];
                                        // console.log("Xa me concerne");
                                        // console.log(temp[search.name]);
                                        temp[search.name].data.forEach((item) => {
                                            var _a, _b, _c, _d;
                                            datas.push({
                                                data: {
                                                    name: ((_d = (_c = (_b = (_a = temp[search.name]) === null || _a === void 0 ? void 0 : _a.restField) === null || _b === void 0 ? void 0 : _b.metaData) === null || _c === void 0 ? void 0 : _c.listConfig) === null || _d === void 0 ? void 0 : _d.restManyResources.label)
                                                        ? item[temp[search.name].restField.metaData
                                                            .listConfig.restManyResources.label]
                                                        : item,
                                                    item,
                                                },
                                            });
                                        });
                                        const rowsT = [
                                            {
                                                data: {
                                                    name: temp[search.name].restField.name,
                                                    place: 'header-place',
                                                },
                                                children: datas,
                                            },
                                        ];
                                        this.listDataSource[temp[search.name].restField.name] =
                                            this.dataSourceBuilder.create(rowsT);
                                    }
                                    else if ((_j = (_h = (_g = temp[search.name].restField) === null || _g === void 0 ? void 0 : _g.metaData) === null || _h === void 0 ? void 0 : _h.detailConfig) === null || _j === void 0 ? void 0 : _j.restManyResources) {
                                        if (this.isObject((_m = (_l = (_k = temp[search.name].restField) === null || _k === void 0 ? void 0 : _k.metaData) === null || _l === void 0 ? void 0 : _l.detailConfig) === null || _m === void 0 ? void 0 : _m.restManyResources)) {
                                            const datas = [];
                                            temp[search.name].data.forEach((item) => {
                                                var _a, _b, _c, _d;
                                                datas.push({
                                                    data: {
                                                        name: ((_d = (_c = (_b = (_a = temp[search.name]) === null || _a === void 0 ? void 0 : _a.restField) === null || _b === void 0 ? void 0 : _b.metaData) === null || _c === void 0 ? void 0 : _c.detailConfig) === null || _d === void 0 ? void 0 : _d.restManyResources.label)
                                                            ? item[temp[search.name].restField.metaData
                                                                .detailConfig.restManyResources.label]
                                                            : item,
                                                        item,
                                                    },
                                                });
                                            });
                                            const rowsT = [
                                                {
                                                    data: {
                                                        name: temp[search.name].restField.name,
                                                        place: 'header-place',
                                                    },
                                                    children: datas,
                                                },
                                            ];
                                            this.listDataSource[temp[search.name].restField.name] =
                                                this.dataSourceBuilder.create(rowsT);
                                        }
                                        else {
                                            this.listDataSource[temp[search.name].restField.name] =
                                                [];
                                            temp[search.name].data.forEach((element) => {
                                                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
                                                this.listDataSource[temp[search.name].restField.name].push({
                                                    resource: (_c = (_b = (_a = temp[search.name].restField) === null || _a === void 0 ? void 0 : _a.metaData) === null || _b === void 0 ? void 0 : _b.detailConfig) === null || _c === void 0 ? void 0 : _c.restManyResources.resource,
                                                    resourceName: (_f = (_e = (_d = temp[search.name].restField) === null || _d === void 0 ? void 0 : _d.metaData) === null || _e === void 0 ? void 0 : _e.detailConfig) === null || _f === void 0 ? void 0 : _f.restManyResources.resourceName,
                                                    id: element === null || element === void 0 ? void 0 : element.id,
                                                    style: ((_j = (_h = (_g = temp[search.name].restField) === null || _g === void 0 ? void 0 : _g.metaData) === null || _h === void 0 ? void 0 : _h.detailConfig) === null || _j === void 0 ? void 0 : _j.restManyResources.style)
                                                        ? (_l = (_k = temp[search.name].restField) === null || _k === void 0 ? void 0 : _k.metaData) === null || _l === void 0 ? void 0 : _l.detailConfig.restManyResources.style
                                                        : '',
                                                });
                                            });
                                        }
                                    }
                                    break;
                                case REST_FIELD_TYPES.BELONG_TO_MANY:
                                    const items = [];
                                    temp[search.name].data.forEach((item) => {
                                        items.push({
                                            data: {
                                                name: item[temp[search.name].restField.metaData.listConfig
                                                    .restBelongToManyResources.label],
                                                item,
                                            },
                                        });
                                    });
                                    const rowsBelongToMany = [
                                        {
                                            data: {
                                                name: temp[search.name].restField.name,
                                                place: 'header-place',
                                            },
                                            children: items,
                                        },
                                    ];
                                    this.listDataSource[temp[search.name].restField.name] =
                                        this.dataSourceBuilder.create(rowsBelongToMany);
                                    break;
                                case REST_FIELD_TYPES.BELONG_TO:
                                    let dat = this.getBelongToSecondField(search, response);
                                    if (search) {
                                        temp[search.name] = {
                                            restField: search,
                                            data: `${dat} (${response[search.label]})`,
                                        };
                                    }
                                    break;
                                case REST_FIELD_TYPES.PDF:
                                    const file = urlToFile(response[search.label], search.label, 'pdf');
                                    this.filesUpload[search.label] = file;
                                    break;
                                default:
                                    break;
                            }
                            colunms[tab.name] = temp;
                        });
                    });
                    this.datas = colunms;
                    this.datas1 = colunms;
                }
                else {
                    this.resource.fields.forEach((elt) => {
                        if (elt.type === REST_FIELD_TYPES.BELONG_TO) {
                            let dat = this.getBelongToSecondField(elt, response);
                            colunms[elt.name] = {
                                restField: elt,
                                data: `${dat} (${response[elt.label]})`,
                            };
                        }
                        else {
                            colunms[elt.name] = {
                                restField: elt,
                                data: response[elt.label],
                            };
                        }
                    });
                    this.datas = colunms;
                    for (const property in this.datas) {
                        switch (this.datas[property].restField.type) {
                            case REST_FIELD_TYPES.HAS_MANY:
                                if (((_c = (_b = (_a = this.datas[property].restField) === null || _a === void 0 ? void 0 : _a.metaData) === null || _b === void 0 ? void 0 : _b.listConfig) === null || _c === void 0 ? void 0 : _c.restManyResources) &&
                                    !((_f = (_e = (_d = this.datas[property].restField) === null || _d === void 0 ? void 0 : _d.metaData) === null || _e === void 0 ? void 0 : _e.detailConfig) === null || _f === void 0 ? void 0 : _f.restManyResources)) {
                                    const datas = [];
                                    this.datas[property].data.forEach((item) => {
                                        var _a, _b, _c, _d;
                                        datas.push({
                                            data: {
                                                name: ((_d = (_c = (_b = (_a = this.datas[property]) === null || _a === void 0 ? void 0 : _a.restField) === null || _b === void 0 ? void 0 : _b.metaData) === null || _c === void 0 ? void 0 : _c.listConfig) === null || _d === void 0 ? void 0 : _d.restManyResources.label)
                                                    ? item[this.datas[property].restField.metaData
                                                        .listConfig.restManyResources.label]
                                                    : item,
                                                item,
                                            },
                                        });
                                    });
                                    const rowsT = [
                                        {
                                            data: {
                                                name: this.datas[property].restField.name,
                                                place: 'header-place',
                                            },
                                            children: datas,
                                        },
                                    ];
                                    this.listDataSource[this.datas[property].restField.name] =
                                        this.dataSourceBuilder.create(rowsT);
                                }
                                else if ((_j = (_h = (_g = this.datas[property].restField) === null || _g === void 0 ? void 0 : _g.metaData) === null || _h === void 0 ? void 0 : _h.detailConfig) === null || _j === void 0 ? void 0 : _j.restManyResources) {
                                    if (this.isObject((_m = (_l = (_k = this.datas[property].restField) === null || _k === void 0 ? void 0 : _k.metaData) === null || _l === void 0 ? void 0 : _l.detailConfig) === null || _m === void 0 ? void 0 : _m.restManyResources)) {
                                        const datas = [];
                                        this.datas[property].data.forEach((item) => {
                                            var _a, _b, _c, _d;
                                            datas.push({
                                                data: {
                                                    name: ((_d = (_c = (_b = (_a = this.datas[property]) === null || _a === void 0 ? void 0 : _a.restField) === null || _b === void 0 ? void 0 : _b.metaData) === null || _c === void 0 ? void 0 : _c.detailConfig) === null || _d === void 0 ? void 0 : _d.restManyResources.label)
                                                        ? item[this.datas[property].restField.metaData
                                                            .detailConfig.restManyResources.label]
                                                        : item,
                                                    item,
                                                },
                                            });
                                        });
                                        const rowsT = [
                                            {
                                                data: {
                                                    name: this.datas[property].restField.name,
                                                    place: 'header-place',
                                                },
                                                children: datas,
                                            },
                                        ];
                                        this.listDataSource[this.datas[property].restField.name] =
                                            this.dataSourceBuilder.create(rowsT);
                                    }
                                    else {
                                        this.listDataSource[this.datas[property].restField.name] =
                                            [];
                                        this.datas[property].data.forEach((element) => {
                                            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
                                            this.listDataSource[this.datas[property].restField.name].push({
                                                resource: (_c = (_b = (_a = this.datas[property].restField) === null || _a === void 0 ? void 0 : _a.metaData) === null || _b === void 0 ? void 0 : _b.detailConfig) === null || _c === void 0 ? void 0 : _c.restManyResources.resource,
                                                resourceName: (_f = (_e = (_d = this.datas[property].restField) === null || _d === void 0 ? void 0 : _d.metaData) === null || _e === void 0 ? void 0 : _e.detailConfig) === null || _f === void 0 ? void 0 : _f.restManyResources.resourceName,
                                                id: element === null || element === void 0 ? void 0 : element.id,
                                                style: ((_j = (_h = (_g = this.datas[property].restField) === null || _g === void 0 ? void 0 : _g.metaData) === null || _h === void 0 ? void 0 : _h.detailConfig) === null || _j === void 0 ? void 0 : _j.restManyResources.style)
                                                    ? (_l = (_k = this.datas[property].restField) === null || _k === void 0 ? void 0 : _k.metaData) === null || _l === void 0 ? void 0 : _l.detailConfig.restManyResources.style
                                                    : '',
                                            });
                                        });
                                    }
                                }
                                break;
                            case REST_FIELD_TYPES.BELONG_TO_MANY:
                                const items = [];
                                this.datas[property].data.forEach((item) => {
                                    items.push({
                                        data: {
                                            name: item[this.datas[property].restField.metaData.listConfig
                                                .restBelongToManyResources.label],
                                            item,
                                        },
                                    });
                                });
                                const rowsBelongToMany = [
                                    {
                                        data: {
                                            name: this.datas[property].restField.name,
                                            place: 'header-place',
                                        },
                                        children: items,
                                    },
                                ];
                                this.listDataSource[this.datas[property].restField.name] =
                                    this.dataSourceBuilder.create(rowsBelongToMany);
                                break;
                            default:
                                break;
                        }
                    }
                }
            });
        }
    }
    editEntity() {
        this.router.navigate([`/admin/${this.ressourceName}-edit`, this.entityId]);
    }
    listEntity() {
        this.router.navigateByUrl(`/admin/${this.ressourceName}-list`);
    }
    get REST_FIELD_TYPES() {
        return REST_FIELD_TYPES;
    }
    //Image input
    onSelect(event) { }
    onRemove(field) { }
    loadBelongToDetail(data) {
        const resourceName = data.restField.metaData.addConfig.belongToOptions.resourceName;
        this.router.navigate([`/admin/${resourceName}-detail`, data.data]);
    }
}
RestResourceDetailComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0, type: RestResourceDetailComponent, deps: [{ token: i1.ActivatedRoute }, { token: i2.RestResourceService }, { token: i3.RestAdminConfigService }, { token: i1.Router }, { token: i4.NbTreeGridDataSourceBuilder }, { token: i5.RestLangService }], target: i0.ɵɵFactoryTarget.Component });
RestResourceDetailComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.5", type: RestResourceDetailComponent, selector: "ngx-rest-resource-detail", inputs: { resource: "resource", ID: "ID", ressourceName: "ressourceName", container: "container", style: "style" }, ngImport: i0, template: "<nb-card [style]=\"style ? style : ''\">\n  <nb-card-header *ngIf=\"!container\">\n    {{ resource.detailConfig?.title | titlecase }}\n  </nb-card-header>\n  <nb-card-body>\n    <nb-list *ngIf=\"!isTabsMenu; else tabsContent\">\n      <nb-list-item\n        *ngFor=\"let item of datas | keyvalue\"\n        class=\"rest-item-align\"\n      >\n        <!-- style=\"display: block\" -->\n        <ng-container\n          *ngIf=\"\n            item.value.restField.type == REST_FIELD_TYPES.TEXT ||\n            item.value.restField.type == REST_FIELD_TYPES.STRING ||\n            item.value.restField.type == REST_FIELD_TYPES.NUMBER ||\n            item.value.restField.type == REST_FIELD_TYPES.ENUM\n          \"\n        >\n          <ng-container *ngIf=\"!item.value.restField.template\">\n            <div class=\"\">\n              <b>{{ item.key | titlecase }}: </b>\n            </div>\n            <div class=\"\">\n              {{ item.value.data }}\n            </div>\n          </ng-container>\n\n          <div *ngIf=\"item.value.restField.template\">\n            <cng-html-compiler\n              [template]=\"item.value.restField.template\"\n              [componentClass]=\"item.value.data\"\n            >\n            </cng-html-compiler>\n          </div>\n        </ng-container>\n\n        <ng-container *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.PDF\">\n          <ng-container *ngIf=\"!item.value.restField.template\">\n            <div class=\"\">\n              <b>{{ item.key | titlecase }}: </b>\n            </div>\n\n            <ng-container *ngIf=\"!item.value.restField.template\">\n              <div class=\"\">\n                <b>{{ item.key | titlecase }}: </b>\n              </div>\n              <div class=\"\">\n                {{ item.value.data }}\n              </div>\n              <div class=\"\">\n                <ngx-dropzone (change)=\"onSelect($event)\">\n                  <ngx-dropzone-preview\n                    [removable]=\"true\"\n                    (removed)=\"onRemove(filesUpload[item.key])\"\n                  >\n                    <ngx-dropzone-label\n                      >{{ item?.value?.data }} ({{\n                        'pdf'\n                      }})</ngx-dropzone-label\n                    >\n                  </ngx-dropzone-preview>\n                </ngx-dropzone>\n              </div>\n            </ng-container>\n          </ng-container>\n          <ng-container *ngIf=\"item.value.restField.template\">\n            <cng-html-compiler\n              [template]=\"item.value.restField.template\"\n              [componentClass]=\"jsonValue(item.value)\"\n            >\n            </cng-html-compiler>\n          </ng-container>\n        </ng-container>\n\n        <ng-container\n          *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.COLOR\"\n        >\n          <ng-container *ngIf=\"!item.value.restField.template\">\n            <div class=\"\">\n              <b>{{ item.key | titlecase }}: </b>\n            </div>\n            <div class=\"\">\n              {{ item.value.data }}\n            </div>\n            <div\n              class=\"text-center color-card\"\n              [style.background-color]=\"item.value.data\"\n            >\n              <ng-container>{{ item.value.data }}</ng-container>\n            </div>\n          </ng-container>\n\n          <div *ngIf=\"item.value.restField.template\">\n            <cng-html-compiler\n              [template]=\"item.value.restField.template\"\n              [componentClass]=\"item.value.data\"\n            >\n            </cng-html-compiler>\n          </div>\n        </ng-container>\n\n        <ng-container\n          *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.JSON\"\n        >\n          <ng-container *ngIf=\"!item.value.restField.template\">\n            <div class=\"\">\n              <b>{{ item.key | titlecase }}: </b>\n            </div>\n            <div class=\"\">\n              {{ jsonValue(item.value) }}\n            </div>\n          </ng-container>\n          <ng-container *ngIf=\"item.value.restField.template\">\n            <cng-html-compiler\n              [template]=\"item.value.restField.template\"\n              [componentClass]=\"jsonValue(item.value)\"\n            >\n            </cng-html-compiler>\n          </ng-container>\n        </ng-container>\n\n        <ng-container\n          *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.BOOLEAN\"\n        >\n          <ng-container *ngIf=\"!item.value.restField.template\">\n            <div class=\"\">\n              <b>{{ item.key | titlecase }}: </b>\n            </div>\n\n            <div class=\"\">\n              <nb-checkbox\n                [checked]=\"item.value.data\"\n                [disabled]=\"true\"\n              ></nb-checkbox>\n            </div>\n          </ng-container>\n\n          <ng-container *ngIf=\"item.value.restField.template\">\n            <cng-html-compiler\n              [template]=\"item.value.restField.template\"\n              [componentClass]=\"item.value.data\"\n            >\n            </cng-html-compiler>\n          </ng-container>\n        </ng-container>\n\n        <ng-container\n          *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.IMAGE\"\n        >\n          <ng-container *ngIf=\"!item.value.restField.template\">\n            <div class=\"\">\n              <b>{{ item.key | titlecase }}: </b>\n            </div>\n            <div class=\"\">\n              <img\n                class=\"rest-img\"\n                [src]=\"item.value.data\"\n                alt=\"\"\n                [style]=\"style\"\n              />\n            </div>\n          </ng-container>\n          <ng-container *ngIf=\"item.value.restField.template\">\n            <cng-html-compiler\n              [template]=\"item.value.restField.template\"\n              [componentClass]=\"item.value.data\"\n            >\n            </cng-html-compiler>\n          </ng-container>\n        </ng-container>\n\n        <ng-container\n          *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.DATE\"\n        >\n          <ng-container *ngIf=\"!item.value.restField.template\">\n            <div class=\"\">\n              <b>{{ item.key | titlecase }}: </b>\n            </div>\n            <div class=\"\">\n              {{ item.value.data | date }}\n            </div>\n          </ng-container>\n          <ng-container *ngIf=\"item.value.restField.template\">\n            <cng-html-compiler\n              [template]=\"item.value.restField.template\"\n              [componentClass]=\"item.value.data\"\n            >\n            </cng-html-compiler>\n          </ng-container>\n        </ng-container>\n\n        <ng-container\n          *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.BELONG_TO\"\n        >\n          <ng-container *ngIf=\"!item.value.restField.template\">\n            <div class=\"\">\n              <b>{{ item.value.restField.label | titlecase }}: </b>\n            </div>\n            <div class=\"\">\n              <a\n                (click)=\"loadBelongToDetail(item.value)\"\n                nbTooltip=\"{{ 'rest-detail.belongToRef' | translate }}\"\n                nbTooltipPlacement=\"top\"\n                class=\"belongTo-link\"\n              >\n                {{ item.value.data }}\n              </a>\n            </div>\n          </ng-container>\n          <ng-container *ngIf=\"item.value.restField.template\">\n            <cng-html-compiler\n              [template]=\"item.value.restField.template\"\n              [componentClass]=\"item.value.data\"\n            >\n            </cng-html-compiler>\n          </ng-container>\n        </ng-container>\n\n        <ng-container\n          *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.HAS_MANY\"\n        >\n          <!-- CAS 1 -->\n          <ng-container\n            *ngIf=\"\n              item.value.restField?.metaData?.listConfig?.restManyResources &&\n              !item.value.restField?.metaData?.detailConfig?.restManyResources\n            \"\n          >\n            <table [nbTreeGrid]=\"listDataSource[item.key]\">\n              <tr\n                nbTreeGridRow\n                *nbTreeGridRowDef=\"let row; columns: allColumns\"\n              ></tr>\n\n              <ng-container [nbTreeGridColumnDef]=\"customColumn\">\n                <td nbTreeGridCell *nbTreeGridCellDef=\"let row\">\n                  <ngx-fs-icon\n                    [expanded]=\"row.expanded\"\n                    [place]=\"row.data.place\"\n                  ></ngx-fs-icon>\n                  <ng-container\n                    *ngIf=\"\n                      !item.value.restField?.metaData?.listConfig\n                        ?.restManyResources.template\n                    \"\n                  >\n                    <b> {{ row.data[customColumn] }}</b>\n                  </ng-container>\n\n                  <ng-container\n                    *ngIf=\"\n                      item.value.restField?.metaData?.listConfig\n                        ?.restManyResources.template\n                    \"\n                  >\n                    <span *ngIf=\"row.data.place\">\n                      {{ item.value.restField.name }}</span\n                    >\n                    <ng-container *ngIf=\"!row.data.place\">\n                      <cng-html-compiler\n                        [template]=\"\n                          item.value.restField.metaData.listConfig\n                            .restManyResources.template\n                        \"\n                        [componentClass]=\"row.data.item\"\n                      >\n                      </cng-html-compiler>\n                    </ng-container>\n                  </ng-container>\n                </td>\n              </ng-container>\n            </table>\n          </ng-container>\n\n          <!-- CAS 2 -->\n          <ng-container\n            *ngIf=\"\n              item.value.restField?.metaData?.detailConfig?.restManyResources\n            \"\n          >\n            <div\n              *ngIf=\"\n                isObject(\n                  item.value.restField.metaData.detailConfig.restManyResources\n                );\n                else cas21\n              \"\n            >\n              <table [nbTreeGrid]=\"listDataSource[item.key]\">\n                <tr\n                  nbTreeGridRow\n                  *nbTreeGridRowDef=\"let row; columns: allColumns\"\n                ></tr>\n\n                <ng-container [nbTreeGridColumnDef]=\"customColumn\">\n                  <td nbTreeGridCell *nbTreeGridCellDef=\"let row\">\n                    <ngx-fs-icon\n                      [expanded]=\"row.expanded\"\n                      [place]=\"row.data.place\"\n                    ></ngx-fs-icon>\n                    <ng-container\n                      *ngIf=\"\n                        !item.value.restField.metaData.detailConfig\n                          .restManyResources?.template\n                      \"\n                    >\n                      <b> {{ row.data[customColumn] }}</b>\n                    </ng-container>\n\n                    <ng-container\n                      *ngIf=\"\n                        item.value.restField.metaData.detailConfig\n                          .restManyResources?.template\n                      \"\n                    >\n                      <span *ngIf=\"row.data.place\">\n                        {{ item.value.restField.name }}</span\n                      >\n                      <ng-container *ngIf=\"!row.data.place\">\n                        <cng-html-compiler\n                          [template]=\"\n                            item.value.restField.metaData.detailConfig\n                              .restManyResources.template\n                          \"\n                          [componentClass]=\"row.data.item\"\n                        >\n                        </cng-html-compiler>\n                      </ng-container>\n                    </ng-container>\n                  </td>\n                </ng-container>\n              </table>\n            </div>\n            <ng-template #cas21>\n              <div\n                class=\"row\"\n                *ngFor=\"let res of listDataSource[item.value.restField.name]\"\n              >\n                <ngx-rest-resource-detail\n                  [resource]=\"res.resource\"\n                  [ID]=\"res.id\"\n                  [ressourceName]=\"res.resourceName\"\n                  [container]=\"true\"\n                  [style]=\"res.style\"\n                ></ngx-rest-resource-detail>\n              </div>\n            </ng-template>\n          </ng-container>\n        </ng-container>\n\n        <ng-container\n          *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.BELONG_TO_MANY\"\n        >\n          <table [nbTreeGrid]=\"listDataSource[item.key]\">\n            <tr\n              nbTreeGridRow\n              *nbTreeGridRowDef=\"let row; columns: allColumns\"\n            ></tr>\n\n            <ng-container [nbTreeGridColumnDef]=\"customColumn\">\n              <td nbTreeGridCell *nbTreeGridCellDef=\"let row\">\n                <ngx-fs-icon\n                  [expanded]=\"row.expanded\"\n                  [place]=\"row.data.place\"\n                ></ngx-fs-icon>\n                <ng-container\n                  *ngIf=\"\n                    !item.value.restField.metaData.listConfig\n                      .restBelongToManyResources.template\n                  \"\n                >\n                  <b> {{ row.data[customColumn] }}</b>\n                </ng-container>\n\n                <ng-container\n                  *ngIf=\"\n                    item.value.restField.metaData.listConfig\n                      .restBelongToManyResources.template\n                  \"\n                >\n                  <span *ngIf=\"row.data.place\">{{\n                    item.value.restField.name\n                  }}</span>\n                  <ng-container *ngIf=\"!row.data.place\">\n                    <cng-html-compiler\n                      [template]=\"\n                        item.value.restField.metaData.listConfig\n                          .restBelongToManyResources.template\n                      \"\n                      [componentClass]=\"row.data.item\"\n                    >\n                    </cng-html-compiler>\n                  </ng-container>\n                </ng-container>\n              </td>\n            </ng-container>\n          </table>\n        </ng-container>\n      </nb-list-item>\n    </nb-list>\n    <ng-template #tabsContent>\n      <nb-tabset>\n        <nb-tab [tabTitle]=\"tabs\" *ngFor=\"let tabs of tabsName\">\n          <nb-list>\n            <nb-list-item\n              *ngFor=\"let item of datas1[tabs] | keyvalue\"\n              class=\"rest-item-align\"\n            >\n              <!-- style=\"display: flex, \" -->\n              <ng-container\n                *ngIf=\"\n                  item.value.restField.type == REST_FIELD_TYPES.TEXT ||\n                  item.value.restField.type == REST_FIELD_TYPES.STRING ||\n                  item.value.restField.type == REST_FIELD_TYPES.NUMBER ||\n                  item.value.restField.type == REST_FIELD_TYPES.ENUM\n                \"\n              >\n                <ng-container *ngIf=\"!item.value.restField.template\">\n                  <div class=\"\">\n                    <b>{{ item.key | titlecase }}: </b>\n                  </div>\n                  <div class=\"\">\n                    {{ item.value.data }}\n                  </div>\n                </ng-container>\n\n                <div *ngIf=\"item.value.restField.template\">\n                  <cng-html-compiler\n                    [template]=\"item.value.restField.template\"\n                    [componentClass]=\"item.value.data\"\n                  >\n                  </cng-html-compiler>\n                </div>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.COLOR\"\n              >\n                <ng-container *ngIf=\"!item.value.restField.template\">\n                  <div class=\"\">\n                    <b>{{ item.key | titlecase }}: </b>\n                  </div>\n                  <div class=\"\">\n                    {{ item.value.data }}\n                  </div>\n                  <input\n                    style=\"height: 45px; width: 80px; margin-left: 5px\"\n                    disabled=\"true\"\n                    [placeholder]=\"item.value.data\"\n                    [value]=\"item.value.data\"\n                    type=\"color\"\n                  />\n                </ng-container>\n\n                <div *ngIf=\"item.value.restField.template\">\n                  <cng-html-compiler\n                    [template]=\"item.value.restField.template\"\n                    [componentClass]=\"item.value.data\"\n                  >\n                  </cng-html-compiler>\n                </div>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.BOOLEAN\"\n              >\n                <ng-container *ngIf=\"!item.value.restField.template\">\n                  <div class=\"\">\n                    <b>{{ item.key | titlecase }}: </b>\n                  </div>\n\n                  <div class=\"\">\n                    <nb-checkbox\n                      [checked]=\"item.value.data\"\n                      [disabled]=\"true\"\n                    ></nb-checkbox>\n                  </div>\n                </ng-container>\n\n                <ng-container *ngIf=\"item.value.restField.template\">\n                  <cng-html-compiler\n                    [template]=\"item.value.restField.template\"\n                    [componentClass]=\"item.value.data\"\n                  >\n                  </cng-html-compiler>\n                </ng-container>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.IMAGE\"\n              >\n                <ng-container *ngIf=\"!item.value.restField.template\">\n                  <div class=\"\">\n                    <b>{{ item.key | titlecase }}: </b>\n                  </div>\n                  <div class=\"\">\n                    <img\n                      class=\"rest-img\"\n                      [src]=\"item.value.data\"\n                      alt=\"\"\n                      [style]=\"style\"\n                    />\n                  </div>\n                </ng-container>\n                <ng-container *ngIf=\"item.value.restField.template\">\n                  <cng-html-compiler\n                    [template]=\"item.value.restField.template\"\n                    [componentClass]=\"item.value.data\"\n                  >\n                  </cng-html-compiler>\n                </ng-container>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.DATE\"\n              >\n                <ng-container *ngIf=\"!item.value.restField.template\">\n                  <div class=\"\">\n                    <b>{{ item.key | titlecase }}: </b>\n                  </div>\n                  <div class=\"\">\n                    {{ item.value.data | date }}\n                  </div>\n                </ng-container>\n                <ng-container *ngIf=\"item.value.restField.template\">\n                  <cng-html-compiler\n                    [template]=\"item.value.restField.template\"\n                    [componentClass]=\"item.value.data\"\n                  >\n                  </cng-html-compiler>\n                </ng-container>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.BELONG_TO\"\n              >\n                <ng-container *ngIf=\"!item.value.restField.template\">\n                  <div class=\"\">\n                    <b>{{ item.value.restField.label | titlecase }}: </b>\n                  </div>\n                  <div class=\"\">\n                    <a\n                      (click)=\"loadBelongToDetail(item.value)\"\n                      nbTooltip=\"{{ 'rest-detail.belongToRef' | translate }}\"\n                      nbTooltipPlacement=\"top\"\n                      class=\"belongTo-link\"\n                    >\n                      {{ item.value.data }}\n                    </a>\n                  </div>\n                </ng-container>\n                <ng-container *ngIf=\"item.value.restField.template\">\n                  <cng-html-compiler\n                    [template]=\"item.value.restField.template\"\n                    [componentClass]=\"item.value.data\"\n                  >\n                  </cng-html-compiler>\n                </ng-container>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.HAS_MANY\"\n              >\n                <ng-container\n                  *ngIf=\"\n                    item.value.restField?.metaData?.listConfig\n                      ?.restManyResources &&\n                    !item.value.restField?.metaData?.detailConfig\n                      ?.restManyResources\n                  \"\n                >\n                  <table [nbTreeGrid]=\"listDataSource[item.key]\">\n                    <tr\n                      nbTreeGridRow\n                      *nbTreeGridRowDef=\"let row; columns: allColumns\"\n                    ></tr>\n\n                    <ng-container [nbTreeGridColumnDef]=\"customColumn\">\n                      <td nbTreeGridCell *nbTreeGridCellDef=\"let row\">\n                        <ngx-fs-icon\n                          [expanded]=\"row.expanded\"\n                          [place]=\"row.data.place\"\n                        ></ngx-fs-icon>\n                        <ng-container\n                          *ngIf=\"\n                            !item.value.restField?.metaData?.listConfig\n                              ?.restManyResources.template\n                          \"\n                        >\n                          <b> {{ row.data[customColumn] }}</b>\n                        </ng-container>\n\n                        <ng-container\n                          *ngIf=\"\n                            item.value.restField?.metaData?.listConfig\n                              ?.restManyResources.template\n                          \"\n                        >\n                          <span *ngIf=\"row.data.place\">\n                            {{ item.value.restField.name }}</span\n                          >\n                          <ng-container *ngIf=\"!row.data.place\">\n                            <cng-html-compiler\n                              [template]=\"\n                                item.value.restField.metaData.listConfig\n                                  .restManyResources.template\n                              \"\n                              [componentClass]=\"row.data.item\"\n                            >\n                            </cng-html-compiler>\n                          </ng-container>\n                        </ng-container>\n                      </td>\n                    </ng-container>\n                  </table>\n                </ng-container>\n                <ng-container\n                  *ngIf=\"\n                    item.value.restField?.metaData?.detailConfig\n                      ?.restManyResources\n                  \"\n                >\n                  <ng-container\n                    *ngIf=\"\n                      isObject(\n                        item.value.restField?.metaData?.detailConfig\n                          ?.restManyResources\n                      );\n                      else displayRes\n                    \"\n                  >\n                    <table [nbTreeGrid]=\"listDataSource[item.key]\">\n                      <tr\n                        nbTreeGridRow\n                        *nbTreeGridRowDef=\"let row; columns: allColumns\"\n                      ></tr>\n\n                      <ng-container [nbTreeGridColumnDef]=\"customColumn\">\n                        <td nbTreeGridCell *nbTreeGridCellDef=\"let row\">\n                          <ngx-fs-icon\n                            [expanded]=\"row.expanded\"\n                            [place]=\"row.data.place\"\n                          ></ngx-fs-icon>\n                          <ng-container\n                            *ngIf=\"\n                              !item.value.restField?.metaData?.detailConfig\n                                ?.restManyResources.template\n                            \"\n                          >\n                            <b> {{ row.data[customColumn] }}</b>\n                          </ng-container>\n\n                          <ng-container\n                            *ngIf=\"\n                              item.value.restField?.metaData?.detailConfig\n                                ?.restManyResources.template\n                            \"\n                          >\n                            <span *ngIf=\"row.data.place\">\n                              {{ item.value.restField.name }}</span\n                            >\n                            <ng-container *ngIf=\"!row.data.place\">\n                              <cng-html-compiler\n                                [template]=\"\n                                  item.value.restField.metaData.detailConfig\n                                    .restManyResources.template\n                                \"\n                                [componentClass]=\"row.data.item\"\n                              >\n                              </cng-html-compiler>\n                            </ng-container>\n                          </ng-container>\n                        </td>\n                      </ng-container>\n                    </table>\n                  </ng-container>\n                  <ng-template #displayRes>\n                    <div\n                      class=\"row\"\n                      *ngFor=\"\n                        let res of listDataSource[item.value.restField.name]\n                      \"\n                    >\n                      <ngx-rest-resource-detail\n                        [resource]=\"res.resource\"\n                        [ID]=\"res.id\"\n                        [ressourceName]=\"res.resourceName\"\n                        [container]=\"true\"\n                        [style]=\"res.style\"\n                      ></ngx-rest-resource-detail>\n                    </div>\n                  </ng-template>\n                </ng-container>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"\n                  item.value.restField.type == REST_FIELD_TYPES.BELONG_TO_MANY\n                \"\n              >\n                <table [nbTreeGrid]=\"listDataSource[item.key]\">\n                  <tr\n                    nbTreeGridRow\n                    *nbTreeGridRowDef=\"let row; columns: allColumns\"\n                  ></tr>\n\n                  <ng-container [nbTreeGridColumnDef]=\"customColumn\">\n                    <td nbTreeGridCell *nbTreeGridCellDef=\"let row\">\n                      <ngx-fs-icon\n                        [expanded]=\"row.expanded\"\n                        [place]=\"row.data.place\"\n                      ></ngx-fs-icon>\n                      <ng-container\n                        *ngIf=\"\n                          !item.value.restField.metaData.listConfig\n                            .restBelongToManyResources.template\n                        \"\n                      >\n                        <b> {{ row.data[customColumn] }}</b>\n                      </ng-container>\n\n                      <ng-container\n                        *ngIf=\"\n                          item.value.restField.metaData.listConfig\n                            .restBelongToManyResources.template\n                        \"\n                      >\n                        <span *ngIf=\"row.data.place\">{{\n                          item.value.restField.name\n                        }}</span>\n                        <ng-container *ngIf=\"!row.data.place\">\n                          <cng-html-compiler\n                            [template]=\"\n                              item.value.restField.metaData.listConfig\n                                .restBelongToManyResources.template\n                            \"\n                            [componentClass]=\"row.data.item\"\n                          >\n                          </cng-html-compiler>\n                        </ng-container>\n                      </ng-container>\n                    </td>\n                  </ng-container>\n                </table>\n              </ng-container>\n            </nb-list-item>\n          </nb-list>\n        </nb-tab>\n      </nb-tabset>\n    </ng-template>\n  </nb-card-body>\n\n  <nb-card-footer *ngIf=\"datas && !container\">\n    <div class=\"buttons-row\">\n      <button\n        nbButton\n        status=\"danger\"\n        style=\"margin-right: 10px\"\n        (click)=\"listEntity()\"\n      >\n        {{ \"rest-detail.btnCancel\" | translate }}\n      </button>\n\n      <button nbButton status=\"primary\" (click)=\"editEntity()\">\n        {{ \"rest-detail.btnEdit\" | translate }}\n      </button>\n    </div>\n  </nb-card-footer>\n</nb-card>\n", styles: ["b{margin-right:20px}.belongTo-link{color:#598bff!important}.belongTo-link:hover{text-decoration:underline!important;cursor:pointer}img{max-width:300px;max-height:200px}.color-card{width:80px;height:30px;border-radius:2px;border-width:2px;border-color:#909293;margin-left:5px;justify-content:center;align-items:center}:host nb-tab{padding:1.25rem}.rest-item-align{margin-right:5px}\n"], components: [{ type: i4.NbCardComponent, selector: "nb-card", inputs: ["status", "accent", "size"] }, { type: i4.NbCardHeaderComponent, selector: "nb-card-header" }, { type: i4.NbCardBodyComponent, selector: "nb-card-body" }, { type: i4.NbListComponent, selector: "nb-list", inputs: ["role"] }, { type: i4.NbListItemComponent, selector: "nb-list-item", inputs: ["role"] }, { type: i6.CngHtmlCompilerComponent, selector: "cng-html-compiler", inputs: ["template", "componentClass", "imports"] }, { type: i7.NgxDropzoneComponent, selector: "ngx-dropzone, [ngx-dropzone]", inputs: ["accept", "disabled", "multiple", "maxFileSize", "expandable", "disableClick", "processDirectoryDrop", "id", "aria-label", "aria-labelledby", "aria-describedby"], outputs: ["change"] }, { type: i7.NgxDropzonePreviewComponent, selector: "ngx-dropzone-preview", inputs: ["file", "removable"], outputs: ["removed"] }, { type: i4.NbCheckboxComponent, selector: "nb-checkbox", inputs: ["status", "checked", "disabled", "indeterminate"], outputs: ["checkedChange"] }, { type: i4.NbTreeGridComponent, selector: "table[nbTreeGrid]", inputs: ["levelPadding", "nbTreeGrid", "equalColumnsWidth"] }, { type: i4.NbTreeGridRowComponent, selector: "tr[nbTreeGridRow]", inputs: ["doubleClickDelay", "clickToToggle"] }, { type: i8.FsIconCComponent, selector: "ngx-fs-icon", inputs: ["expanded", "place"] }, { type: RestResourceDetailComponent, selector: "ngx-rest-resource-detail", inputs: ["resource", "ID", "ressourceName", "container", "style"] }, { type: i4.NbTabsetComponent, selector: "nb-tabset", inputs: ["fullWidth", "routeParam"], outputs: ["changeTab"] }, { type: i4.NbTabComponent, selector: "nb-tab", inputs: ["badgeStatus", "badgeDot", "disabled", "responsive", "active", "lazyLoad", "tabTitle", "tabId", "tabIcon", "route", "badgeText", "badgePosition"] }, { type: i4.NbCardFooterComponent, selector: "nb-card-footer" }, { type: i4.NbButtonComponent, selector: "button[nbButton],a[nbButton],input[type=\"button\"][nbButton],input[type=\"submit\"][nbButton]", inputs: ["hero"] }], directives: [{ type: i9.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i9.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i7.NgxDropzoneLabelDirective, selector: "ngx-dropzone-label" }, { type: i4.NbTooltipDirective, selector: "[nbTooltip]", inputs: ["nbTooltipPlacement", "nbTooltipTrigger", "nbTooltipOffset", "nbTooltipAdjustment", "nbTooltipClass", "nbTooltipIcon", "nbTooltipStatus", "nbTooltip"], outputs: ["nbTooltipShowStateChange"], exportAs: ["nbTooltip"] }, { type: i4.NbTreeGridRowDefDirective, selector: "[nbTreeGridRowDef]", inputs: ["nbTreeGridRowDefColumns"] }, { type: i4.NbTreeGridColumnDefDirective, selector: "[nbTreeGridColumnDef]", inputs: ["nbTreeGridColumnDef", "hideOn", "showOn"] }, { type: i4.NbTreeGridCellDefDirective, selector: "[nbTreeGridCellDef]" }, { type: i4.NbTreeGridCellDirective, selector: "td[nbTreeGridCell]" }], pipes: { "titlecase": i9.TitleCasePipe, "keyvalue": i9.KeyValuePipe, "date": i9.DatePipe, "translate": i10.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0, type: RestResourceDetailComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-rest-resource-detail',
                    templateUrl: './rest-resource-detail.component.html',
                    styleUrls: ['./rest-resource-detail.component.scss'],
                }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i2.RestResourceService }, { type: i3.RestAdminConfigService }, { type: i1.Router }, { type: i4.NbTreeGridDataSourceBuilder }, { type: i5.RestLangService }]; }, propDecorators: { resource: [{
                type: Input
            }], ID: [{
                type: Input
            }], ressourceName: [{
                type: Input
            }], container: [{
                type: Input
            }], style: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVzdC1yZXNvdXJjZS1kZXRhaWwuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvcmVzdC1hZG1pbi9zcmMvbGliL3Jlc3QtYWRtaW4vcmVzdC1yZXNvdXJjZS9yZXN0LXJlc291cmNlLWRldGFpbC9yZXN0LXJlc291cmNlLWRldGFpbC5jb21wb25lbnQudHMiLCIuLi8uLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9yZXN0LWFkbWluL3NyYy9saWIvcmVzdC1hZG1pbi9yZXN0LXJlc291cmNlL3Jlc3QtcmVzb3VyY2UtZGV0YWlsL3Jlc3QtcmVzb3VyY2UtZGV0YWlsLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFVLE1BQU0sZUFBZSxDQUFDO0FBR3pELE9BQU8sRUFBYSxnQkFBZ0IsRUFBRSxNQUFNLCtCQUErQixDQUFDO0FBSzVFLDJDQUEyQztBQUMzQyxPQUFPLEtBQUssQ0FBQyxNQUFNLFFBQVEsQ0FBQztBQUM1QixPQUFPLFNBQVMsTUFBTSwwQkFBMEIsQ0FBQzs7Ozs7Ozs7Ozs7O0FBT2pELE1BQU0sT0FBTywyQkFBMkI7SUFrQnRDLFlBQ1UsY0FBOEIsRUFDOUIsV0FBZ0MsRUFDaEMsc0JBQThDLEVBQzlDLE1BQWMsRUFDZCxpQkFBbUQsRUFDbkQsV0FBNEI7UUFMNUIsbUJBQWMsR0FBZCxjQUFjLENBQWdCO1FBQzlCLGdCQUFXLEdBQVgsV0FBVyxDQUFxQjtRQUNoQywyQkFBc0IsR0FBdEIsc0JBQXNCLENBQXdCO1FBQzlDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFDZCxzQkFBaUIsR0FBakIsaUJBQWlCLENBQWtDO1FBQ25ELGdCQUFXLEdBQVgsV0FBVyxDQUFpQjtRQWZ0QyxlQUFVLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztRQUV6QixpQkFBWSxHQUFHLE1BQU0sQ0FBQztRQUN0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IE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWN0aXZhdGVkUm91dGUsIFJvdXRlciB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBSZXN0UmVzb3VyY2UgfSBmcm9tICcuLi9tb2RlbHMvcmVzdC1yZXNvdXJjZSc7XG5pbXBvcnQgeyBSZXN0RmllbGQsIFJFU1RfRklFTERfVFlQRVMgfSBmcm9tICcuLi9tb2RlbHMvcmVzdC1yZXNvdXJjZS5tb2RlbCc7XG5pbXBvcnQgeyBSZXN0QWRtaW5Db25maWdTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZS9yZXN0LWFkbWluLWNvbmZpZy5zZXJ2aWNlJztcbmltcG9ydCB7IFJlc3RSZXNvdXJjZVNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlL3Jlc3QtcmVzb3VyY2Uuc2VydmljZSc7XG5pbXBvcnQgeyBOYlRyZWVHcmlkRGF0YVNvdXJjZUJ1aWxkZXIgfSBmcm9tICdAbmVidWxhci90aGVtZSc7XG5pbXBvcnQgeyBSZXN0TGFuZ1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlL3Jlc3QtbGFuZy5zZXJ2aWNlJztcbi8vIGltcG9ydCB1cmxUb0ZpbGUgZnJvbSAnLi4vLi4vLi4vdXRpbHMvJztcbmltcG9ydCAqIGFzIF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB1cmxUb0ZpbGUgZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXJsVG9GaWxlJztcblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAnbmd4LXJlc3QtcmVzb3VyY2UtZGV0YWlsJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3Jlc3QtcmVzb3VyY2UtZGV0YWlsLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vcmVzdC1yZXNvdXJjZS1kZXRhaWwuY29tcG9uZW50LnNjc3MnXSxcbn0pXG5leHBvcnQgY2xhc3MgUmVzdFJlc291cmNlRGV0YWlsQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgcmVzb3VyY2U6IFJlc3RSZXNvdXJjZTtcbiAgQElucHV0KCkgSUQ6IHN0cmluZztcbiAgQElucHV0KCkgcmVzc291cmNlTmFtZTogc3RyaW5nO1xuICBASW5wdXQoKSBjb250YWluZXI6IEJvb2xlYW47XG4gIEBJbnB1dCgpIHN0eWxlOiBhbnk7XG4gIGRhdGFzOiBhbnlbXTtcbiAgZGF0YXMxOiBhbnlbXVtdO1xuICBlbnRpdHlJZDogbnVtYmVyO1xuICBvYmplY3RLZXlzID0gT2JqZWN0LmtleXM7XG5cbiAgY3VzdG9tQ29sdW1uID0gJ25hbWUnO1xuICBhbGxDb2x1bW5zID0gW3RoaXMuY3VzdG9tQ29sdW1uXTtcbiAgbGlzdERhdGFTb3VyY2U6IGFueSA9IHt9O1xuICBpc1RhYnNNZW51ID0gZmFsc2U7XG4gIHRhYnNOYW1lID0gW107XG4gIGZpbGVzVXBsb2FkID0ge307XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcHJpdmF0ZSBhY3RpdmF0ZWRSb3V0ZTogQWN0aXZhdGVkUm91dGUsXG4gICAgcHJpdmF0ZSBzZXJ2aWNlUmVzdDogUmVzdFJlc291cmNlU2VydmljZSxcbiAgICBwcml2YXRlIHNlcnZpY2VSZXN0QWRtaW5Db25maWc6IFJlc3RBZG1pbkNvbmZpZ1NlcnZpY2UsXG4gICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcixcbiAgICBwcml2YXRlIGRhdGFTb3VyY2VCdWlsZGVyOiBOYlRyZWVHcmlkRGF0YVNvdXJjZUJ1aWxkZXI8YW55PixcbiAgICBwcml2YXRlIGxhbmdTZXJ2aWNlOiBSZXN0TGFuZ1NlcnZpY2VcbiAgKSB7fVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICAgIGxldCBpZDtcbiAgICBpZiAodGhpcy5JRCkge1xuICAgICAgaWQgPSB0aGlzLklEO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZCA9IHRoaXMuYWN0aXZhdGVkUm91dGUuc25hcHNob3QucGFyYW1NYXAuZ2V0KCdpZCcpO1xuICAgICAgdGhpcy5yZXNzb3VyY2VOYW1lID1cbiAgICAgICAgdGhpcy5hY3RpdmF0ZWRSb3V0ZS5zbmFwc2hvdC51cmxbXG4gICAgICAgICAgdGhpcy5hY3RpdmF0ZWRSb3V0ZS5zbmFwc2hvdC51cmwubGVuZ3RoIC0gMlxuICAgICAgICBdLnBhdGguc3BsaXQoJy0nKVswXTtcbiAgICB9XG4gICAgdGhpcy5lbnRpdHlJZCA9IHBhcnNlSW50KGlkKTtcblxuICAgIHRoaXMucmVzb3VyY2UgPSB0aGlzLnNlcnZpY2VSZXN0QWRtaW5Db25maWcuZ2V0U3BlY2lmaWNSZXNvdXJjZShcbiAgICAgIHRoaXMucmVzc291cmNlTmFtZVxuICAgICk7XG4gICAgLy8gY29uc29sZS5sb2coJ3RoaXMucmVzb3VyY2UuZGV0YWlsQ29uZmlnJywgdGhpcy5yZXNvdXJjZS5kZXRhaWxDb25maWcpO1xuICAgIGlmICh0aGlzLnJlc291cmNlLmRldGFpbENvbmZpZy5wcmVwYXJlZFN0YXRlbWVudFF1ZXJ5KSB7XG4gICAgICAvLyB0aGlzLnJlc291cmNlLmRldGFpbENvbmZpZy5xdWVyeVBhcmFtcy5maWVsZEZvck5leHRRdWVyeVxuICAgICAgdGhpcy5zZXJ2aWNlUmVzdFxuICAgICAgICAuZ2V0UmVzb3VyY2VzKHtcbiAgICAgICAgICBhcGk6IHRoaXMucmVzb3VyY2UuZGV0YWlsQ29uZmlnLnByZXBhcmVkU3RhdGVtZW50UXVlcnkuYXBpLnN1YnN0cmluZyhcbiAgICAgICAgICAgIDFcbiAgICAgICAgICApLFxuICAgICAgICAgIHF1ZXJ5UGFyYW1zOiB0aGlzLnJlc291cmNlLmRldGFpbENvbmZpZy5wcmVwYXJlZFN0YXRlbWVudFF1ZXJ5XG4gICAgICAgICAgICAucXVlcnlQYXJhbXNcbiAgICAgICAgICAgID8gdGhpcy5yZXNvdXJjZS5kZXRhaWxDb25maWcucHJlcGFyZWRTdGF0ZW1lbnRRdWVyeS5xdWVyeVBhcmFtc1xuICAgICAgICAgICAgOiB7fSxcbiAgICAgICAgfSlcbiAgICAgICAgLnN1YnNjcmliZSgocmVzcCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHZhbCA9IHt9O1xuICAgICAgICAgIGNvbnN0IHBhcmFtcyA9IHt9O1xuICAgICAgICAgIHRoaXMucmVzb3VyY2UuZGV0YWlsQ29uZmlnLnByZXBhcmVkU3RhdGVtZW50UXVlcnkuZmllbGRGb3JOZXh0UXVlcnkuZm9yRWFjaChcbiAgICAgICAgICAgIChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgIHZhbFtpdGVtXSA9IF8uZ2V0KHJlc3AsIGl0ZW0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICB0aGlzLnJlc291cmNlLmRldGFpbENvbmZpZy5wcmVwYXJlZFN0YXRlbWVudFF1ZXJ5LnF1ZXJ5UGFyYW1zQ29tcGxldGUuZm9yRWFjaChcbiAgICAgICAgICAgIChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgIGlmIChlbGVtZW50LmlzUHJlcGFyZWRTdGF0ZW1lbnQpIHtcbiAgICAgICAgICAgICAgICBwYXJhbXNbZWxlbWVudC5sYWJlbF0gPSB2YWxbZWxlbWVudC52YWx1ZV07XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGFyYW1zW2VsZW1lbnQubGFiZWxdID0gZWxlbWVudC52YWx1ZTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICk7XG4gICAgICAgICAgdGhpcy5zZXJ2aWNlUmVzdFxuICAgICAgICAgICAgLmdldE9uZVJlc291cmNlKFxuICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgYXBpOiB0aGlzLnJlc291cmNlLmRldGFpbENvbmZpZy5hcGksXG4gICAgICAgICAgICAgICAgcXVlcnlQYXJhbXM6IHBhcmFtcyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgaWRcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5zdWJzY3JpYmUoKHJlc3BvbnNlOiBhbnkpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgY29sdW5tczogYW55ID0ge307XG5cbiAgICAgICAgICAgICAgdGhpcy5lbnRpdHlJZCA9IHJlc3BvbnNlLmlkO1xuICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNvdXJjZS5kZXRhaWxDb25maWcudGFic0NvbmZpZyAmJlxuICAgICAgICAgICAgICAgIHRoaXMucmVzb3VyY2UuZGV0YWlsQ29uZmlnLnRhYnNDb25maWcubGVuZ3RoID4gMVxuICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzVGFic01lbnUgPSB0cnVlO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5yZXNvdXJjZS5kZXRhaWxDb25maWcudGFic0NvbmZpZy5mb3JFYWNoKCh0YWIpID0+IHtcbiAgICAgICAgICAgICAgICAgIHRoaXMudGFic05hbWUucHVzaCh0YWIubmFtZSk7XG4gICAgICAgICAgICAgICAgICBjb25zdCB0ZW1wID0ge307XG5cbiAgICAgICAgICAgICAgICAgIHRhYi5kYXRhcy5mb3JFYWNoKChlbHQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3Qgc2VhcmNoID0gdGhpcy5yZXNvdXJjZS5maWVsZHMuZmluZChcbiAgICAgICAgICAgICAgICAgICAgICAoZmllbGQpID0+IGZpZWxkLmxhYmVsID09PSBlbHRcbiAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoc2VhcmNoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgdGVtcFtzZWFyY2gubmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXN0RmllbGQ6IHNlYXJjaCxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHJlc3BvbnNlW3NlYXJjaC5sYWJlbF0sXG4gICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodGVtcFtzZWFyY2gubmFtZV0ucmVzdEZpZWxkLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFJFU1RfRklFTERfVFlQRVMuSEFTX01BTlk6XG4gICAgICAgICAgICAgICAgICAgICAgICAvKlByZW1pZXIgY2FzIHNpIGxlcyBjb25maWdzIG9udCBldGUgZGVmaW5pcyBkYW5zIGxlIGxpc3RDb25maWcgZXQgcmllbiBkYW5zIGxlIGRldGFpbENvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgIFByZW1pZXIgY2FzIHNpIGxlcyBjb25maWdzIG9udCBldGUgZGVmaW5pcyBkYW5zIGxlIGxpc3RDb25maWcgZXQgcmllbiBkYW5zIGxlIGRldGFpbENvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgIG9uIGNvbnNpZGVyZSBxdWUgbGVzIGNvbmZpZ3Mgc29udCBsZXMgbWVtZXNcbiAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wW3NlYXJjaC5uYW1lXS5yZXN0RmllbGQ/Lm1ldGFEYXRhPy5saXN0Q29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPy5yZXN0TWFueVJlc291cmNlcyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgICAhdGVtcFtzZWFyY2gubmFtZV0ucmVzdEZpZWxkPy5tZXRhRGF0YT8uZGV0YWlsQ29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPy5yZXN0TWFueVJlc291cmNlc1xuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKFwiWGEgbWUgY29uY2VybmVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKHRlbXBbc2VhcmNoLm5hbWVdKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wW3NlYXJjaC5uYW1lXS5kYXRhLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGVtcFtzZWFyY2gubmFtZV0/LnJlc3RGaWVsZD8ubWV0YURhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/Lmxpc3RDb25maWc/LnJlc3RNYW55UmVzb3VyY2VzLmxhYmVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBpdGVtW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wW3NlYXJjaC5uYW1lXS5yZXN0RmllbGQubWV0YURhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubGlzdENvbmZpZy5yZXN0TWFueVJlc291cmNlcy5sYWJlbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvd3NUID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGVtcFtzZWFyY2gubmFtZV0ucmVzdEZpZWxkLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlOiAnaGVhZGVyLXBsYWNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogZGF0YXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3REYXRhU291cmNlW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBbc2VhcmNoLm5hbWVdLnJlc3RGaWVsZC5uYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF0gPSB0aGlzLmRhdGFTb3VyY2VCdWlsZGVyLmNyZWF0ZShyb3dzVCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wW3NlYXJjaC5uYW1lXS5yZXN0RmllbGQ/Lm1ldGFEYXRhPy5kZXRhaWxDb25maWdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/LnJlc3RNYW55UmVzb3VyY2VzXG4gICAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuaXNPYmplY3QoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wW3NlYXJjaC5uYW1lXS5yZXN0RmllbGQ/Lm1ldGFEYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8uZGV0YWlsQ29uZmlnPy5yZXN0TWFueVJlc291cmNlc1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YXMgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBbc2VhcmNoLm5hbWVdLmRhdGEuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB0ZW1wW3NlYXJjaC5uYW1lXT8ucmVzdEZpZWxkPy5tZXRhRGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPy5kZXRhaWxDb25maWc/LnJlc3RNYW55UmVzb3VyY2VzLmxhYmVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGl0ZW1bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFtzZWFyY2gubmFtZV0ucmVzdEZpZWxkLm1ldGFEYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZGV0YWlsQ29uZmlnLnJlc3RNYW55UmVzb3VyY2VzLmxhYmVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCByb3dzVCA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHRlbXBbc2VhcmNoLm5hbWVdLnJlc3RGaWVsZC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlOiAnaGVhZGVyLXBsYWNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IGRhdGFzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0RGF0YVNvdXJjZVtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBbc2VhcmNoLm5hbWVdLnJlc3RGaWVsZC5uYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSA9IHRoaXMuZGF0YVNvdXJjZUJ1aWxkZXIuY3JlYXRlKHJvd3NUKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3REYXRhU291cmNlW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFtzZWFyY2gubmFtZV0ucmVzdEZpZWxkLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFtzZWFyY2gubmFtZV0uZGF0YS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3REYXRhU291cmNlW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wW3NlYXJjaC5uYW1lXS5yZXN0RmllbGQubmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2U6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFtzZWFyY2gubmFtZV0ucmVzdEZpZWxkPy5tZXRhRGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPy5kZXRhaWxDb25maWc/LnJlc3RNYW55UmVzb3VyY2VzLnJlc291cmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZU5hbWU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFtzZWFyY2gubmFtZV0ucmVzdEZpZWxkPy5tZXRhRGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPy5kZXRhaWxDb25maWc/LnJlc3RNYW55UmVzb3VyY2VzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVzb3VyY2VOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZDogZWxlbWVudD8uaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB0ZW1wW3NlYXJjaC5uYW1lXS5yZXN0RmllbGQ/Lm1ldGFEYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPy5kZXRhaWxDb25maWc/LnJlc3RNYW55UmVzb3VyY2VzLnN0eWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0ZW1wW3NlYXJjaC5uYW1lXS5yZXN0RmllbGQ/Lm1ldGFEYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8uZGV0YWlsQ29uZmlnLnJlc3RNYW55UmVzb3VyY2VzLnN0eWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICAgICAgY2FzZSBSRVNUX0ZJRUxEX1RZUEVTLkJFTE9OR19UT19NQU5ZOlxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlbXMgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFtzZWFyY2gubmFtZV0uZGF0YS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGl0ZW1bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBbc2VhcmNoLm5hbWVdLnJlc3RGaWVsZC5tZXRhRGF0YS5saXN0Q29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlc3RCZWxvbmdUb01hbnlSZXNvdXJjZXMubGFiZWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvd3NCZWxvbmdUb01hbnkgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB0ZW1wW3NlYXJjaC5uYW1lXS5yZXN0RmllbGQubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlOiAnaGVhZGVyLXBsYWNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBpdGVtcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3REYXRhU291cmNlW3RlbXBbc2VhcmNoLm5hbWVdLnJlc3RGaWVsZC5uYW1lXSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZUJ1aWxkZXIuY3JlYXRlKHJvd3NCZWxvbmdUb01hbnkpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjYXNlIFJFU1RfRklFTERfVFlQRVMuQkVMT05HX1RPOlxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGRhdCA9IHRoaXMuZ2V0QmVsb25nVG9TZWNvbmRGaWVsZChzZWFyY2gsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZWFyY2gpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFtzZWFyY2gubmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdEZpZWxkOiBzZWFyY2gsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogYCR7ZGF0fSAoJHtyZXNwb25zZVtzZWFyY2gubGFiZWxdfSlgLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNvbHVubXNbdGFiLm5hbWVdID0gdGVtcDtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YXMgPSBjb2x1bm1zO1xuICAgICAgICAgICAgICAgIHRoaXMuZGF0YXMxID0gY29sdW5tcztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc291cmNlLmZpZWxkcy5mb3JFYWNoKChlbHQpID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChlbHQudHlwZSA9PT0gUkVTVF9GSUVMRF9UWVBFUy5CRUxPTkdfVE8pIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRhdCA9IHRoaXMuZ2V0QmVsb25nVG9TZWNvbmRGaWVsZChlbHQsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgY29sdW5tc1tlbHQubmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmVzdEZpZWxkOiBlbHQsXG4gICAgICAgICAgICAgICAgICAgICAgZGF0YTogYCR7ZGF0fSAoJHtyZXNwb25zZVtlbHQubGFiZWxdfSlgLFxuICAgICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgY29sdW5tc1tlbHQubmFtZV0gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgcmVzdEZpZWxkOiBlbHQsXG4gICAgICAgICAgICAgICAgICAgICAgZGF0YTogcmVzcG9uc2VbZWx0LmxhYmVsXSxcbiAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFzID0gY29sdW5tcztcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHByb3BlcnR5IGluIHRoaXMuZGF0YXMpIHtcbiAgICAgICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXRhc1twcm9wZXJ0eV0ucmVzdEZpZWxkLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBSRVNUX0ZJRUxEX1RZUEVTLkhBU19NQU5ZOlxuICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YXNbcHJvcGVydHldLnJlc3RGaWVsZD8ubWV0YURhdGE/Lmxpc3RDb25maWdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPy5yZXN0TWFueVJlc291cmNlcyAmJlxuICAgICAgICAgICAgICAgICAgICAgICAgIXRoaXMuZGF0YXNbcHJvcGVydHldLnJlc3RGaWVsZD8ubWV0YURhdGE/LmRldGFpbENvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICA/LnJlc3RNYW55UmVzb3VyY2VzXG4gICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFzW3Byb3BlcnR5XS5kYXRhLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5kYXRhc1twcm9wZXJ0eV0/LnJlc3RGaWVsZD8ubWV0YURhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPy5saXN0Q29uZmlnPy5yZXN0TWFueVJlc291cmNlcy5sYWJlbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGl0ZW1bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFzW3Byb3BlcnR5XS5yZXN0RmllbGQubWV0YURhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLmxpc3RDb25maWcucmVzdE1hbnlSZXNvdXJjZXMubGFiZWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm93c1QgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLmRhdGFzW3Byb3BlcnR5XS5yZXN0RmllbGQubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlOiAnaGVhZGVyLXBsYWNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBkYXRhcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3REYXRhU291cmNlW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFzW3Byb3BlcnR5XS5yZXN0RmllbGQubmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgXSA9IHRoaXMuZGF0YVNvdXJjZUJ1aWxkZXIuY3JlYXRlKHJvd3NUKTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhc1twcm9wZXJ0eV0ucmVzdEZpZWxkPy5tZXRhRGF0YT8uZGV0YWlsQ29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICAgID8ucmVzdE1hbnlSZXNvdXJjZXNcbiAgICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc09iamVjdChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFzW3Byb3BlcnR5XS5yZXN0RmllbGQ/Lm1ldGFEYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/LmRldGFpbENvbmZpZz8ucmVzdE1hbnlSZXNvdXJjZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFzID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhc1twcm9wZXJ0eV0uZGF0YS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMuZGF0YXNbcHJvcGVydHldPy5yZXN0RmllbGQ/Lm1ldGFEYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPy5kZXRhaWxDb25maWc/LnJlc3RNYW55UmVzb3VyY2VzLmxhYmVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBpdGVtW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFzW3Byb3BlcnR5XS5yZXN0RmllbGQubWV0YURhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZGV0YWlsQ29uZmlnLnJlc3RNYW55UmVzb3VyY2VzLmxhYmVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBpdGVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgcm93c1QgPSBbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiB0aGlzLmRhdGFzW3Byb3BlcnR5XS5yZXN0RmllbGQubmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2U6ICdoZWFkZXItcGxhY2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNoaWxkcmVuOiBkYXRhcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdERhdGFTb3VyY2VbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhc1twcm9wZXJ0eV0ucmVzdEZpZWxkLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXSA9IHRoaXMuZGF0YVNvdXJjZUJ1aWxkZXIuY3JlYXRlKHJvd3NUKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubGlzdERhdGFTb3VyY2VbXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhc1twcm9wZXJ0eV0ucmVzdEZpZWxkLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXSA9IFtdO1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFzW3Byb3BlcnR5XS5kYXRhLmZvckVhY2goKGVsZW1lbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3REYXRhU291cmNlW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhc1twcm9wZXJ0eV0ucmVzdEZpZWxkLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBdLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2U6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YXNbcHJvcGVydHldLnJlc3RGaWVsZD8ubWV0YURhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/LmRldGFpbENvbmZpZz8ucmVzdE1hbnlSZXNvdXJjZXMucmVzb3VyY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZU5hbWU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YXNbcHJvcGVydHldLnJlc3RGaWVsZD8ubWV0YURhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/LmRldGFpbENvbmZpZz8ucmVzdE1hbnlSZXNvdXJjZXNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVzb3VyY2VOYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGVsZW1lbnQ/LmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHRoaXMuZGF0YXNbcHJvcGVydHldLnJlc3RGaWVsZD8ubWV0YURhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPy5kZXRhaWxDb25maWc/LnJlc3RNYW55UmVzb3VyY2VzLnN0eWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5kYXRhc1twcm9wZXJ0eV0ucmVzdEZpZWxkPy5tZXRhRGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPy5kZXRhaWxDb25maWcucmVzdE1hbnlSZXNvdXJjZXMuc3R5bGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiAnJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBSRVNUX0ZJRUxEX1RZUEVTLkJFTE9OR19UT19NQU5ZOlxuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFzW3Byb3BlcnR5XS5kYXRhLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW1zLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogaXRlbVtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YXNbcHJvcGVydHldLnJlc3RGaWVsZC5tZXRhRGF0YS5saXN0Q29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXN0QmVsb25nVG9NYW55UmVzb3VyY2VzLmxhYmVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCByb3dzQmVsb25nVG9NYW55ID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5kYXRhc1twcm9wZXJ0eV0ucmVzdEZpZWxkLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2U6ICdoZWFkZXItcGxhY2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogaXRlbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIF07XG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0RGF0YVNvdXJjZVt0aGlzLmRhdGFzW3Byb3BlcnR5XS5yZXN0RmllbGQubmFtZV0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlQnVpbGRlci5jcmVhdGUocm93c0JlbG9uZ1RvTWFueSk7XG4gICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG5cbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5zZXJ2aWNlUmVzdFxuICAgICAgICAuZ2V0T25lUmVzb3VyY2UoXG4gICAgICAgICAge1xuICAgICAgICAgICAgYXBpOiB0aGlzLnJlc291cmNlLmRldGFpbENvbmZpZy5hcGksXG4gICAgICAgICAgICBxdWVyeVBhcmFtczogdGhpcy5yZXNvdXJjZS5kZXRhaWxDb25maWcucXVlcnlQYXJhbXMsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBpZFxuICAgICAgICApXG4gICAgICAgIC5zdWJzY3JpYmUoKHJlc3BvbnNlOiBhbnkpID0+IHtcbiAgICAgICAgICBjb25zdCBjb2x1bm1zOiBhbnkgPSB7fTtcblxuICAgICAgICAgIHRoaXMuZW50aXR5SWQgPSByZXNwb25zZS5pZDtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB0aGlzLnJlc291cmNlLmRldGFpbENvbmZpZy50YWJzQ29uZmlnICYmXG4gICAgICAgICAgICB0aGlzLnJlc291cmNlLmRldGFpbENvbmZpZy50YWJzQ29uZmlnLmxlbmd0aCA+IDFcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuaXNUYWJzTWVudSA9IHRydWU7XG5cbiAgICAgICAgICAgIHRoaXMucmVzb3VyY2UuZGV0YWlsQ29uZmlnLnRhYnNDb25maWcuZm9yRWFjaCgodGFiKSA9PiB7XG4gICAgICAgICAgICAgIHRoaXMudGFic05hbWUucHVzaCh0YWIubmFtZSk7XG4gICAgICAgICAgICAgIGNvbnN0IHRlbXAgPSB7fTtcblxuICAgICAgICAgICAgICB0YWIuZGF0YXMuZm9yRWFjaCgoZWx0KSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VhcmNoID0gdGhpcy5yZXNvdXJjZS5maWVsZHMuZmluZChcbiAgICAgICAgICAgICAgICAgIChmaWVsZCkgPT4gZmllbGQubGFiZWwgPT09IGVsdFxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICBpZiAoc2VhcmNoKSB7XG4gICAgICAgICAgICAgICAgICB0ZW1wW3NlYXJjaC5uYW1lXSA9IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdEZpZWxkOiBzZWFyY2gsXG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IHJlc3BvbnNlW3NlYXJjaC5sYWJlbF0sXG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIHN3aXRjaCAodGVtcFtzZWFyY2gubmFtZV0ucmVzdEZpZWxkLnR5cGUpIHtcbiAgICAgICAgICAgICAgICAgIGNhc2UgUkVTVF9GSUVMRF9UWVBFUy5IQVNfTUFOWTpcbiAgICAgICAgICAgICAgICAgICAgLypQcmVtaWVyIGNhcyBzaSBsZXMgY29uZmlncyBvbnQgZXRlIGRlZmluaXMgZGFucyBsZSBsaXN0Q29uZmlnIGV0IHJpZW4gZGFucyBsZSBkZXRhaWxDb25maWdcbiAgICAgICAgICAgICAgICAgICAgUHJlbWllciBjYXMgc2kgbGVzIGNvbmZpZ3Mgb250IGV0ZSBkZWZpbmlzIGRhbnMgbGUgbGlzdENvbmZpZyBldCByaWVuIGRhbnMgbGUgZGV0YWlsQ29uZmlnXG4gICAgICAgICAgICAgICAgICAgIG9uIGNvbnNpZGVyZSBxdWUgbGVzIGNvbmZpZ3Mgc29udCBsZXMgbWVtZXNcbiAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgIHRlbXBbc2VhcmNoLm5hbWVdLnJlc3RGaWVsZD8ubWV0YURhdGE/Lmxpc3RDb25maWdcbiAgICAgICAgICAgICAgICAgICAgICAgID8ucmVzdE1hbnlSZXNvdXJjZXMgJiZcbiAgICAgICAgICAgICAgICAgICAgICAhdGVtcFtzZWFyY2gubmFtZV0ucmVzdEZpZWxkPy5tZXRhRGF0YT8uZGV0YWlsQ29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICA/LnJlc3RNYW55UmVzb3VyY2VzXG4gICAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGRhdGFzID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coXCJYYSBtZSBjb25jZXJuZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyh0ZW1wW3NlYXJjaC5uYW1lXSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICB0ZW1wW3NlYXJjaC5uYW1lXS5kYXRhLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFzLnB1c2goe1xuICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGVtcFtzZWFyY2gubmFtZV0/LnJlc3RGaWVsZD8ubWV0YURhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8ubGlzdENvbmZpZz8ucmVzdE1hbnlSZXNvdXJjZXMubGFiZWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gaXRlbVtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wW3NlYXJjaC5uYW1lXS5yZXN0RmllbGQubWV0YURhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5saXN0Q29uZmlnLnJlc3RNYW55UmVzb3VyY2VzLmxhYmVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCByb3dzVCA9IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHRlbXBbc2VhcmNoLm5hbWVdLnJlc3RGaWVsZC5uYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlOiAnaGVhZGVyLXBsYWNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgY2hpbGRyZW46IGRhdGFzLFxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0RGF0YVNvdXJjZVt0ZW1wW3NlYXJjaC5uYW1lXS5yZXN0RmllbGQubmFtZV0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhU291cmNlQnVpbGRlci5jcmVhdGUocm93c1QpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICAgICAgIHRlbXBbc2VhcmNoLm5hbWVdLnJlc3RGaWVsZD8ubWV0YURhdGE/LmRldGFpbENvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgICAgPy5yZXN0TWFueVJlc291cmNlc1xuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmlzT2JqZWN0KFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wW3NlYXJjaC5uYW1lXS5yZXN0RmllbGQ/Lm1ldGFEYXRhPy5kZXRhaWxDb25maWdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/LnJlc3RNYW55UmVzb3VyY2VzXG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wW3NlYXJjaC5uYW1lXS5kYXRhLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGVtcFtzZWFyY2gubmFtZV0/LnJlc3RGaWVsZD8ubWV0YURhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPy5kZXRhaWxDb25maWc/LnJlc3RNYW55UmVzb3VyY2VzLmxhYmVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gaXRlbVtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBbc2VhcmNoLm5hbWVdLnJlc3RGaWVsZC5tZXRhRGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuZGV0YWlsQ29uZmlnLnJlc3RNYW55UmVzb3VyY2VzLmxhYmVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IGl0ZW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvd3NUID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGVtcFtzZWFyY2gubmFtZV0ucmVzdEZpZWxkLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwbGFjZTogJ2hlYWRlci1wbGFjZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogZGF0YXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3REYXRhU291cmNlW3RlbXBbc2VhcmNoLm5hbWVdLnJlc3RGaWVsZC5uYW1lXSA9XG4gICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZUJ1aWxkZXIuY3JlYXRlKHJvd3NUKTtcbiAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0RGF0YVNvdXJjZVt0ZW1wW3NlYXJjaC5uYW1lXS5yZXN0RmllbGQubmFtZV0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgICBbXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBbc2VhcmNoLm5hbWVdLmRhdGEuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3REYXRhU291cmNlW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBbc2VhcmNoLm5hbWVdLnJlc3RGaWVsZC5uYW1lXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF0ucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2U6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wW3NlYXJjaC5uYW1lXS5yZXN0RmllbGQ/Lm1ldGFEYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8uZGV0YWlsQ29uZmlnPy5yZXN0TWFueVJlc291cmNlcy5yZXNvdXJjZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZU5hbWU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wW3NlYXJjaC5uYW1lXS5yZXN0RmllbGQ/Lm1ldGFEYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8uZGV0YWlsQ29uZmlnPy5yZXN0TWFueVJlc291cmNlcy5yZXNvdXJjZU5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGVsZW1lbnQ/LmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB0ZW1wW3NlYXJjaC5uYW1lXS5yZXN0RmllbGQ/Lm1ldGFEYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/LmRldGFpbENvbmZpZz8ucmVzdE1hbnlSZXNvdXJjZXMuc3R5bGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGVtcFtzZWFyY2gubmFtZV0ucmVzdEZpZWxkPy5tZXRhRGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8uZGV0YWlsQ29uZmlnLnJlc3RNYW55UmVzb3VyY2VzLnN0eWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgICBjYXNlIFJFU1RfRklFTERfVFlQRVMuQkVMT05HX1RPX01BTlk6XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gW107XG5cbiAgICAgICAgICAgICAgICAgICAgdGVtcFtzZWFyY2gubmFtZV0uZGF0YS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgaXRlbXMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGl0ZW1bXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcFtzZWFyY2gubmFtZV0ucmVzdEZpZWxkLm1ldGFEYXRhLmxpc3RDb25maWdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXN0QmVsb25nVG9NYW55UmVzb3VyY2VzLmxhYmVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICBjb25zdCByb3dzQmVsb25nVG9NYW55ID0gW1xuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGVtcFtzZWFyY2gubmFtZV0ucmVzdEZpZWxkLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlOiAnaGVhZGVyLXBsYWNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogaXRlbXMsXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0RGF0YVNvdXJjZVt0ZW1wW3NlYXJjaC5uYW1lXS5yZXN0RmllbGQubmFtZV0gPVxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZUJ1aWxkZXIuY3JlYXRlKHJvd3NCZWxvbmdUb01hbnkpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSBSRVNUX0ZJRUxEX1RZUEVTLkJFTE9OR19UTzpcbiAgICAgICAgICAgICAgICAgICAgbGV0IGRhdCA9IHRoaXMuZ2V0QmVsb25nVG9TZWNvbmRGaWVsZChzZWFyY2gsIHJlc3BvbnNlKTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNlYXJjaCkge1xuICAgICAgICAgICAgICAgICAgICAgIHRlbXBbc2VhcmNoLm5hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzdEZpZWxkOiBzZWFyY2gsXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiBgJHtkYXR9ICgke3Jlc3BvbnNlW3NlYXJjaC5sYWJlbF19KWAsXG4gICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgICAgY2FzZSBSRVNUX0ZJRUxEX1RZUEVTLlBERjpcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZmlsZSA9IHVybFRvRmlsZShcbiAgICAgICAgICAgICAgICAgICAgICByZXNwb25zZVtzZWFyY2gubGFiZWxdLFxuICAgICAgICAgICAgICAgICAgICAgIHNlYXJjaC5sYWJlbCxcbiAgICAgICAgICAgICAgICAgICAgICAncGRmJ1xuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmZpbGVzVXBsb2FkW3NlYXJjaC5sYWJlbF0gPSBmaWxlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjb2x1bm1zW3RhYi5uYW1lXSA9IHRlbXA7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmRhdGFzID0gY29sdW5tcztcbiAgICAgICAgICAgIHRoaXMuZGF0YXMxID0gY29sdW5tcztcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZXNvdXJjZS5maWVsZHMuZm9yRWFjaCgoZWx0KSA9PiB7XG4gICAgICAgICAgICAgIGlmIChlbHQudHlwZSA9PT0gUkVTVF9GSUVMRF9UWVBFUy5CRUxPTkdfVE8pIHtcbiAgICAgICAgICAgICAgICBsZXQgZGF0ID0gdGhpcy5nZXRCZWxvbmdUb1NlY29uZEZpZWxkKGVsdCwgcmVzcG9uc2UpO1xuICAgICAgICAgICAgICAgIGNvbHVubXNbZWx0Lm5hbWVdID0ge1xuICAgICAgICAgICAgICAgICAgcmVzdEZpZWxkOiBlbHQsXG4gICAgICAgICAgICAgICAgICBkYXRhOiBgJHtkYXR9ICgke3Jlc3BvbnNlW2VsdC5sYWJlbF19KWAsXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBjb2x1bm1zW2VsdC5uYW1lXSA9IHtcbiAgICAgICAgICAgICAgICAgIHJlc3RGaWVsZDogZWx0LFxuICAgICAgICAgICAgICAgICAgZGF0YTogcmVzcG9uc2VbZWx0LmxhYmVsXSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuZGF0YXMgPSBjb2x1bm1zO1xuICAgICAgICAgICAgZm9yIChjb25zdCBwcm9wZXJ0eSBpbiB0aGlzLmRhdGFzKSB7XG4gICAgICAgICAgICAgIHN3aXRjaCAodGhpcy5kYXRhc1twcm9wZXJ0eV0ucmVzdEZpZWxkLnR5cGUpIHtcbiAgICAgICAgICAgICAgICBjYXNlIFJFU1RfRklFTERfVFlQRVMuSEFTX01BTlk6XG4gICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YXNbcHJvcGVydHldLnJlc3RGaWVsZD8ubWV0YURhdGE/Lmxpc3RDb25maWdcbiAgICAgICAgICAgICAgICAgICAgICA/LnJlc3RNYW55UmVzb3VyY2VzICYmXG4gICAgICAgICAgICAgICAgICAgICF0aGlzLmRhdGFzW3Byb3BlcnR5XS5yZXN0RmllbGQ/Lm1ldGFEYXRhPy5kZXRhaWxDb25maWdcbiAgICAgICAgICAgICAgICAgICAgICA/LnJlc3RNYW55UmVzb3VyY2VzXG4gICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGF0YXMgPSBbXTtcblxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFzW3Byb3BlcnR5XS5kYXRhLmZvckVhY2goKGl0ZW0pID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5kYXRhc1twcm9wZXJ0eV0/LnJlc3RGaWVsZD8ubWV0YURhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/Lmxpc3RDb25maWc/LnJlc3RNYW55UmVzb3VyY2VzLmxhYmVsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBpdGVtW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFzW3Byb3BlcnR5XS5yZXN0RmllbGQubWV0YURhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubGlzdENvbmZpZy5yZXN0TWFueVJlc291cmNlcy5sYWJlbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvd3NUID0gW1xuICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5kYXRhc1twcm9wZXJ0eV0ucmVzdEZpZWxkLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlOiAnaGVhZGVyLXBsYWNlJyxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogZGF0YXMsXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgXTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0RGF0YVNvdXJjZVt0aGlzLmRhdGFzW3Byb3BlcnR5XS5yZXN0RmllbGQubmFtZV0gPVxuICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YVNvdXJjZUJ1aWxkZXIuY3JlYXRlKHJvd3NUKTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YXNbcHJvcGVydHldLnJlc3RGaWVsZD8ubWV0YURhdGE/LmRldGFpbENvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgID8ucmVzdE1hbnlSZXNvdXJjZXNcbiAgICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc09iamVjdChcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YXNbcHJvcGVydHldLnJlc3RGaWVsZD8ubWV0YURhdGE/LmRldGFpbENvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICA/LnJlc3RNYW55UmVzb3VyY2VzXG4gICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICBjb25zdCBkYXRhcyA9IFtdO1xuXG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhc1twcm9wZXJ0eV0uZGF0YS5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMuZGF0YXNbcHJvcGVydHldPy5yZXN0RmllbGQ/Lm1ldGFEYXRhXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/LmRldGFpbENvbmZpZz8ucmVzdE1hbnlSZXNvdXJjZXMubGFiZWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gaXRlbVtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFzW3Byb3BlcnR5XS5yZXN0RmllbGQubWV0YURhdGFcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5kZXRhaWxDb25maWcucmVzdE1hbnlSZXNvdXJjZXMubGFiZWxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBpdGVtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJvd3NUID0gW1xuICAgICAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5kYXRhc1twcm9wZXJ0eV0ucmVzdEZpZWxkLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2U6ICdoZWFkZXItcGxhY2UnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogZGF0YXMsXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgIF07XG5cbiAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3REYXRhU291cmNlW3RoaXMuZGF0YXNbcHJvcGVydHldLnJlc3RGaWVsZC5uYW1lXSA9XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFTb3VyY2VCdWlsZGVyLmNyZWF0ZShyb3dzVCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5saXN0RGF0YVNvdXJjZVt0aGlzLmRhdGFzW3Byb3BlcnR5XS5yZXN0RmllbGQubmFtZV0gPVxuICAgICAgICAgICAgICAgICAgICAgICAgW107XG4gICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhc1twcm9wZXJ0eV0uZGF0YS5mb3JFYWNoKChlbGVtZW50KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3REYXRhU291cmNlW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFzW3Byb3BlcnR5XS5yZXN0RmllbGQubmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgXS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb3VyY2U6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhc1twcm9wZXJ0eV0ucmVzdEZpZWxkPy5tZXRhRGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPy5kZXRhaWxDb25maWc/LnJlc3RNYW55UmVzb3VyY2VzLnJlc291cmNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvdXJjZU5hbWU6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kYXRhc1twcm9wZXJ0eV0ucmVzdEZpZWxkPy5tZXRhRGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPy5kZXRhaWxDb25maWc/LnJlc3RNYW55UmVzb3VyY2VzLnJlc291cmNlTmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaWQ6IGVsZW1lbnQ/LmlkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzdHlsZTogdGhpcy5kYXRhc1twcm9wZXJ0eV0ucmVzdEZpZWxkPy5tZXRhRGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8uZGV0YWlsQ29uZmlnPy5yZXN0TWFueVJlc291cmNlcy5zdHlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gdGhpcy5kYXRhc1twcm9wZXJ0eV0ucmVzdEZpZWxkPy5tZXRhRGF0YVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/LmRldGFpbENvbmZpZy5yZXN0TWFueVJlc291cmNlcy5zdHlsZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogJycsXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBicmVhaztcblxuICAgICAgICAgICAgICAgIGNhc2UgUkVTVF9GSUVMRF9UWVBFUy5CRUxPTkdfVE9fTUFOWTpcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZW1zID0gW107XG5cbiAgICAgICAgICAgICAgICAgIHRoaXMuZGF0YXNbcHJvcGVydHldLmRhdGEuZm9yRWFjaCgoaXRlbSkgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpdGVtcy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBpdGVtW1xuICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFzW3Byb3BlcnR5XS5yZXN0RmllbGQubWV0YURhdGEubGlzdENvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXN0QmVsb25nVG9NYW55UmVzb3VyY2VzLmxhYmVsXG4gICAgICAgICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbSxcbiAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICBjb25zdCByb3dzQmVsb25nVG9NYW55ID0gW1xuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogdGhpcy5kYXRhc1twcm9wZXJ0eV0ucmVzdEZpZWxkLm5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZTogJ2hlYWRlci1wbGFjZScsXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICBjaGlsZHJlbjogaXRlbXMsXG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgdGhpcy5saXN0RGF0YVNvdXJjZVt0aGlzLmRhdGFzW3Byb3BlcnR5XS5yZXN0RmllbGQubmFtZV0gPVxuICAgICAgICAgICAgICAgICAgICB0aGlzLmRhdGFTb3VyY2VCdWlsZGVyLmNyZWF0ZShyb3dzQmVsb25nVG9NYW55KTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBlZGl0RW50aXR5KCkge1xuICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFtgL2FkbWluLyR7dGhpcy5yZXNzb3VyY2VOYW1lfS1lZGl0YCwgdGhpcy5lbnRpdHlJZF0pO1xuICB9XG5cbiAgbGlzdEVudGl0eSgpIHtcbiAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZUJ5VXJsKGAvYWRtaW4vJHt0aGlzLnJlc3NvdXJjZU5hbWV9LWxpc3RgKTtcbiAgfVxuXG4gIGdldCBSRVNUX0ZJRUxEX1RZUEVTKCkge1xuICAgIHJldHVybiBSRVNUX0ZJRUxEX1RZUEVTO1xuICB9XG5cbiAgLy9JbWFnZSBpbnB1dFxuICBvblNlbGVjdChldmVudCkge31cblxuICBvblJlbW92ZShmaWVsZCkge31cblxuICBsb2FkQmVsb25nVG9EZXRhaWwoZGF0YSkge1xuICAgIGNvbnN0IHJlc291cmNlTmFtZSA9XG4gICAgICBkYXRhLnJlc3RGaWVsZC5tZXRhRGF0YS5hZGRDb25maWcuYmVsb25nVG9PcHRpb25zLnJlc291cmNlTmFtZTtcblxuICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFtgL2FkbWluLyR7cmVzb3VyY2VOYW1lfS1kZXRhaWxgLCBkYXRhLmRhdGFdKTtcbiAgfVxuXG4gIGlzT2JqZWN0ID0gKGEpID0+IHtcbiAgICBsZXQgaXNPYmplY3QgPSBmYWxzZTtcbiAgICBpZiAoYS5tZXRhRGF0YSkgaXNPYmplY3QgPSB0cnVlO1xuICAgIGlmIChhLnR5cGUpIGlzT2JqZWN0ID0gdHJ1ZTtcbiAgICBpZiAoYS50ZW1wbGF0ZSkgaXNPYmplY3QgPSB0cnVlO1xuICAgIGlmIChhLmluRm9ybSkgaXNPYmplY3QgPSB0cnVlO1xuXG4gICAgcmV0dXJuIGlzT2JqZWN0O1xuICB9O1xuXG4gIGlzQXJyYXkgPSAoYSkgPT4ge1xuICAgIHJldHVybiAhIWEgJiYgYS5jb25zdHJ1Y3RvciA9PT0gQXJyYXk7XG4gIH07XG5cbiAgZ2V0QmVsb25nVG9TZWNvbmRGaWVsZCA9IChlbHQsIHJlc3BvbnNlKSA9PiB7XG4gICAgY29uc3QgYmVsb25nVmFsID1cbiAgICAgIGAke2VsdC5tZXRhRGF0YT8uYWRkQ29uZmlnPy5iZWxvbmdUb09wdGlvbnM/LnJlc291cmNlTmFtZX0uJHtlbHQubWV0YURhdGE/LmJlbG9uZ1RvU2Vjb25kRmllbGRMYWJlbH1gLnNwbGl0KFxuICAgICAgICAnLidcbiAgICAgICk7XG4gICAgbGV0IGRhdCA9IHJlc3BvbnNlO1xuICAgIGlmIChiZWxvbmdWYWwgJiYgYmVsb25nVmFsPy5sZW5ndGggPiAwKSB7XG4gICAgICBiZWxvbmdWYWwuZm9yRWFjaCgodmFsKSA9PiB7XG4gICAgICAgIGlmIChkYXRbdmFsXSkge1xuICAgICAgICAgIGRhdCA9IGRhdFt2YWxdO1xuICAgICAgICB9IGVsc2UgZGF0ID0gJyc7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZGF0ID0gJyc7XG4gICAgfVxuICAgIHJldHVybiBkYXQ7XG4gIH07XG5cbiAganNvblZhbHVlID0gKHZhbCkgPT4ge1xuICAgIGxldCBfanNvblZhbHVlOiBhbnk7XG4gICAgaWYgKHZhbC5yZXN0RmllbGQuaTE4biA9PSB0cnVlKSB7XG4gICAgICBpZiAodmFsLmRhdGFbMF0gPT0gJ3snKVxuICAgICAgICBfanNvblZhbHVlID0gSlNPTi5wYXJzZSh2YWwuZGF0YSlbdGhpcy5sYW5nU2VydmljZS5zZWxlY3RlZF07XG4gICAgICBlbHNlIGlmICh0eXBlb2YgdmFsLmRhdGEgIT09ICdzdHJpbmcnKVxuICAgICAgICBfanNvblZhbHVlID0gdmFsLmRhdGFbdGhpcy5sYW5nU2VydmljZS5zZWxlY3RlZF07XG4gICAgICBlbHNlIF9qc29uVmFsdWUgPSB2YWwuZGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgX2pzb25WYWx1ZSA9IHZhbC5kYXRhO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgdmFsLmRhdGEgPT0gJ29iamVjdCcpIHJldHVybiBKU09OLnN0cmluZ2lmeShfanNvblZhbHVlKTtcbiAgICBlbHNlIHJldHVybiBfanNvblZhbHVlO1xuICB9O1xufVxuIiwiPG5iLWNhcmQgW3N0eWxlXT1cInN0eWxlID8gc3R5bGUgOiAnJ1wiPlxuICA8bmItY2FyZC1oZWFkZXIgKm5nSWY9XCIhY29udGFpbmVyXCI+XG4gICAge3sgcmVzb3VyY2UuZGV0YWlsQ29uZmlnPy50aXRsZSB8IHRpdGxlY2FzZSB9fVxuICA8L25iLWNhcmQtaGVhZGVyPlxuICA8bmItY2FyZC1ib2R5PlxuICAgIDxuYi1saXN0ICpuZ0lmPVwiIWlzVGFic01lbnU7IGVsc2UgdGFic0NvbnRlbnRcIj5cbiAgICAgIDxuYi1saXN0LWl0ZW1cbiAgICAgICAgKm5nRm9yPVwibGV0IGl0ZW0gb2YgZGF0YXMgfCBrZXl2YWx1ZVwiXG4gICAgICAgIGNsYXNzPVwicmVzdC1pdGVtLWFsaWduXCJcbiAgICAgID5cbiAgICAgICAgPCEtLSBzdHlsZT1cImRpc3BsYXk6IGJsb2NrXCIgLS0+XG4gICAgICAgIDxuZy1jb250YWluZXJcbiAgICAgICAgICAqbmdJZj1cIlxuICAgICAgICAgICAgaXRlbS52YWx1ZS5yZXN0RmllbGQudHlwZSA9PSBSRVNUX0ZJRUxEX1RZUEVTLlRFWFQgfHxcbiAgICAgICAgICAgIGl0ZW0udmFsdWUucmVzdEZpZWxkLnR5cGUgPT0gUkVTVF9GSUVMRF9UWVBFUy5TVFJJTkcgfHxcbiAgICAgICAgICAgIGl0ZW0udmFsdWUucmVzdEZpZWxkLnR5cGUgPT0gUkVTVF9GSUVMRF9UWVBFUy5OVU1CRVIgfHxcbiAgICAgICAgICAgIGl0ZW0udmFsdWUucmVzdEZpZWxkLnR5cGUgPT0gUkVTVF9GSUVMRF9UWVBFUy5FTlVNXG4gICAgICAgICAgXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCIhaXRlbS52YWx1ZS5yZXN0RmllbGQudGVtcGxhdGVcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJcIj5cbiAgICAgICAgICAgICAgPGI+e3sgaXRlbS5rZXkgfCB0aXRsZWNhc2UgfX06IDwvYj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIlwiPlxuICAgICAgICAgICAgICB7eyBpdGVtLnZhbHVlLmRhdGEgfX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuXG4gICAgICAgICAgPGRpdiAqbmdJZj1cIml0ZW0udmFsdWUucmVzdEZpZWxkLnRlbXBsYXRlXCI+XG4gICAgICAgICAgICA8Y25nLWh0bWwtY29tcGlsZXJcbiAgICAgICAgICAgICAgW3RlbXBsYXRlXT1cIml0ZW0udmFsdWUucmVzdEZpZWxkLnRlbXBsYXRlXCJcbiAgICAgICAgICAgICAgW2NvbXBvbmVudENsYXNzXT1cIml0ZW0udmFsdWUuZGF0YVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICA8L2NuZy1odG1sLWNvbXBpbGVyPlxuICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cblxuICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiaXRlbS52YWx1ZS5yZXN0RmllbGQudHlwZSA9PSBSRVNUX0ZJRUxEX1RZUEVTLlBERlwiPlxuICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCIhaXRlbS52YWx1ZS5yZXN0RmllbGQudGVtcGxhdGVcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJcIj5cbiAgICAgICAgICAgICAgPGI+e3sgaXRlbS5rZXkgfCB0aXRsZWNhc2UgfX06IDwvYj5cbiAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiIWl0ZW0udmFsdWUucmVzdEZpZWxkLnRlbXBsYXRlXCI+XG4gICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJcIj5cbiAgICAgICAgICAgICAgICA8Yj57eyBpdGVtLmtleSB8IHRpdGxlY2FzZSB9fTogPC9iPlxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIlwiPlxuICAgICAgICAgICAgICAgIHt7IGl0ZW0udmFsdWUuZGF0YSB9fVxuICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIlwiPlxuICAgICAgICAgICAgICAgIDxuZ3gtZHJvcHpvbmUgKGNoYW5nZSk9XCJvblNlbGVjdCgkZXZlbnQpXCI+XG4gICAgICAgICAgICAgICAgICA8bmd4LWRyb3B6b25lLXByZXZpZXdcbiAgICAgICAgICAgICAgICAgICAgW3JlbW92YWJsZV09XCJ0cnVlXCJcbiAgICAgICAgICAgICAgICAgICAgKHJlbW92ZWQpPVwib25SZW1vdmUoZmlsZXNVcGxvYWRbaXRlbS5rZXldKVwiXG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxuZ3gtZHJvcHpvbmUtbGFiZWxcbiAgICAgICAgICAgICAgICAgICAgICA+e3sgaXRlbT8udmFsdWU/LmRhdGEgfX0gKHt7XG4gICAgICAgICAgICAgICAgICAgICAgICAncGRmJ1xuICAgICAgICAgICAgICAgICAgICAgIH19KTwvbmd4LWRyb3B6b25lLWxhYmVsXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDwvbmd4LWRyb3B6b25lLXByZXZpZXc+XG4gICAgICAgICAgICAgICAgPC9uZ3gtZHJvcHpvbmU+XG4gICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIml0ZW0udmFsdWUucmVzdEZpZWxkLnRlbXBsYXRlXCI+XG4gICAgICAgICAgICA8Y25nLWh0bWwtY29tcGlsZXJcbiAgICAgICAgICAgICAgW3RlbXBsYXRlXT1cIml0ZW0udmFsdWUucmVzdEZpZWxkLnRlbXBsYXRlXCJcbiAgICAgICAgICAgICAgW2NvbXBvbmVudENsYXNzXT1cImpzb25WYWx1ZShpdGVtLnZhbHVlKVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICA8L2NuZy1odG1sLWNvbXBpbGVyPlxuICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cblxuICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgKm5nSWY9XCJpdGVtLnZhbHVlLnJlc3RGaWVsZC50eXBlID09IFJFU1RfRklFTERfVFlQRVMuQ09MT1JcIlxuICAgICAgICA+XG4gICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiFpdGVtLnZhbHVlLnJlc3RGaWVsZC50ZW1wbGF0ZVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIlwiPlxuICAgICAgICAgICAgICA8Yj57eyBpdGVtLmtleSB8IHRpdGxlY2FzZSB9fTogPC9iPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiXCI+XG4gICAgICAgICAgICAgIHt7IGl0ZW0udmFsdWUuZGF0YSB9fVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgIGNsYXNzPVwidGV4dC1jZW50ZXIgY29sb3ItY2FyZFwiXG4gICAgICAgICAgICAgIFtzdHlsZS5iYWNrZ3JvdW5kLWNvbG9yXT1cIml0ZW0udmFsdWUuZGF0YVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIDxuZy1jb250YWluZXI+e3sgaXRlbS52YWx1ZS5kYXRhIH19PC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cblxuICAgICAgICAgIDxkaXYgKm5nSWY9XCJpdGVtLnZhbHVlLnJlc3RGaWVsZC50ZW1wbGF0ZVwiPlxuICAgICAgICAgICAgPGNuZy1odG1sLWNvbXBpbGVyXG4gICAgICAgICAgICAgIFt0ZW1wbGF0ZV09XCJpdGVtLnZhbHVlLnJlc3RGaWVsZC50ZW1wbGF0ZVwiXG4gICAgICAgICAgICAgIFtjb21wb25lbnRDbGFzc109XCJpdGVtLnZhbHVlLmRhdGFcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgPC9jbmctaHRtbC1jb21waWxlcj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9uZy1jb250YWluZXI+XG5cbiAgICAgICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAgICpuZ0lmPVwiaXRlbS52YWx1ZS5yZXN0RmllbGQudHlwZSA9PSBSRVNUX0ZJRUxEX1RZUEVTLkpTT05cIlxuICAgICAgICA+XG4gICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiFpdGVtLnZhbHVlLnJlc3RGaWVsZC50ZW1wbGF0ZVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIlwiPlxuICAgICAgICAgICAgICA8Yj57eyBpdGVtLmtleSB8IHRpdGxlY2FzZSB9fTogPC9iPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiXCI+XG4gICAgICAgICAgICAgIHt7IGpzb25WYWx1ZShpdGVtLnZhbHVlKSB9fVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIml0ZW0udmFsdWUucmVzdEZpZWxkLnRlbXBsYXRlXCI+XG4gICAgICAgICAgICA8Y25nLWh0bWwtY29tcGlsZXJcbiAgICAgICAgICAgICAgW3RlbXBsYXRlXT1cIml0ZW0udmFsdWUucmVzdEZpZWxkLnRlbXBsYXRlXCJcbiAgICAgICAgICAgICAgW2NvbXBvbmVudENsYXNzXT1cImpzb25WYWx1ZShpdGVtLnZhbHVlKVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICA8L2NuZy1odG1sLWNvbXBpbGVyPlxuICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cblxuICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgKm5nSWY9XCJpdGVtLnZhbHVlLnJlc3RGaWVsZC50eXBlID09IFJFU1RfRklFTERfVFlQRVMuQk9PTEVBTlwiXG4gICAgICAgID5cbiAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiIWl0ZW0udmFsdWUucmVzdEZpZWxkLnRlbXBsYXRlXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiXCI+XG4gICAgICAgICAgICAgIDxiPnt7IGl0ZW0ua2V5IHwgdGl0bGVjYXNlIH19OiA8L2I+XG4gICAgICAgICAgICA8L2Rpdj5cblxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIlwiPlxuICAgICAgICAgICAgICA8bmItY2hlY2tib3hcbiAgICAgICAgICAgICAgICBbY2hlY2tlZF09XCJpdGVtLnZhbHVlLmRhdGFcIlxuICAgICAgICAgICAgICAgIFtkaXNhYmxlZF09XCJ0cnVlXCJcbiAgICAgICAgICAgICAgPjwvbmItY2hlY2tib3g+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cblxuICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJpdGVtLnZhbHVlLnJlc3RGaWVsZC50ZW1wbGF0ZVwiPlxuICAgICAgICAgICAgPGNuZy1odG1sLWNvbXBpbGVyXG4gICAgICAgICAgICAgIFt0ZW1wbGF0ZV09XCJpdGVtLnZhbHVlLnJlc3RGaWVsZC50ZW1wbGF0ZVwiXG4gICAgICAgICAgICAgIFtjb21wb25lbnRDbGFzc109XCJpdGVtLnZhbHVlLmRhdGFcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgPC9jbmctaHRtbC1jb21waWxlcj5cbiAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgPC9uZy1jb250YWluZXI+XG5cbiAgICAgICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAgICpuZ0lmPVwiaXRlbS52YWx1ZS5yZXN0RmllbGQudHlwZSA9PSBSRVNUX0ZJRUxEX1RZUEVTLklNQUdFXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCIhaXRlbS52YWx1ZS5yZXN0RmllbGQudGVtcGxhdGVcIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJcIj5cbiAgICAgICAgICAgICAgPGI+e3sgaXRlbS5rZXkgfCB0aXRsZWNhc2UgfX06IDwvYj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIlwiPlxuICAgICAgICAgICAgICA8aW1nXG4gICAgICAgICAgICAgICAgY2xhc3M9XCJyZXN0LWltZ1wiXG4gICAgICAgICAgICAgICAgW3NyY109XCJpdGVtLnZhbHVlLmRhdGFcIlxuICAgICAgICAgICAgICAgIGFsdD1cIlwiXG4gICAgICAgICAgICAgICAgW3N0eWxlXT1cInN0eWxlXCJcbiAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJpdGVtLnZhbHVlLnJlc3RGaWVsZC50ZW1wbGF0ZVwiPlxuICAgICAgICAgICAgPGNuZy1odG1sLWNvbXBpbGVyXG4gICAgICAgICAgICAgIFt0ZW1wbGF0ZV09XCJpdGVtLnZhbHVlLnJlc3RGaWVsZC50ZW1wbGF0ZVwiXG4gICAgICAgICAgICAgIFtjb21wb25lbnRDbGFzc109XCJpdGVtLnZhbHVlLmRhdGFcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgPC9jbmctaHRtbC1jb21waWxlcj5cbiAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgPC9uZy1jb250YWluZXI+XG5cbiAgICAgICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAgICpuZ0lmPVwiaXRlbS52YWx1ZS5yZXN0RmllbGQudHlwZSA9PSBSRVNUX0ZJRUxEX1RZUEVTLkRBVEVcIlxuICAgICAgICA+XG4gICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiFpdGVtLnZhbHVlLnJlc3RGaWVsZC50ZW1wbGF0ZVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIlwiPlxuICAgICAgICAgICAgICA8Yj57eyBpdGVtLmtleSB8IHRpdGxlY2FzZSB9fTogPC9iPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiXCI+XG4gICAgICAgICAgICAgIHt7IGl0ZW0udmFsdWUuZGF0YSB8IGRhdGUgfX1cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCJpdGVtLnZhbHVlLnJlc3RGaWVsZC50ZW1wbGF0ZVwiPlxuICAgICAgICAgICAgPGNuZy1odG1sLWNvbXBpbGVyXG4gICAgICAgICAgICAgIFt0ZW1wbGF0ZV09XCJpdGVtLnZhbHVlLnJlc3RGaWVsZC50ZW1wbGF0ZVwiXG4gICAgICAgICAgICAgIFtjb21wb25lbnRDbGFzc109XCJpdGVtLnZhbHVlLmRhdGFcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgPC9jbmctaHRtbC1jb21waWxlcj5cbiAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgPC9uZy1jb250YWluZXI+XG5cbiAgICAgICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAgICpuZ0lmPVwiaXRlbS52YWx1ZS5yZXN0RmllbGQudHlwZSA9PSBSRVNUX0ZJRUxEX1RZUEVTLkJFTE9OR19UT1wiXG4gICAgICAgID5cbiAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiIWl0ZW0udmFsdWUucmVzdEZpZWxkLnRlbXBsYXRlXCI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiXCI+XG4gICAgICAgICAgICAgIDxiPnt7IGl0ZW0udmFsdWUucmVzdEZpZWxkLmxhYmVsIHwgdGl0bGVjYXNlIH19OiA8L2I+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJcIj5cbiAgICAgICAgICAgICAgPGFcbiAgICAgICAgICAgICAgICAoY2xpY2spPVwibG9hZEJlbG9uZ1RvRGV0YWlsKGl0ZW0udmFsdWUpXCJcbiAgICAgICAgICAgICAgICBuYlRvb2x0aXA9XCJ7eyAncmVzdC1kZXRhaWwuYmVsb25nVG9SZWYnIHwgdHJhbnNsYXRlIH19XCJcbiAgICAgICAgICAgICAgICBuYlRvb2x0aXBQbGFjZW1lbnQ9XCJ0b3BcIlxuICAgICAgICAgICAgICAgIGNsYXNzPVwiYmVsb25nVG8tbGlua1wiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7eyBpdGVtLnZhbHVlLmRhdGEgfX1cbiAgICAgICAgICAgICAgPC9hPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIml0ZW0udmFsdWUucmVzdEZpZWxkLnRlbXBsYXRlXCI+XG4gICAgICAgICAgICA8Y25nLWh0bWwtY29tcGlsZXJcbiAgICAgICAgICAgICAgW3RlbXBsYXRlXT1cIml0ZW0udmFsdWUucmVzdEZpZWxkLnRlbXBsYXRlXCJcbiAgICAgICAgICAgICAgW2NvbXBvbmVudENsYXNzXT1cIml0ZW0udmFsdWUuZGF0YVwiXG4gICAgICAgICAgICA+XG4gICAgICAgICAgICA8L2NuZy1odG1sLWNvbXBpbGVyPlxuICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cblxuICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgKm5nSWY9XCJpdGVtLnZhbHVlLnJlc3RGaWVsZC50eXBlID09IFJFU1RfRklFTERfVFlQRVMuSEFTX01BTllcIlxuICAgICAgICA+XG4gICAgICAgICAgPCEtLSBDQVMgMSAtLT5cbiAgICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgICAqbmdJZj1cIlxuICAgICAgICAgICAgICBpdGVtLnZhbHVlLnJlc3RGaWVsZD8ubWV0YURhdGE/Lmxpc3RDb25maWc/LnJlc3RNYW55UmVzb3VyY2VzICYmXG4gICAgICAgICAgICAgICFpdGVtLnZhbHVlLnJlc3RGaWVsZD8ubWV0YURhdGE/LmRldGFpbENvbmZpZz8ucmVzdE1hbnlSZXNvdXJjZXNcbiAgICAgICAgICAgIFwiXG4gICAgICAgICAgPlxuICAgICAgICAgICAgPHRhYmxlIFtuYlRyZWVHcmlkXT1cImxpc3REYXRhU291cmNlW2l0ZW0ua2V5XVwiPlxuICAgICAgICAgICAgICA8dHJcbiAgICAgICAgICAgICAgICBuYlRyZWVHcmlkUm93XG4gICAgICAgICAgICAgICAgKm5iVHJlZUdyaWRSb3dEZWY9XCJsZXQgcm93OyBjb2x1bW5zOiBhbGxDb2x1bW5zXCJcbiAgICAgICAgICAgICAgPjwvdHI+XG5cbiAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciBbbmJUcmVlR3JpZENvbHVtbkRlZl09XCJjdXN0b21Db2x1bW5cIj5cbiAgICAgICAgICAgICAgICA8dGQgbmJUcmVlR3JpZENlbGwgKm5iVHJlZUdyaWRDZWxsRGVmPVwibGV0IHJvd1wiPlxuICAgICAgICAgICAgICAgICAgPG5neC1mcy1pY29uXG4gICAgICAgICAgICAgICAgICAgIFtleHBhbmRlZF09XCJyb3cuZXhwYW5kZWRcIlxuICAgICAgICAgICAgICAgICAgICBbcGxhY2VdPVwicm93LmRhdGEucGxhY2VcIlxuICAgICAgICAgICAgICAgICAgPjwvbmd4LWZzLWljb24+XG4gICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgICpuZ0lmPVwiXG4gICAgICAgICAgICAgICAgICAgICAgIWl0ZW0udmFsdWUucmVzdEZpZWxkPy5tZXRhRGF0YT8ubGlzdENvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgICAgPy5yZXN0TWFueVJlc291cmNlcy50ZW1wbGF0ZVxuICAgICAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICA8Yj4ge3sgcm93LmRhdGFbY3VzdG9tQ29sdW1uXSB9fTwvYj5cbiAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuXG4gICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgICpuZ0lmPVwiXG4gICAgICAgICAgICAgICAgICAgICAgaXRlbS52YWx1ZS5yZXN0RmllbGQ/Lm1ldGFEYXRhPy5saXN0Q29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICA/LnJlc3RNYW55UmVzb3VyY2VzLnRlbXBsYXRlXG4gICAgICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDxzcGFuICpuZ0lmPVwicm93LmRhdGEucGxhY2VcIj5cbiAgICAgICAgICAgICAgICAgICAgICB7eyBpdGVtLnZhbHVlLnJlc3RGaWVsZC5uYW1lIH19PC9zcGFuXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiFyb3cuZGF0YS5wbGFjZVwiPlxuICAgICAgICAgICAgICAgICAgICAgIDxjbmctaHRtbC1jb21waWxlclxuICAgICAgICAgICAgICAgICAgICAgICAgW3RlbXBsYXRlXT1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnZhbHVlLnJlc3RGaWVsZC5tZXRhRGF0YS5saXN0Q29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlc3RNYW55UmVzb3VyY2VzLnRlbXBsYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgW2NvbXBvbmVudENsYXNzXT1cInJvdy5kYXRhLml0ZW1cIlxuICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICA8L2NuZy1odG1sLWNvbXBpbGVyPlxuICAgICAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cblxuICAgICAgICAgIDwhLS0gQ0FTIDIgLS0+XG4gICAgICAgICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAgICAgKm5nSWY9XCJcbiAgICAgICAgICAgICAgaXRlbS52YWx1ZS5yZXN0RmllbGQ/Lm1ldGFEYXRhPy5kZXRhaWxDb25maWc/LnJlc3RNYW55UmVzb3VyY2VzXG4gICAgICAgICAgICBcIlxuICAgICAgICAgID5cbiAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgKm5nSWY9XCJcbiAgICAgICAgICAgICAgICBpc09iamVjdChcbiAgICAgICAgICAgICAgICAgIGl0ZW0udmFsdWUucmVzdEZpZWxkLm1ldGFEYXRhLmRldGFpbENvbmZpZy5yZXN0TWFueVJlc291cmNlc1xuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgZWxzZSBjYXMyMVxuICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICA8dGFibGUgW25iVHJlZUdyaWRdPVwibGlzdERhdGFTb3VyY2VbaXRlbS5rZXldXCI+XG4gICAgICAgICAgICAgICAgPHRyXG4gICAgICAgICAgICAgICAgICBuYlRyZWVHcmlkUm93XG4gICAgICAgICAgICAgICAgICAqbmJUcmVlR3JpZFJvd0RlZj1cImxldCByb3c7IGNvbHVtbnM6IGFsbENvbHVtbnNcIlxuICAgICAgICAgICAgICAgID48L3RyPlxuXG4gICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciBbbmJUcmVlR3JpZENvbHVtbkRlZl09XCJjdXN0b21Db2x1bW5cIj5cbiAgICAgICAgICAgICAgICAgIDx0ZCBuYlRyZWVHcmlkQ2VsbCAqbmJUcmVlR3JpZENlbGxEZWY9XCJsZXQgcm93XCI+XG4gICAgICAgICAgICAgICAgICAgIDxuZ3gtZnMtaWNvblxuICAgICAgICAgICAgICAgICAgICAgIFtleHBhbmRlZF09XCJyb3cuZXhwYW5kZWRcIlxuICAgICAgICAgICAgICAgICAgICAgIFtwbGFjZV09XCJyb3cuZGF0YS5wbGFjZVwiXG4gICAgICAgICAgICAgICAgICAgID48L25neC1mcy1pY29uPlxuICAgICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgICAgKm5nSWY9XCJcbiAgICAgICAgICAgICAgICAgICAgICAgICFpdGVtLnZhbHVlLnJlc3RGaWVsZC5tZXRhRGF0YS5kZXRhaWxDb25maWdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlc3RNYW55UmVzb3VyY2VzPy50ZW1wbGF0ZVxuICAgICAgICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICA8Yj4ge3sgcm93LmRhdGFbY3VzdG9tQ29sdW1uXSB9fTwvYj5cbiAgICAgICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG5cbiAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICAgICpuZ0lmPVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnZhbHVlLnJlc3RGaWVsZC5tZXRhRGF0YS5kZXRhaWxDb25maWdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlc3RNYW55UmVzb3VyY2VzPy50ZW1wbGF0ZVxuICAgICAgICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICA8c3BhbiAqbmdJZj1cInJvdy5kYXRhLnBsYWNlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICB7eyBpdGVtLnZhbHVlLnJlc3RGaWVsZC5uYW1lIH19PC9zcGFuXG4gICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCIhcm93LmRhdGEucGxhY2VcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxjbmctaHRtbC1jb21waWxlclxuICAgICAgICAgICAgICAgICAgICAgICAgICBbdGVtcGxhdGVdPVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS52YWx1ZS5yZXN0RmllbGQubWV0YURhdGEuZGV0YWlsQ29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVzdE1hbnlSZXNvdXJjZXMudGVtcGxhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgW2NvbXBvbmVudENsYXNzXT1cInJvdy5kYXRhLml0ZW1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgPC9jbmctaHRtbC1jb21waWxlcj5cbiAgICAgICAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgICA8L3RhYmxlPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8bmctdGVtcGxhdGUgI2NhczIxPlxuICAgICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgY2xhc3M9XCJyb3dcIlxuICAgICAgICAgICAgICAgICpuZ0Zvcj1cImxldCByZXMgb2YgbGlzdERhdGFTb3VyY2VbaXRlbS52YWx1ZS5yZXN0RmllbGQubmFtZV1cIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPG5neC1yZXN0LXJlc291cmNlLWRldGFpbFxuICAgICAgICAgICAgICAgICAgW3Jlc291cmNlXT1cInJlcy5yZXNvdXJjZVwiXG4gICAgICAgICAgICAgICAgICBbSURdPVwicmVzLmlkXCJcbiAgICAgICAgICAgICAgICAgIFtyZXNzb3VyY2VOYW1lXT1cInJlcy5yZXNvdXJjZU5hbWVcIlxuICAgICAgICAgICAgICAgICAgW2NvbnRhaW5lcl09XCJ0cnVlXCJcbiAgICAgICAgICAgICAgICAgIFtzdHlsZV09XCJyZXMuc3R5bGVcIlxuICAgICAgICAgICAgICAgID48L25neC1yZXN0LXJlc291cmNlLWRldGFpbD5cbiAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L25nLXRlbXBsYXRlPlxuICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICA8L25nLWNvbnRhaW5lcj5cblxuICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgKm5nSWY9XCJpdGVtLnZhbHVlLnJlc3RGaWVsZC50eXBlID09IFJFU1RfRklFTERfVFlQRVMuQkVMT05HX1RPX01BTllcIlxuICAgICAgICA+XG4gICAgICAgICAgPHRhYmxlIFtuYlRyZWVHcmlkXT1cImxpc3REYXRhU291cmNlW2l0ZW0ua2V5XVwiPlxuICAgICAgICAgICAgPHRyXG4gICAgICAgICAgICAgIG5iVHJlZUdyaWRSb3dcbiAgICAgICAgICAgICAgKm5iVHJlZUdyaWRSb3dEZWY9XCJsZXQgcm93OyBjb2x1bW5zOiBhbGxDb2x1bW5zXCJcbiAgICAgICAgICAgID48L3RyPlxuXG4gICAgICAgICAgICA8bmctY29udGFpbmVyIFtuYlRyZWVHcmlkQ29sdW1uRGVmXT1cImN1c3RvbUNvbHVtblwiPlxuICAgICAgICAgICAgICA8dGQgbmJUcmVlR3JpZENlbGwgKm5iVHJlZUdyaWRDZWxsRGVmPVwibGV0IHJvd1wiPlxuICAgICAgICAgICAgICAgIDxuZ3gtZnMtaWNvblxuICAgICAgICAgICAgICAgICAgW2V4cGFuZGVkXT1cInJvdy5leHBhbmRlZFwiXG4gICAgICAgICAgICAgICAgICBbcGxhY2VdPVwicm93LmRhdGEucGxhY2VcIlxuICAgICAgICAgICAgICAgID48L25neC1mcy1pY29uPlxuICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXJcbiAgICAgICAgICAgICAgICAgICpuZ0lmPVwiXG4gICAgICAgICAgICAgICAgICAgICFpdGVtLnZhbHVlLnJlc3RGaWVsZC5tZXRhRGF0YS5saXN0Q29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgLnJlc3RCZWxvbmdUb01hbnlSZXNvdXJjZXMudGVtcGxhdGVcbiAgICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPGI+IHt7IHJvdy5kYXRhW2N1c3RvbUNvbHVtbl0gfX08L2I+XG4gICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG5cbiAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAqbmdJZj1cIlxuICAgICAgICAgICAgICAgICAgICBpdGVtLnZhbHVlLnJlc3RGaWVsZC5tZXRhRGF0YS5saXN0Q29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgLnJlc3RCZWxvbmdUb01hbnlSZXNvdXJjZXMudGVtcGxhdGVcbiAgICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPHNwYW4gKm5nSWY9XCJyb3cuZGF0YS5wbGFjZVwiPnt7XG4gICAgICAgICAgICAgICAgICAgIGl0ZW0udmFsdWUucmVzdEZpZWxkLm5hbWVcbiAgICAgICAgICAgICAgICAgIH19PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiFyb3cuZGF0YS5wbGFjZVwiPlxuICAgICAgICAgICAgICAgICAgICA8Y25nLWh0bWwtY29tcGlsZXJcbiAgICAgICAgICAgICAgICAgICAgICBbdGVtcGxhdGVdPVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnZhbHVlLnJlc3RGaWVsZC5tZXRhRGF0YS5saXN0Q29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXN0QmVsb25nVG9NYW55UmVzb3VyY2VzLnRlbXBsYXRlXG4gICAgICAgICAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgICAgICAgICBbY29tcG9uZW50Q2xhc3NdPVwicm93LmRhdGEuaXRlbVwiXG4gICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgPC9jbmctaHRtbC1jb21waWxlcj5cbiAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICA8L25iLWxpc3QtaXRlbT5cbiAgICA8L25iLWxpc3Q+XG4gICAgPG5nLXRlbXBsYXRlICN0YWJzQ29udGVudD5cbiAgICAgIDxuYi10YWJzZXQ+XG4gICAgICAgIDxuYi10YWIgW3RhYlRpdGxlXT1cInRhYnNcIiAqbmdGb3I9XCJsZXQgdGFicyBvZiB0YWJzTmFtZVwiPlxuICAgICAgICAgIDxuYi1saXN0PlxuICAgICAgICAgICAgPG5iLWxpc3QtaXRlbVxuICAgICAgICAgICAgICAqbmdGb3I9XCJsZXQgaXRlbSBvZiBkYXRhczFbdGFic10gfCBrZXl2YWx1ZVwiXG4gICAgICAgICAgICAgIGNsYXNzPVwicmVzdC1pdGVtLWFsaWduXCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgPCEtLSBzdHlsZT1cImRpc3BsYXk6IGZsZXgsIFwiIC0tPlxuICAgICAgICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgICAgICAgKm5nSWY9XCJcbiAgICAgICAgICAgICAgICAgIGl0ZW0udmFsdWUucmVzdEZpZWxkLnR5cGUgPT0gUkVTVF9GSUVMRF9UWVBFUy5URVhUIHx8XG4gICAgICAgICAgICAgICAgICBpdGVtLnZhbHVlLnJlc3RGaWVsZC50eXBlID09IFJFU1RfRklFTERfVFlQRVMuU1RSSU5HIHx8XG4gICAgICAgICAgICAgICAgICBpdGVtLnZhbHVlLnJlc3RGaWVsZC50eXBlID09IFJFU1RfRklFTERfVFlQRVMuTlVNQkVSIHx8XG4gICAgICAgICAgICAgICAgICBpdGVtLnZhbHVlLnJlc3RGaWVsZC50eXBlID09IFJFU1RfRklFTERfVFlQRVMuRU5VTVxuICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiIWl0ZW0udmFsdWUucmVzdEZpZWxkLnRlbXBsYXRlXCI+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiXCI+XG4gICAgICAgICAgICAgICAgICAgIDxiPnt7IGl0ZW0ua2V5IHwgdGl0bGVjYXNlIH19OiA8L2I+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJcIj5cbiAgICAgICAgICAgICAgICAgICAge3sgaXRlbS52YWx1ZS5kYXRhIH19XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cblxuICAgICAgICAgICAgICAgIDxkaXYgKm5nSWY9XCJpdGVtLnZhbHVlLnJlc3RGaWVsZC50ZW1wbGF0ZVwiPlxuICAgICAgICAgICAgICAgICAgPGNuZy1odG1sLWNvbXBpbGVyXG4gICAgICAgICAgICAgICAgICAgIFt0ZW1wbGF0ZV09XCJpdGVtLnZhbHVlLnJlc3RGaWVsZC50ZW1wbGF0ZVwiXG4gICAgICAgICAgICAgICAgICAgIFtjb21wb25lbnRDbGFzc109XCJpdGVtLnZhbHVlLmRhdGFcIlxuICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPC9jbmctaHRtbC1jb21waWxlcj5cbiAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG5cbiAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAgICAgICAgICpuZ0lmPVwiaXRlbS52YWx1ZS5yZXN0RmllbGQudHlwZSA9PSBSRVNUX0ZJRUxEX1RZUEVTLkNPTE9SXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCIhaXRlbS52YWx1ZS5yZXN0RmllbGQudGVtcGxhdGVcIj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGI+e3sgaXRlbS5rZXkgfCB0aXRsZWNhc2UgfX06IDwvYj5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIlwiPlxuICAgICAgICAgICAgICAgICAgICB7eyBpdGVtLnZhbHVlLmRhdGEgfX1cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlPVwiaGVpZ2h0OiA0NXB4OyB3aWR0aDogODBweDsgbWFyZ2luLWxlZnQ6IDVweFwiXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPVwidHJ1ZVwiXG4gICAgICAgICAgICAgICAgICAgIFtwbGFjZWhvbGRlcl09XCJpdGVtLnZhbHVlLmRhdGFcIlxuICAgICAgICAgICAgICAgICAgICBbdmFsdWVdPVwiaXRlbS52YWx1ZS5kYXRhXCJcbiAgICAgICAgICAgICAgICAgICAgdHlwZT1cImNvbG9yXCJcbiAgICAgICAgICAgICAgICAgIC8+XG4gICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG5cbiAgICAgICAgICAgICAgICA8ZGl2ICpuZ0lmPVwiaXRlbS52YWx1ZS5yZXN0RmllbGQudGVtcGxhdGVcIj5cbiAgICAgICAgICAgICAgICAgIDxjbmctaHRtbC1jb21waWxlclxuICAgICAgICAgICAgICAgICAgICBbdGVtcGxhdGVdPVwiaXRlbS52YWx1ZS5yZXN0RmllbGQudGVtcGxhdGVcIlxuICAgICAgICAgICAgICAgICAgICBbY29tcG9uZW50Q2xhc3NdPVwiaXRlbS52YWx1ZS5kYXRhXCJcbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDwvY25nLWh0bWwtY29tcGlsZXI+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuXG4gICAgICAgICAgICAgIDxuZy1jb250YWluZXJcbiAgICAgICAgICAgICAgICAqbmdJZj1cIml0ZW0udmFsdWUucmVzdEZpZWxkLnR5cGUgPT0gUkVTVF9GSUVMRF9UWVBFUy5CT09MRUFOXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCIhaXRlbS52YWx1ZS5yZXN0RmllbGQudGVtcGxhdGVcIj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGI+e3sgaXRlbS5rZXkgfCB0aXRsZWNhc2UgfX06IDwvYj5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuXG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiXCI+XG4gICAgICAgICAgICAgICAgICAgIDxuYi1jaGVja2JveFxuICAgICAgICAgICAgICAgICAgICAgIFtjaGVja2VkXT1cIml0ZW0udmFsdWUuZGF0YVwiXG4gICAgICAgICAgICAgICAgICAgICAgW2Rpc2FibGVkXT1cInRydWVcIlxuICAgICAgICAgICAgICAgICAgICA+PC9uYi1jaGVja2JveD5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuXG4gICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIml0ZW0udmFsdWUucmVzdEZpZWxkLnRlbXBsYXRlXCI+XG4gICAgICAgICAgICAgICAgICA8Y25nLWh0bWwtY29tcGlsZXJcbiAgICAgICAgICAgICAgICAgICAgW3RlbXBsYXRlXT1cIml0ZW0udmFsdWUucmVzdEZpZWxkLnRlbXBsYXRlXCJcbiAgICAgICAgICAgICAgICAgICAgW2NvbXBvbmVudENsYXNzXT1cIml0ZW0udmFsdWUuZGF0YVwiXG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8L2NuZy1odG1sLWNvbXBpbGVyPlxuICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cblxuICAgICAgICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgICAgICAgKm5nSWY9XCJpdGVtLnZhbHVlLnJlc3RGaWVsZC50eXBlID09IFJFU1RfRklFTERfVFlQRVMuSU1BR0VcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiFpdGVtLnZhbHVlLnJlc3RGaWVsZC50ZW1wbGF0ZVwiPlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIlwiPlxuICAgICAgICAgICAgICAgICAgICA8Yj57eyBpdGVtLmtleSB8IHRpdGxlY2FzZSB9fTogPC9iPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiXCI+XG4gICAgICAgICAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cInJlc3QtaW1nXCJcbiAgICAgICAgICAgICAgICAgICAgICBbc3JjXT1cIml0ZW0udmFsdWUuZGF0YVwiXG4gICAgICAgICAgICAgICAgICAgICAgYWx0PVwiXCJcbiAgICAgICAgICAgICAgICAgICAgICBbc3R5bGVdPVwic3R5bGVcIlxuICAgICAgICAgICAgICAgICAgICAvPlxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIml0ZW0udmFsdWUucmVzdEZpZWxkLnRlbXBsYXRlXCI+XG4gICAgICAgICAgICAgICAgICA8Y25nLWh0bWwtY29tcGlsZXJcbiAgICAgICAgICAgICAgICAgICAgW3RlbXBsYXRlXT1cIml0ZW0udmFsdWUucmVzdEZpZWxkLnRlbXBsYXRlXCJcbiAgICAgICAgICAgICAgICAgICAgW2NvbXBvbmVudENsYXNzXT1cIml0ZW0udmFsdWUuZGF0YVwiXG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8L2NuZy1odG1sLWNvbXBpbGVyPlxuICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cblxuICAgICAgICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgICAgICAgKm5nSWY9XCJpdGVtLnZhbHVlLnJlc3RGaWVsZC50eXBlID09IFJFU1RfRklFTERfVFlQRVMuREFURVwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiIWl0ZW0udmFsdWUucmVzdEZpZWxkLnRlbXBsYXRlXCI+XG4gICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiXCI+XG4gICAgICAgICAgICAgICAgICAgIDxiPnt7IGl0ZW0ua2V5IHwgdGl0bGVjYXNlIH19OiA8L2I+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJcIj5cbiAgICAgICAgICAgICAgICAgICAge3sgaXRlbS52YWx1ZS5kYXRhIHwgZGF0ZSB9fVxuICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIml0ZW0udmFsdWUucmVzdEZpZWxkLnRlbXBsYXRlXCI+XG4gICAgICAgICAgICAgICAgICA8Y25nLWh0bWwtY29tcGlsZXJcbiAgICAgICAgICAgICAgICAgICAgW3RlbXBsYXRlXT1cIml0ZW0udmFsdWUucmVzdEZpZWxkLnRlbXBsYXRlXCJcbiAgICAgICAgICAgICAgICAgICAgW2NvbXBvbmVudENsYXNzXT1cIml0ZW0udmFsdWUuZGF0YVwiXG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICA8L2NuZy1odG1sLWNvbXBpbGVyPlxuICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cblxuICAgICAgICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgICAgICAgKm5nSWY9XCJpdGVtLnZhbHVlLnJlc3RGaWVsZC50eXBlID09IFJFU1RfRklFTERfVFlQRVMuQkVMT05HX1RPXCJcbiAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCIhaXRlbS52YWx1ZS5yZXN0RmllbGQudGVtcGxhdGVcIj5cbiAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJcIj5cbiAgICAgICAgICAgICAgICAgICAgPGI+e3sgaXRlbS52YWx1ZS5yZXN0RmllbGQubGFiZWwgfCB0aXRsZWNhc2UgfX06IDwvYj5cbiAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIlwiPlxuICAgICAgICAgICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgICAgICAgIChjbGljayk9XCJsb2FkQmVsb25nVG9EZXRhaWwoaXRlbS52YWx1ZSlcIlxuICAgICAgICAgICAgICAgICAgICAgIG5iVG9vbHRpcD1cInt7ICdyZXN0LWRldGFpbC5iZWxvbmdUb1JlZicgfCB0cmFuc2xhdGUgfX1cIlxuICAgICAgICAgICAgICAgICAgICAgIG5iVG9vbHRpcFBsYWNlbWVudD1cInRvcFwiXG4gICAgICAgICAgICAgICAgICAgICAgY2xhc3M9XCJiZWxvbmdUby1saW5rXCJcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgIHt7IGl0ZW0udmFsdWUuZGF0YSB9fVxuICAgICAgICAgICAgICAgICAgICA8L2E+XG4gICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyICpuZ0lmPVwiaXRlbS52YWx1ZS5yZXN0RmllbGQudGVtcGxhdGVcIj5cbiAgICAgICAgICAgICAgICAgIDxjbmctaHRtbC1jb21waWxlclxuICAgICAgICAgICAgICAgICAgICBbdGVtcGxhdGVdPVwiaXRlbS52YWx1ZS5yZXN0RmllbGQudGVtcGxhdGVcIlxuICAgICAgICAgICAgICAgICAgICBbY29tcG9uZW50Q2xhc3NdPVwiaXRlbS52YWx1ZS5kYXRhXCJcbiAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgIDwvY25nLWh0bWwtY29tcGlsZXI+XG4gICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuXG4gICAgICAgICAgICAgIDxuZy1jb250YWluZXJcbiAgICAgICAgICAgICAgICAqbmdJZj1cIml0ZW0udmFsdWUucmVzdEZpZWxkLnR5cGUgPT0gUkVTVF9GSUVMRF9UWVBFUy5IQVNfTUFOWVwiXG4gICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAqbmdJZj1cIlxuICAgICAgICAgICAgICAgICAgICBpdGVtLnZhbHVlLnJlc3RGaWVsZD8ubWV0YURhdGE/Lmxpc3RDb25maWdcbiAgICAgICAgICAgICAgICAgICAgICA/LnJlc3RNYW55UmVzb3VyY2VzICYmXG4gICAgICAgICAgICAgICAgICAgICFpdGVtLnZhbHVlLnJlc3RGaWVsZD8ubWV0YURhdGE/LmRldGFpbENvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgID8ucmVzdE1hbnlSZXNvdXJjZXNcbiAgICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPHRhYmxlIFtuYlRyZWVHcmlkXT1cImxpc3REYXRhU291cmNlW2l0ZW0ua2V5XVwiPlxuICAgICAgICAgICAgICAgICAgICA8dHJcbiAgICAgICAgICAgICAgICAgICAgICBuYlRyZWVHcmlkUm93XG4gICAgICAgICAgICAgICAgICAgICAgKm5iVHJlZUdyaWRSb3dEZWY9XCJsZXQgcm93OyBjb2x1bW5zOiBhbGxDb2x1bW5zXCJcbiAgICAgICAgICAgICAgICAgICAgPjwvdHI+XG5cbiAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciBbbmJUcmVlR3JpZENvbHVtbkRlZl09XCJjdXN0b21Db2x1bW5cIj5cbiAgICAgICAgICAgICAgICAgICAgICA8dGQgbmJUcmVlR3JpZENlbGwgKm5iVHJlZUdyaWRDZWxsRGVmPVwibGV0IHJvd1wiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPG5neC1mcy1pY29uXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFtleHBhbmRlZF09XCJyb3cuZXhwYW5kZWRcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBbcGxhY2VdPVwicm93LmRhdGEucGxhY2VcIlxuICAgICAgICAgICAgICAgICAgICAgICAgPjwvbmd4LWZzLWljb24+XG4gICAgICAgICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICpuZ0lmPVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIWl0ZW0udmFsdWUucmVzdEZpZWxkPy5tZXRhRGF0YT8ubGlzdENvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPy5yZXN0TWFueVJlc291cmNlcy50ZW1wbGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8Yj4ge3sgcm93LmRhdGFbY3VzdG9tQ29sdW1uXSB9fTwvYj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICpuZ0lmPVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS52YWx1ZS5yZXN0RmllbGQ/Lm1ldGFEYXRhPy5saXN0Q29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/LnJlc3RNYW55UmVzb3VyY2VzLnRlbXBsYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxzcGFuICpuZ0lmPVwicm93LmRhdGEucGxhY2VcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBpdGVtLnZhbHVlLnJlc3RGaWVsZC5uYW1lIH19PC9zcGFuXG4gICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiFyb3cuZGF0YS5wbGFjZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjbmctaHRtbC1jb21waWxlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW3RlbXBsYXRlXT1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnZhbHVlLnJlc3RGaWVsZC5tZXRhRGF0YS5saXN0Q29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlc3RNYW55UmVzb3VyY2VzLnRlbXBsYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2NvbXBvbmVudENsYXNzXT1cInJvdy5kYXRhLml0ZW1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L2NuZy1odG1sLWNvbXBpbGVyPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgICAgIDwvdGQ+XG4gICAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAqbmdJZj1cIlxuICAgICAgICAgICAgICAgICAgICBpdGVtLnZhbHVlLnJlc3RGaWVsZD8ubWV0YURhdGE/LmRldGFpbENvbmZpZ1xuICAgICAgICAgICAgICAgICAgICAgID8ucmVzdE1hbnlSZXNvdXJjZXNcbiAgICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAgICAgICAgICAgICAqbmdJZj1cIlxuICAgICAgICAgICAgICAgICAgICAgIGlzT2JqZWN0KFxuICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS52YWx1ZS5yZXN0RmllbGQ/Lm1ldGFEYXRhPy5kZXRhaWxDb25maWdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPy5yZXN0TWFueVJlc291cmNlc1xuICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgZWxzZSBkaXNwbGF5UmVzXG4gICAgICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgIDx0YWJsZSBbbmJUcmVlR3JpZF09XCJsaXN0RGF0YVNvdXJjZVtpdGVtLmtleV1cIj5cbiAgICAgICAgICAgICAgICAgICAgICA8dHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5iVHJlZUdyaWRSb3dcbiAgICAgICAgICAgICAgICAgICAgICAgICpuYlRyZWVHcmlkUm93RGVmPVwibGV0IHJvdzsgY29sdW1uczogYWxsQ29sdW1uc1wiXG4gICAgICAgICAgICAgICAgICAgICAgPjwvdHI+XG5cbiAgICAgICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyIFtuYlRyZWVHcmlkQ29sdW1uRGVmXT1cImN1c3RvbUNvbHVtblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHRkIG5iVHJlZUdyaWRDZWxsICpuYlRyZWVHcmlkQ2VsbERlZj1cImxldCByb3dcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPG5neC1mcy1pY29uXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW2V4cGFuZGVkXT1cInJvdy5leHBhbmRlZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW3BsYWNlXT1cInJvdy5kYXRhLnBsYWNlXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgPjwvbmd4LWZzLWljb24+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAqbmdJZj1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIWl0ZW0udmFsdWUucmVzdEZpZWxkPy5tZXRhRGF0YT8uZGV0YWlsQ29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8ucmVzdE1hbnlSZXNvdXJjZXMudGVtcGxhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPGI+IHt7IHJvdy5kYXRhW2N1c3RvbUNvbHVtbl0gfX08L2I+XG4gICAgICAgICAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAqbmdJZj1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS52YWx1ZS5yZXN0RmllbGQ/Lm1ldGFEYXRhPy5kZXRhaWxDb25maWdcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPy5yZXN0TWFueVJlc291cmNlcy50ZW1wbGF0ZVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8c3BhbiAqbmdJZj1cInJvdy5kYXRhLnBsYWNlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7eyBpdGVtLnZhbHVlLnJlc3RGaWVsZC5uYW1lIH19PC9zcGFuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXIgKm5nSWY9XCIhcm93LmRhdGEucGxhY2VcIj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxjbmctaHRtbC1jb21waWxlclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbdGVtcGxhdGVdPVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlbS52YWx1ZS5yZXN0RmllbGQubWV0YURhdGEuZGV0YWlsQ29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVzdE1hbnlSZXNvdXJjZXMudGVtcGxhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2NvbXBvbmVudENsYXNzXT1cInJvdy5kYXRhLml0ZW1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPC9jbmctaHRtbC1jb21waWxlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgICA8L3RhYmxlPlxuICAgICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICAgICAgICA8bmctdGVtcGxhdGUgI2Rpc3BsYXlSZXM+XG4gICAgICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgICBjbGFzcz1cInJvd1wiXG4gICAgICAgICAgICAgICAgICAgICAgKm5nRm9yPVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgcmVzIG9mIGxpc3REYXRhU291cmNlW2l0ZW0udmFsdWUucmVzdEZpZWxkLm5hbWVdXG4gICAgICAgICAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgIDxuZ3gtcmVzdC1yZXNvdXJjZS1kZXRhaWxcbiAgICAgICAgICAgICAgICAgICAgICAgIFtyZXNvdXJjZV09XCJyZXMucmVzb3VyY2VcIlxuICAgICAgICAgICAgICAgICAgICAgICAgW0lEXT1cInJlcy5pZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBbcmVzc291cmNlTmFtZV09XCJyZXMucmVzb3VyY2VOYW1lXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIFtjb250YWluZXJdPVwidHJ1ZVwiXG4gICAgICAgICAgICAgICAgICAgICAgICBbc3R5bGVdPVwicmVzLnN0eWxlXCJcbiAgICAgICAgICAgICAgICAgICAgICA+PC9uZ3gtcmVzdC1yZXNvdXJjZS1kZXRhaWw+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgPC9uZy10ZW1wbGF0ZT5cbiAgICAgICAgICAgICAgICA8L25nLWNvbnRhaW5lcj5cbiAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG5cbiAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAgICAgICAgICpuZ0lmPVwiXG4gICAgICAgICAgICAgICAgICBpdGVtLnZhbHVlLnJlc3RGaWVsZC50eXBlID09IFJFU1RfRklFTERfVFlQRVMuQkVMT05HX1RPX01BTllcbiAgICAgICAgICAgICAgICBcIlxuICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPHRhYmxlIFtuYlRyZWVHcmlkXT1cImxpc3REYXRhU291cmNlW2l0ZW0ua2V5XVwiPlxuICAgICAgICAgICAgICAgICAgPHRyXG4gICAgICAgICAgICAgICAgICAgIG5iVHJlZUdyaWRSb3dcbiAgICAgICAgICAgICAgICAgICAgKm5iVHJlZUdyaWRSb3dEZWY9XCJsZXQgcm93OyBjb2x1bW5zOiBhbGxDb2x1bW5zXCJcbiAgICAgICAgICAgICAgICAgID48L3RyPlxuXG4gICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyIFtuYlRyZWVHcmlkQ29sdW1uRGVmXT1cImN1c3RvbUNvbHVtblwiPlxuICAgICAgICAgICAgICAgICAgICA8dGQgbmJUcmVlR3JpZENlbGwgKm5iVHJlZUdyaWRDZWxsRGVmPVwibGV0IHJvd1wiPlxuICAgICAgICAgICAgICAgICAgICAgIDxuZ3gtZnMtaWNvblxuICAgICAgICAgICAgICAgICAgICAgICAgW2V4cGFuZGVkXT1cInJvdy5leHBhbmRlZFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBbcGxhY2VdPVwicm93LmRhdGEucGxhY2VcIlxuICAgICAgICAgICAgICAgICAgICAgID48L25neC1mcy1pY29uPlxuICAgICAgICAgICAgICAgICAgICAgIDxuZy1jb250YWluZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICpuZ0lmPVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICFpdGVtLnZhbHVlLnJlc3RGaWVsZC5tZXRhRGF0YS5saXN0Q29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlc3RCZWxvbmdUb01hbnlSZXNvdXJjZXMudGVtcGxhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGI+IHt7IHJvdy5kYXRhW2N1c3RvbUNvbHVtbl0gfX08L2I+XG4gICAgICAgICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG5cbiAgICAgICAgICAgICAgICAgICAgICA8bmctY29udGFpbmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAqbmdJZj1cIlxuICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnZhbHVlLnJlc3RGaWVsZC5tZXRhRGF0YS5saXN0Q29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnJlc3RCZWxvbmdUb01hbnlSZXNvdXJjZXMudGVtcGxhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiXG4gICAgICAgICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHNwYW4gKm5nSWY9XCJyb3cuZGF0YS5wbGFjZVwiPnt7XG4gICAgICAgICAgICAgICAgICAgICAgICAgIGl0ZW0udmFsdWUucmVzdEZpZWxkLm5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgIH19PC9zcGFuPlxuICAgICAgICAgICAgICAgICAgICAgICAgPG5nLWNvbnRhaW5lciAqbmdJZj1cIiFyb3cuZGF0YS5wbGFjZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgICA8Y25nLWh0bWwtY29tcGlsZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbdGVtcGxhdGVdPVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpdGVtLnZhbHVlLnJlc3RGaWVsZC5tZXRhRGF0YS5saXN0Q29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXN0QmVsb25nVG9NYW55UmVzb3VyY2VzLnRlbXBsYXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbY29tcG9uZW50Q2xhc3NdPVwicm93LmRhdGEuaXRlbVwiXG4gICAgICAgICAgICAgICAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgPC9jbmctaHRtbC1jb21waWxlcj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgICAgIDwvbmctY29udGFpbmVyPlxuICAgICAgICAgICAgICAgICAgICA8L3RkPlxuICAgICAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICAgICAgPC90YWJsZT5cbiAgICAgICAgICAgICAgPC9uZy1jb250YWluZXI+XG4gICAgICAgICAgICA8L25iLWxpc3QtaXRlbT5cbiAgICAgICAgICA8L25iLWxpc3Q+XG4gICAgICAgIDwvbmItdGFiPlxuICAgICAgPC9uYi10YWJzZXQ+XG4gICAgPC9uZy10ZW1wbGF0ZT5cbiAgPC9uYi1jYXJkLWJvZHk+XG5cbiAgPG5iLWNhcmQtZm9vdGVyICpuZ0lmPVwiZGF0YXMgJiYgIWNvbnRhaW5lclwiPlxuICAgIDxkaXYgY2xhc3M9XCJidXR0b25zLXJvd1wiPlxuICAgICAgPGJ1dHRvblxuICAgICAgICBuYkJ1dHRvblxuICAgICAgICBzdGF0dXM9XCJkYW5nZXJcIlxuICAgICAgICBzdHlsZT1cIm1hcmdpbi1yaWdodDogMTBweFwiXG4gICAgICAgIChjbGljayk9XCJsaXN0RW50aXR5KClcIlxuICAgICAgPlxuICAgICAgICB7eyBcInJlc3QtZGV0YWlsLmJ0bkNhbmNlbFwiIHwgdHJhbnNsYXRlIH19XG4gICAgICA8L2J1dHRvbj5cblxuICAgICAgPGJ1dHRvbiBuYkJ1dHRvbiBzdGF0dXM9XCJwcmltYXJ5XCIgKGNsaWNrKT1cImVkaXRFbnRpdHkoKVwiPlxuICAgICAgICB7eyBcInJlc3QtZGV0YWlsLmJ0bkVkaXRcIiB8IHRyYW5zbGF0ZSB9fVxuICAgICAgPC9idXR0b24+XG4gICAgPC9kaXY+XG4gIDwvbmItY2FyZC1mb290ZXI+XG48L25iLWNhcmQ+XG4iXX0=