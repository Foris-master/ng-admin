import { Component, Input } from '@angular/core';
import { REST_FIELD_TYPES, PERMISSION, } from '../models/rest-resource.model';
// import urlToFile from '../../../utils/';
import * as _ from 'lodash';
import urlToFile from '../../../utils/urlToFile';
import { RestResourceDeleteComponent } from '../rest-ressource-delete/rest-resource-delete.component';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "../service/rest-resource.service";
import * as i3 from "../service/rest-admin-config.service";
import * as i4 from "@nebular/theme";
import * as i5 from "../service/rest-lang.service";
import * as i6 from "@angular/platform-browser";
import * as i7 from "ngx-permissions";
import * as i8 from "@codehint-ng/html-compiler";
import * as i9 from "ngx-dropzone";
import * as i10 from "../components/fs-icon-ccomponent/fs-icon.component";
import * as i11 from "@angular/common";
import * as i12 from "@ngx-translate/core";
export class RestResourceDetailComponent {
    constructor(activatedRoute, serviceRest, serviceRestAdminConfig, router, dataSourceBuilder, dialogService, langService, sanitizer, permissionsService) {
        this.activatedRoute = activatedRoute;
        this.serviceRest = serviceRest;
        this.serviceRestAdminConfig = serviceRestAdminConfig;
        this.router = router;
        this.dataSourceBuilder = dataSourceBuilder;
        this.dialogService = dialogService;
        this.langService = langService;
        this.sanitizer = sanitizer;
        this.permissionsService = permissionsService;
        this.objectKeys = Object.keys;
        this.customColumn = 'name';
        this.allColumns = [this.customColumn];
        this.listDataSource = {};
        this.isTabsMenu = false;
        this.tabsName = [];
        this.filesUpload = {};
        this.permissions = [
            PERMISSION.CREATE,
            PERMISSION.UPDATE,
            PERMISSION.DELETE,
            PERMISSION.READ,
        ];
        this.isObject = (a) => {
            let isObject = false;
            if (a.metaData)
                isObject = true;
            if (a.type)
                isObject = true;
            if (a.template)
                isObject = true;
            if (a.inForm)
                isObject = true;
            return isObject;
        };
        this.isArray = (a) => {
            return !!a && a.constructor === Array;
        };
        this.getBelongToSecondField = (elt, response) => {
            var _a, _b, _c, _d;
            const belongVal = `${(_c = (_b = (_a = elt.metaData) === null || _a === void 0 ? void 0 : _a.addConfig) === null || _b === void 0 ? void 0 : _b.belongToOptions) === null || _c === void 0 ? void 0 : _c.resourceName}.${(_d = elt.metaData) === null || _d === void 0 ? void 0 : _d.belongToSecondFieldLabel}`.split('.');
            let dat = response;
            if (belongVal && (belongVal === null || belongVal === void 0 ? void 0 : belongVal.length) > 0) {
                belongVal.forEach((val) => {
                    if (dat[val]) {
                        dat = dat[val];
                    }
                    else
                        dat = '';
                });
            }
            else {
                dat = '';
            }
            return dat;
        };
        this.jsonValue = (val) => {
            let _jsonValue;
            try {
                if (!val || !val.restField || !val.data) {
                    throw new Error('Missing required data properties');
                }
                if (val.restField.i18n === true) {
                    if (typeof val.data === 'string' && val.data[0] === '{') {
                        const parsedData = JSON.parse(val.data);
                        if (parsedData[this.langService.selected]) {
                            _jsonValue = parsedData[this.langService.selected];
                        }
                        else {
                            throw new Error('Invalid i18n language selected');
                        }
                    }
                    else if (typeof val.data === 'object' &&
                        val.data[this.langService.selected]) {
                        _jsonValue = val.data[this.langService.selected];
                    }
                    else if (typeof val.data === 'string') {
                        _jsonValue = val.data;
                    }
                    else {
                        throw new Error('Invalid data format for i18n field');
                    }
                }
                else {
                    _jsonValue = val.data;
                }
                if (typeof _jsonValue === 'object') {
                    _jsonValue = JSON.stringify(_jsonValue);
                }
            }
            catch (err) {
                // console.log(`Error occurred in jsonValue: ${err}`);
                _jsonValue = JSON.stringify(val.data);
            }
            return _jsonValue;
        };
        this.sanitizerUrl = (link) => this.sanitizer.bypassSecurityTrustResourceUrl(link);
    }
    get PERMISSION() {
        return PERMISSION;
    }
    ngOnInit() {
        let id;
        if (this.ID) {
            id = this.ID;
        }
        else {
            id = this.activatedRoute.snapshot.paramMap.get('id');
            this.ressourceName =
                this.activatedRoute.snapshot.url[this.activatedRoute.snapshot.url.length - 2].path.split('-')[0];
        }
        this.entityId = parseInt(id);
        this.resource = this.serviceRestAdminConfig.getSpecificResource(this.ressourceName);
        // console.log('this.resource.detailConfig', this.resource.detailConfig);
        if (this.resource.detailConfig.preparedStatementQuery) {
            // this.resource.detailConfig.queryParams.fieldForNextQuery
            this.serviceRest
                .getResources({
                api: this.resource.detailConfig.preparedStatementQuery.api.substring(1),
                queryParams: this.resource.detailConfig.preparedStatementQuery
                    .queryParams
                    ? this.resource.detailConfig.preparedStatementQuery.queryParams
                    : {},
            })
                .subscribe((resp) => {
                const val = {};
                const params = {};
                this.resource.detailConfig.preparedStatementQuery.fieldForNextQuery.forEach((item) => {
                    val[item] = _.get(resp, item);
                });
                this.resource.detailConfig.preparedStatementQuery.queryParamsComplete.forEach((element) => {
                    if (element.isPreparedStatement) {
                        params[element.label] = val[element.value];
                    }
                    else {
                        params[element.label] = element.value;
                    }
                });
                this.serviceRest
                    .getOneResource({
                    api: this.resource.detailConfig.api,
                    queryParams: params,
                }, id)
                    .subscribe((response) => {
                    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
                    const colunms = {};
                    this.entityId = response.id;
                    if (this.resource.detailConfig.tabsConfig &&
                        this.resource.detailConfig.tabsConfig.length > 1) {
                        this.isTabsMenu = true;
                        this.resource.detailConfig.tabsConfig.forEach((tab) => {
                            this.tabsName.push(tab.name);
                            const temp = {};
                            tab.datas.forEach((elt) => {
                                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
                                const search = this.resource.fields.find((field) => field.label === elt);
                                if (search) {
                                    temp[search.name] = {
                                        restField: search,
                                        data: response[search.label],
                                    };
                                }
                                switch (temp[search.name].restField.type) {
                                    case REST_FIELD_TYPES.HAS_MANY:
                                        /*Premier cas si les configs ont ete definis dans le listConfig et rien dans le detailConfig
                                      Premier cas si les configs ont ete definis dans le listConfig et rien dans le detailConfig
                                      on considere que les configs sont les memes
                                      */
                                        if (((_c = (_b = (_a = temp[search.name].restField) === null || _a === void 0 ? void 0 : _a.metaData) === null || _b === void 0 ? void 0 : _b.listConfig) === null || _c === void 0 ? void 0 : _c.restManyResources) &&
                                            !((_f = (_e = (_d = temp[search.name].restField) === null || _d === void 0 ? void 0 : _d.metaData) === null || _e === void 0 ? void 0 : _e.detailConfig) === null || _f === void 0 ? void 0 : _f.restManyResources)) {
                                            const datas = [];
                                            // console.log("Xa me concerne");
                                            // console.log(temp[search.name]);
                                            temp[search.name].data.forEach((item) => {
                                                var _a, _b, _c, _d;
                                                datas.push({
                                                    data: {
                                                        name: ((_d = (_c = (_b = (_a = temp[search.name]) === null || _a === void 0 ? void 0 : _a.restField) === null || _b === void 0 ? void 0 : _b.metaData) === null || _c === void 0 ? void 0 : _c.listConfig) === null || _d === void 0 ? void 0 : _d.restManyResources.label)
                                                            ? item[temp[search.name].restField.metaData
                                                                .listConfig.restManyResources.label]
                                                            : item,
                                                        item,
                                                    },
                                                });
                                            });
                                            const rowsT = [
                                                {
                                                    data: {
                                                        name: temp[search.name].restField.name,
                                                        place: 'header-place',
                                                    },
                                                    children: datas,
                                                },
                                            ];
                                            this.listDataSource[temp[search.name].restField.name] = this.dataSourceBuilder.create(rowsT);
                                        }
                                        else if ((_j = (_h = (_g = temp[search.name].restField) === null || _g === void 0 ? void 0 : _g.metaData) === null || _h === void 0 ? void 0 : _h.detailConfig) === null || _j === void 0 ? void 0 : _j.restManyResources) {
                                            if (this.isObject((_m = (_l = (_k = temp[search.name].restField) === null || _k === void 0 ? void 0 : _k.metaData) === null || _l === void 0 ? void 0 : _l.detailConfig) === null || _m === void 0 ? void 0 : _m.restManyResources)) {
                                                const datas = [];
                                                temp[search.name].data.forEach((item) => {
                                                    var _a, _b, _c, _d;
                                                    datas.push({
                                                        data: {
                                                            name: ((_d = (_c = (_b = (_a = temp[search.name]) === null || _a === void 0 ? void 0 : _a.restField) === null || _b === void 0 ? void 0 : _b.metaData) === null || _c === void 0 ? void 0 : _c.detailConfig) === null || _d === void 0 ? void 0 : _d.restManyResources.label)
                                                                ? item[temp[search.name].restField.metaData
                                                                    .detailConfig.restManyResources.label]
                                                                : item,
                                                            item,
                                                        },
                                                    });
                                                });
                                                const rowsT = [
                                                    {
                                                        data: {
                                                            name: temp[search.name].restField.name,
                                                            place: 'header-place',
                                                        },
                                                        children: datas,
                                                    },
                                                ];
                                                this.listDataSource[temp[search.name].restField.name] = this.dataSourceBuilder.create(rowsT);
                                            }
                                            else {
                                                this.listDataSource[temp[search.name].restField.name] = [];
                                                temp[search.name].data.forEach((element) => {
                                                    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
                                                    this.listDataSource[temp[search.name].restField.name].push({
                                                        resource: (_c = (_b = (_a = temp[search.name].restField) === null || _a === void 0 ? void 0 : _a.metaData) === null || _b === void 0 ? void 0 : _b.detailConfig) === null || _c === void 0 ? void 0 : _c.restManyResources.resource,
                                                        resourceName: (_f = (_e = (_d = temp[search.name].restField) === null || _d === void 0 ? void 0 : _d.metaData) === null || _e === void 0 ? void 0 : _e.detailConfig) === null || _f === void 0 ? void 0 : _f.restManyResources.resourceName,
                                                        id: element === null || element === void 0 ? void 0 : element.id,
                                                        style: ((_j = (_h = (_g = temp[search.name].restField) === null || _g === void 0 ? void 0 : _g.metaData) === null || _h === void 0 ? void 0 : _h.detailConfig) === null || _j === void 0 ? void 0 : _j.restManyResources.style)
                                                            ? (_l = (_k = temp[search.name].restField) === null || _k === void 0 ? void 0 : _k.metaData) === null || _l === void 0 ? void 0 : _l.detailConfig.restManyResources.style
                                                            : '',
                                                    });
                                                });
                                            }
                                        }
                                        break;
                                    case REST_FIELD_TYPES.BELONG_TO_MANY:
                                        const items = [];
                                        temp[search.name].data.forEach((item) => {
                                            items.push({
                                                data: {
                                                    name: item[temp[search.name].restField.metaData.listConfig
                                                        .restBelongToManyResources.label],
                                                    item,
                                                },
                                            });
                                        });
                                        const rowsBelongToMany = [
                                            {
                                                data: {
                                                    name: temp[search.name].restField.name,
                                                    place: 'header-place',
                                                },
                                                children: items,
                                            },
                                        ];
                                        this.listDataSource[temp[search.name].restField.name] =
                                            this.dataSourceBuilder.create(rowsBelongToMany);
                                        break;
                                    case REST_FIELD_TYPES.BELONG_TO:
                                        let dat = this.getBelongToSecondField(search, response);
                                        if (search) {
                                            temp[search.name] = {
                                                restField: search,
                                                data: `${dat} (${response[search.label]})`,
                                                navigationId: response[search.label],
                                            };
                                        }
                                        break;
                                    default:
                                        break;
                                }
                                colunms[tab.name] = temp;
                            });
                        });
                        this.datas = colunms;
                        this.datas1 = colunms;
                    }
                    else {
                        this.resource.fields.forEach((elt) => {
                            if (elt.type === REST_FIELD_TYPES.BELONG_TO) {
                                let dat = this.getBelongToSecondField(elt, response);
                                colunms[elt.name] = {
                                    restField: elt,
                                    data: `${dat} (${response[elt.label]})`,
                                    navigationId: response[elt.label],
                                };
                            }
                            else {
                                colunms[elt.name] = {
                                    restField: elt,
                                    data: response[elt.label],
                                };
                            }
                        });
                        this.datas = colunms;
                        for (const property in this.datas) {
                            switch (this.datas[property].restField.type) {
                                case REST_FIELD_TYPES.HAS_MANY:
                                    if (((_c = (_b = (_a = this.datas[property].restField) === null || _a === void 0 ? void 0 : _a.metaData) === null || _b === void 0 ? void 0 : _b.listConfig) === null || _c === void 0 ? void 0 : _c.restManyResources) &&
                                        !((_f = (_e = (_d = this.datas[property].restField) === null || _d === void 0 ? void 0 : _d.metaData) === null || _e === void 0 ? void 0 : _e.detailConfig) === null || _f === void 0 ? void 0 : _f.restManyResources)) {
                                        const datas = [];
                                        this.datas[property].data.forEach((item) => {
                                            var _a, _b, _c, _d;
                                            datas.push({
                                                data: {
                                                    name: ((_d = (_c = (_b = (_a = this.datas[property]) === null || _a === void 0 ? void 0 : _a.restField) === null || _b === void 0 ? void 0 : _b.metaData) === null || _c === void 0 ? void 0 : _c.listConfig) === null || _d === void 0 ? void 0 : _d.restManyResources.label)
                                                        ? item[this.datas[property].restField.metaData
                                                            .listConfig.restManyResources.label]
                                                        : item,
                                                    item,
                                                },
                                            });
                                        });
                                        const rowsT = [
                                            {
                                                data: {
                                                    name: this.datas[property].restField.name,
                                                    place: 'header-place',
                                                },
                                                children: datas,
                                            },
                                        ];
                                        this.listDataSource[this.datas[property].restField.name] = this.dataSourceBuilder.create(rowsT);
                                    }
                                    else if ((_j = (_h = (_g = this.datas[property].restField) === null || _g === void 0 ? void 0 : _g.metaData) === null || _h === void 0 ? void 0 : _h.detailConfig) === null || _j === void 0 ? void 0 : _j.restManyResources) {
                                        if (this.isObject((_m = (_l = (_k = this.datas[property].restField) === null || _k === void 0 ? void 0 : _k.metaData) === null || _l === void 0 ? void 0 : _l.detailConfig) === null || _m === void 0 ? void 0 : _m.restManyResources)) {
                                            const datas = [];
                                            this.datas[property].data.forEach((item) => {
                                                var _a, _b, _c, _d;
                                                datas.push({
                                                    data: {
                                                        name: ((_d = (_c = (_b = (_a = this.datas[property]) === null || _a === void 0 ? void 0 : _a.restField) === null || _b === void 0 ? void 0 : _b.metaData) === null || _c === void 0 ? void 0 : _c.detailConfig) === null || _d === void 0 ? void 0 : _d.restManyResources.label)
                                                            ? item[this.datas[property].restField.metaData
                                                                .detailConfig.restManyResources.label]
                                                            : item,
                                                        item,
                                                    },
                                                });
                                            });
                                            const rowsT = [
                                                {
                                                    data: {
                                                        name: this.datas[property].restField.name,
                                                        place: 'header-place',
                                                    },
                                                    children: datas,
                                                },
                                            ];
                                            this.listDataSource[this.datas[property].restField.name] = this.dataSourceBuilder.create(rowsT);
                                        }
                                        else {
                                            this.listDataSource[this.datas[property].restField.name] = [];
                                            this.datas[property].data.forEach((element) => {
                                                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
                                                this.listDataSource[this.datas[property].restField.name].push({
                                                    resource: (_c = (_b = (_a = this.datas[property].restField) === null || _a === void 0 ? void 0 : _a.metaData) === null || _b === void 0 ? void 0 : _b.detailConfig) === null || _c === void 0 ? void 0 : _c.restManyResources.resource,
                                                    resourceName: (_f = (_e = (_d = this.datas[property].restField) === null || _d === void 0 ? void 0 : _d.metaData) === null || _e === void 0 ? void 0 : _e.detailConfig) === null || _f === void 0 ? void 0 : _f.restManyResources.resourceName,
                                                    id: element === null || element === void 0 ? void 0 : element.id,
                                                    style: ((_j = (_h = (_g = this.datas[property].restField) === null || _g === void 0 ? void 0 : _g.metaData) === null || _h === void 0 ? void 0 : _h.detailConfig) === null || _j === void 0 ? void 0 : _j.restManyResources.style)
                                                        ? (_l = (_k = this.datas[property].restField) === null || _k === void 0 ? void 0 : _k.metaData) === null || _l === void 0 ? void 0 : _l.detailConfig.restManyResources.style
                                                        : '',
                                                });
                                            });
                                        }
                                    }
                                    break;
                                case REST_FIELD_TYPES.BELONG_TO_MANY:
                                    const items = [];
                                    this.datas[property].data.forEach((item) => {
                                        items.push({
                                            data: {
                                                name: item[this.datas[property].restField.metaData.listConfig
                                                    .restBelongToManyResources.label],
                                                item,
                                            },
                                        });
                                    });
                                    const rowsBelongToMany = [
                                        {
                                            data: {
                                                name: this.datas[property].restField.name,
                                                place: 'header-place',
                                            },
                                            children: items,
                                        },
                                    ];
                                    this.listDataSource[this.datas[property].restField.name] =
                                        this.dataSourceBuilder.create(rowsBelongToMany);
                                    break;
                                default:
                                    break;
                            }
                        }
                    }
                });
            });
        }
        else {
            this.serviceRest
                .getOneResource({
                api: this.resource.detailConfig.api,
                queryParams: this.resource.detailConfig.queryParams,
            }, id)
                .subscribe((response) => {
                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
                const colunms = {};
                this.entityId = response.id;
                if (this.resource.detailConfig.tabsConfig &&
                    this.resource.detailConfig.tabsConfig.length > 1) {
                    this.isTabsMenu = true;
                    this.resource.detailConfig.tabsConfig.forEach((tab) => {
                        this.tabsName.push(tab.name);
                        const temp = {};
                        tab.datas.forEach((elt) => {
                            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
                            const search = this.resource.fields.find((field) => field.label === elt);
                            if (search) {
                                temp[search.name] = {
                                    restField: search,
                                    data: response[search.label],
                                };
                            }
                            switch (temp[search.name].restField.type) {
                                case REST_FIELD_TYPES.HAS_MANY:
                                    /*Premier cas si les configs ont ete definis dans le listConfig et rien dans le detailConfig
                                    Premier cas si les configs ont ete definis dans le listConfig et rien dans le detailConfig
                                    on considere que les configs sont les memes
                                    */
                                    if (((_c = (_b = (_a = temp[search.name].restField) === null || _a === void 0 ? void 0 : _a.metaData) === null || _b === void 0 ? void 0 : _b.listConfig) === null || _c === void 0 ? void 0 : _c.restManyResources) &&
                                        !((_f = (_e = (_d = temp[search.name].restField) === null || _d === void 0 ? void 0 : _d.metaData) === null || _e === void 0 ? void 0 : _e.detailConfig) === null || _f === void 0 ? void 0 : _f.restManyResources)) {
                                        const datas = [];
                                        // console.log("Xa me concerne");
                                        // console.log(temp[search.name]);
                                        temp[search.name].data.forEach((item) => {
                                            var _a, _b, _c, _d;
                                            datas.push({
                                                data: {
                                                    name: ((_d = (_c = (_b = (_a = temp[search.name]) === null || _a === void 0 ? void 0 : _a.restField) === null || _b === void 0 ? void 0 : _b.metaData) === null || _c === void 0 ? void 0 : _c.listConfig) === null || _d === void 0 ? void 0 : _d.restManyResources.label)
                                                        ? item[temp[search.name].restField.metaData
                                                            .listConfig.restManyResources.label]
                                                        : item,
                                                    item,
                                                },
                                            });
                                        });
                                        const rowsT = [
                                            {
                                                data: {
                                                    name: temp[search.name].restField.name,
                                                    place: 'header-place',
                                                },
                                                children: datas,
                                            },
                                        ];
                                        this.listDataSource[temp[search.name].restField.name] =
                                            this.dataSourceBuilder.create(rowsT);
                                    }
                                    else if ((_j = (_h = (_g = temp[search.name].restField) === null || _g === void 0 ? void 0 : _g.metaData) === null || _h === void 0 ? void 0 : _h.detailConfig) === null || _j === void 0 ? void 0 : _j.restManyResources) {
                                        if (this.isObject((_m = (_l = (_k = temp[search.name].restField) === null || _k === void 0 ? void 0 : _k.metaData) === null || _l === void 0 ? void 0 : _l.detailConfig) === null || _m === void 0 ? void 0 : _m.restManyResources)) {
                                            const datas = [];
                                            temp[search.name].data.forEach((item) => {
                                                var _a, _b, _c, _d;
                                                datas.push({
                                                    data: {
                                                        name: ((_d = (_c = (_b = (_a = temp[search.name]) === null || _a === void 0 ? void 0 : _a.restField) === null || _b === void 0 ? void 0 : _b.metaData) === null || _c === void 0 ? void 0 : _c.detailConfig) === null || _d === void 0 ? void 0 : _d.restManyResources.label)
                                                            ? item[temp[search.name].restField.metaData
                                                                .detailConfig.restManyResources.label]
                                                            : item,
                                                        item,
                                                    },
                                                });
                                            });
                                            const rowsT = [
                                                {
                                                    data: {
                                                        name: temp[search.name].restField.name,
                                                        place: 'header-place',
                                                    },
                                                    children: datas,
                                                },
                                            ];
                                            this.listDataSource[temp[search.name].restField.name] =
                                                this.dataSourceBuilder.create(rowsT);
                                        }
                                        else {
                                            this.listDataSource[temp[search.name].restField.name] =
                                                [];
                                            temp[search.name].data.forEach((element) => {
                                                var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
                                                this.listDataSource[temp[search.name].restField.name].push({
                                                    resource: (_c = (_b = (_a = temp[search.name].restField) === null || _a === void 0 ? void 0 : _a.metaData) === null || _b === void 0 ? void 0 : _b.detailConfig) === null || _c === void 0 ? void 0 : _c.restManyResources.resource,
                                                    resourceName: (_f = (_e = (_d = temp[search.name].restField) === null || _d === void 0 ? void 0 : _d.metaData) === null || _e === void 0 ? void 0 : _e.detailConfig) === null || _f === void 0 ? void 0 : _f.restManyResources.resourceName,
                                                    id: element === null || element === void 0 ? void 0 : element.id,
                                                    style: ((_j = (_h = (_g = temp[search.name].restField) === null || _g === void 0 ? void 0 : _g.metaData) === null || _h === void 0 ? void 0 : _h.detailConfig) === null || _j === void 0 ? void 0 : _j.restManyResources.style)
                                                        ? (_l = (_k = temp[search.name].restField) === null || _k === void 0 ? void 0 : _k.metaData) === null || _l === void 0 ? void 0 : _l.detailConfig.restManyResources.style
                                                        : '',
                                                });
                                            });
                                        }
                                    }
                                    break;
                                case REST_FIELD_TYPES.BELONG_TO_MANY:
                                    const items = [];
                                    temp[search.name].data.forEach((item) => {
                                        items.push({
                                            data: {
                                                name: item[temp[search.name].restField.metaData.listConfig
                                                    .restBelongToManyResources.label],
                                                item,
                                            },
                                        });
                                    });
                                    const rowsBelongToMany = [
                                        {
                                            data: {
                                                name: temp[search.name].restField.name,
                                                place: 'header-place',
                                            },
                                            children: items,
                                        },
                                    ];
                                    this.listDataSource[temp[search.name].restField.name] =
                                        this.dataSourceBuilder.create(rowsBelongToMany);
                                    break;
                                case REST_FIELD_TYPES.BELONG_TO:
                                    let dat = this.getBelongToSecondField(search, response);
                                    if (search) {
                                        temp[search.name] = {
                                            restField: search,
                                            data: `${dat} (${response[search.label]})`,
                                            navigationId: response[search.label],
                                        };
                                    }
                                    break;
                                case REST_FIELD_TYPES.PDF:
                                    const file = urlToFile(response[search.label], search.label, 'pdf');
                                    this.filesUpload[search.label] = file;
                                    break;
                                default:
                                    break;
                            }
                            colunms[tab.name] = temp;
                        });
                    });
                    this.datas = colunms;
                    this.datas1 = colunms;
                }
                else {
                    this.resource.fields.forEach((elt) => {
                        if (elt.type === REST_FIELD_TYPES.BELONG_TO) {
                            let dat = this.getBelongToSecondField(elt, response);
                            colunms[elt.name] = {
                                restField: elt,
                                data: `${dat} (${response[elt.label]})`,
                                navigationId: response[elt.label],
                            };
                        }
                        else {
                            colunms[elt.name] = {
                                restField: elt,
                                data: response[elt.label],
                            };
                        }
                    });
                    this.datas = colunms;
                    for (const property in this.datas) {
                        switch (this.datas[property].restField.type) {
                            case REST_FIELD_TYPES.HAS_MANY:
                                if (((_c = (_b = (_a = this.datas[property].restField) === null || _a === void 0 ? void 0 : _a.metaData) === null || _b === void 0 ? void 0 : _b.listConfig) === null || _c === void 0 ? void 0 : _c.restManyResources) &&
                                    !((_f = (_e = (_d = this.datas[property].restField) === null || _d === void 0 ? void 0 : _d.metaData) === null || _e === void 0 ? void 0 : _e.detailConfig) === null || _f === void 0 ? void 0 : _f.restManyResources)) {
                                    const datas = [];
                                    this.datas[property].data.forEach((item) => {
                                        var _a, _b, _c, _d;
                                        datas.push({
                                            data: {
                                                name: ((_d = (_c = (_b = (_a = this.datas[property]) === null || _a === void 0 ? void 0 : _a.restField) === null || _b === void 0 ? void 0 : _b.metaData) === null || _c === void 0 ? void 0 : _c.listConfig) === null || _d === void 0 ? void 0 : _d.restManyResources.label)
                                                    ? item[this.datas[property].restField.metaData
                                                        .listConfig.restManyResources.label]
                                                    : item,
                                                item,
                                            },
                                        });
                                    });
                                    const rowsT = [
                                        {
                                            data: {
                                                name: this.datas[property].restField.name,
                                                place: 'header-place',
                                            },
                                            children: datas,
                                        },
                                    ];
                                    this.listDataSource[this.datas[property].restField.name] =
                                        this.dataSourceBuilder.create(rowsT);
                                }
                                else if ((_j = (_h = (_g = this.datas[property].restField) === null || _g === void 0 ? void 0 : _g.metaData) === null || _h === void 0 ? void 0 : _h.detailConfig) === null || _j === void 0 ? void 0 : _j.restManyResources) {
                                    if (this.isObject((_m = (_l = (_k = this.datas[property].restField) === null || _k === void 0 ? void 0 : _k.metaData) === null || _l === void 0 ? void 0 : _l.detailConfig) === null || _m === void 0 ? void 0 : _m.restManyResources)) {
                                        const datas = [];
                                        this.datas[property].data.forEach((item) => {
                                            var _a, _b, _c, _d;
                                            datas.push({
                                                data: {
                                                    name: ((_d = (_c = (_b = (_a = this.datas[property]) === null || _a === void 0 ? void 0 : _a.restField) === null || _b === void 0 ? void 0 : _b.metaData) === null || _c === void 0 ? void 0 : _c.detailConfig) === null || _d === void 0 ? void 0 : _d.restManyResources.label)
                                                        ? item[this.datas[property].restField.metaData
                                                            .detailConfig.restManyResources.label]
                                                        : item,
                                                    item,
                                                },
                                            });
                                        });
                                        const rowsT = [
                                            {
                                                data: {
                                                    name: this.datas[property].restField.name,
                                                    place: 'header-place',
                                                },
                                                children: datas,
                                            },
                                        ];
                                        this.listDataSource[this.datas[property].restField.name] =
                                            this.dataSourceBuilder.create(rowsT);
                                    }
                                    else {
                                        this.listDataSource[this.datas[property].restField.name] =
                                            [];
                                        this.datas[property].data.forEach((element) => {
                                            var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l;
                                            this.listDataSource[this.datas[property].restField.name].push({
                                                resource: (_c = (_b = (_a = this.datas[property].restField) === null || _a === void 0 ? void 0 : _a.metaData) === null || _b === void 0 ? void 0 : _b.detailConfig) === null || _c === void 0 ? void 0 : _c.restManyResources.resource,
                                                resourceName: (_f = (_e = (_d = this.datas[property].restField) === null || _d === void 0 ? void 0 : _d.metaData) === null || _e === void 0 ? void 0 : _e.detailConfig) === null || _f === void 0 ? void 0 : _f.restManyResources.resourceName,
                                                id: element === null || element === void 0 ? void 0 : element.id,
                                                style: ((_j = (_h = (_g = this.datas[property].restField) === null || _g === void 0 ? void 0 : _g.metaData) === null || _h === void 0 ? void 0 : _h.detailConfig) === null || _j === void 0 ? void 0 : _j.restManyResources.style)
                                                    ? (_l = (_k = this.datas[property].restField) === null || _k === void 0 ? void 0 : _k.metaData) === null || _l === void 0 ? void 0 : _l.detailConfig.restManyResources.style
                                                    : '',
                                            });
                                        });
                                    }
                                }
                                break;
                            case REST_FIELD_TYPES.BELONG_TO_MANY:
                                const items = [];
                                this.datas[property].data.forEach((item) => {
                                    items.push({
                                        data: {
                                            name: item[this.datas[property].restField.metaData.listConfig
                                                .restBelongToManyResources.label],
                                            item,
                                        },
                                    });
                                });
                                const rowsBelongToMany = [
                                    {
                                        data: {
                                            name: this.datas[property].restField.name,
                                            place: 'header-place',
                                        },
                                        children: items,
                                    },
                                ];
                                this.listDataSource[this.datas[property].restField.name] =
                                    this.dataSourceBuilder.create(rowsBelongToMany);
                                break;
                            default:
                                break;
                        }
                    }
                }
            });
        }
        if (this.resource.permissions.length > 0) {
            this.resource.permissions.forEach((permission) => {
                this.serviceRest
                    .getResources({
                    api: permission.fieldKey.api.substring(1),
                    queryParams: permission.fieldKey.queryParams
                        ? permission.fieldKey.queryParams
                        : {},
                })
                    .subscribe((resp) => {
                    const val = {};
                    permission.fieldKey.fieldForNextQuery.forEach((item) => {
                        val[item] = _.get(resp, item);
                        if (val[item]) {
                            this.permissionsService.addPermission(permission.type);
                        }
                    });
                });
            });
        }
    }
    editEntity() {
        this.router.navigate([`/admin/${this.ressourceName}-edit`, this.entityId]);
    }
    listEntity() {
        this.router.navigateByUrl(`/admin/${this.ressourceName}-list`);
    }
    deleteEntity() {
        const dialog = this.dialogService.open(RestResourceDeleteComponent, {
            context: {
                datas: { id: this.entityId },
                title: 'SUPPRESSION',
                listConfig: this.resource.listConfig,
                resourceName: this.ressourceName,
            },
        });
        dialog.onClose.subscribe((resp) => {
            if (resp) {
                this.router.navigateByUrl(`/admin/${this.ressourceName}-list`);
            }
        });
    }
    get REST_FIELD_TYPES() {
        return REST_FIELD_TYPES;
    }
    //Image input
    onSelect(event) { }
    onRemove(field) { }
    loadBelongToDetail(data) {
        const resourceName = data.restField.metaData.addConfig.belongToOptions.resourceName;
        this.router.navigate([`/admin/${resourceName}-detail`, data.navigationId]);
    }
}
RestResourceDetailComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0, type: RestResourceDetailComponent, deps: [{ token: i1.ActivatedRoute }, { token: i2.RestResourceService }, { token: i3.RestAdminConfigService }, { token: i1.Router }, { token: i4.NbTreeGridDataSourceBuilder }, { token: i4.NbDialogService }, { token: i5.RestLangService }, { token: i6.DomSanitizer }, { token: i7.NgxPermissionsService }], target: i0.ɵɵFactoryTarget.Component });
RestResourceDetailComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "12.0.0", version: "12.1.5", type: RestResourceDetailComponent, selector: "ngx-rest-resource-detail", inputs: { resource: "resource", ID: "ID", ressourceName: "ressourceName", container: "container", style: "style" }, ngImport: i0, template: "<ng-container *ngIf=\"resource.permissions.length <= 0\">\n  <nb-card [style]=\"style ? style : ''\">\n    <nb-card-header *ngIf=\"!container\">\n      {{ resource.detailConfig?.title | titlecase }}\n    </nb-card-header>\n    <nb-card-body>\n      <nb-list *ngIf=\"!isTabsMenu; else tabsContent\" class=\"list-group\">\n        <nb-list-item *ngFor=\"let item of datas | keyvalue\">\n          <!-- class=\"rest-item-align list-group-item\" -->\n          <div class=\"d-block\" style=\"margin-left: 15px\">\n            <div class=\"row\">\n              <ng-container\n                *ngIf=\"\n                  item.value.restField.type == REST_FIELD_TYPES.TEXT ||\n                  item.value.restField.type == REST_FIELD_TYPES.STRING ||\n                  item.value.restField.type == REST_FIELD_TYPES.NUMBER ||\n                  item.value.restField.type == REST_FIELD_TYPES.ENUM\n                \"\n              >\n                <ng-container *ngIf=\"!item.value.restField.template\">\n                  <div class=\"marg\">\n                    <b>{{ item.key | titlecase }}: </b>\n                  </div>\n                  <div class=\"\">\n                    {{ item.value.data }}\n                  </div>\n                </ng-container>\n\n                <div *ngIf=\"item.value.restField.template\">\n                  <cng-html-compiler\n                    [template]=\"item.value.restField.template\"\n                    [componentClass]=\"item.value.data\"\n                  >\n                  </cng-html-compiler>\n                </div>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.PDF\"\n              >\n                <ng-container *ngIf=\"!item.value.restField.template\">\n                  <div class=\"marg\">\n                    <b>{{ item.key | titlecase }}: </b>\n                  </div>\n\n                  <ng-container *ngIf=\"!item.value.restField.template\">\n                    <div class=\"\">\n                      <b>{{ item.key | titlecase }}: </b>\n                    </div>\n                    <div class=\"\">\n                      {{ item.value.data }}\n                    </div>\n                    <div class=\"\">\n                      <ngx-dropzone (change)=\"onSelect($event)\">\n                        <ngx-dropzone-preview\n                          [removable]=\"true\"\n                          (removed)=\"onRemove(filesUpload[item.key])\"\n                        >\n                          <ngx-dropzone-label\n                            >{{ item?.value?.data }} ({{\n                              \"pdf\"\n                            }})</ngx-dropzone-label\n                          >\n                        </ngx-dropzone-preview>\n                      </ngx-dropzone>\n                    </div>\n                  </ng-container>\n                </ng-container>\n                <ng-container *ngIf=\"item.value.restField.template\">\n                  <cng-html-compiler\n                    [template]=\"item.value.restField.template\"\n                    [componentClass]=\"jsonValue(item.value)\"\n                  >\n                  </cng-html-compiler>\n                </ng-container>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.COLOR\"\n              >\n                <ng-container *ngIf=\"!item.value.restField.template\">\n                  <div class=\"marg\">\n                    <b>{{ item.key | titlecase }}: </b>\n                  </div>\n                  <div class=\"\">\n                    {{ item.value.data }}\n                  </div>\n                  <div\n                    class=\"text-center color-card\"\n                    [style.background-color]=\"item.value.data\"\n                  >\n                    <ng-container>{{ item.value.data }}</ng-container>\n                  </div>\n                </ng-container>\n\n                <div *ngIf=\"item.value.restField.template\">\n                  <cng-html-compiler\n                    [template]=\"item.value.restField.template\"\n                    [componentClass]=\"item.value.data\"\n                  >\n                  </cng-html-compiler>\n                </div>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.JSON\"\n              >\n                <ng-container *ngIf=\"!item.value.restField.template\">\n                  <div class=\"marg\">\n                    <b>{{ item.key | titlecase }}: </b>\n                  </div>\n                  <div class=\"\">\n                    {{ jsonValue(item.value) }}\n                  </div>\n                </ng-container>\n                <ng-container *ngIf=\"item.value.restField.template\">\n                  <cng-html-compiler\n                    [template]=\"item.value.restField.template\"\n                    [componentClass]=\"jsonValue(item.value)\"\n                  >\n                  </cng-html-compiler>\n                </ng-container>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.BOOLEAN\"\n              >\n                <ng-container *ngIf=\"!item.value.restField.template\">\n                  <div class=\"marg\">\n                    <b>{{ item.key | titlecase }}: </b>\n                  </div>\n\n                  <div class=\"\">\n                    <nb-checkbox\n                      [checked]=\"item.value.data\"\n                      [disabled]=\"true\"\n                    ></nb-checkbox>\n                  </div>\n                </ng-container>\n\n                <ng-container *ngIf=\"item.value.restField.template\">\n                  <cng-html-compiler\n                    [template]=\"item.value.restField.template\"\n                    [componentClass]=\"item.value.data\"\n                  >\n                  </cng-html-compiler>\n                </ng-container>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.IMAGE\"\n              >\n                <ng-container *ngIf=\"!item.value.restField.template\">\n                  <div class=\"marg\">\n                    <b>{{ item.key | titlecase }}: </b>\n                  </div>\n                  <div class=\"\">\n                    <img\n                      class=\"rest-img\"\n                      [src]=\"item.value.data\"\n                      alt=\"\"\n                      [style]=\"style\"\n                    />\n                  </div>\n                </ng-container>\n                <ng-container *ngIf=\"item.value.restField.template\">\n                  <cng-html-compiler\n                    [template]=\"item.value.restField.template\"\n                    [componentClass]=\"item.value.data\"\n                  >\n                  </cng-html-compiler>\n                </ng-container>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.DATE\"\n              >\n                <ng-container *ngIf=\"!item.value.restField.template\">\n                  <div class=\"marg\">\n                    <b>{{ item.key | titlecase }}: </b>\n                  </div>\n                  <div class=\"\">\n                    {{ item.value.data | date }}\n                  </div>\n                </ng-container>\n                <ng-container *ngIf=\"item.value.restField.template\">\n                  <cng-html-compiler\n                    [template]=\"item.value.restField.template\"\n                    [componentClass]=\"item.value.data\"\n                  >\n                  </cng-html-compiler>\n                </ng-container>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.BELONG_TO\"\n              >\n                <ng-container *ngIf=\"!item.value.restField.template\">\n                  <div class=\"marg\">\n                    <b>{{ item.value.restField.label | titlecase }}: </b>\n                  </div>\n                  <div class=\"\">\n                    <a\n                      (click)=\"loadBelongToDetail(item.value)\"\n                      nbTooltip=\"{{ 'rest-detail.belongToRef' | translate }}\"\n                      nbTooltipPlacement=\"top\"\n                      class=\"belongTo-link\"\n                    >\n                      {{ item.value.data }}\n                    </a>\n                  </div>\n                </ng-container>\n                <ng-container *ngIf=\"item.value.restField.template\">\n                  <cng-html-compiler\n                    [template]=\"item.value.restField.template\"\n                    [componentClass]=\"item.value.data\"\n                  >\n                  </cng-html-compiler>\n                </ng-container>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.HAS_MANY\"\n              >\n                <!-- CAS 1 -->\n                <ng-container\n                  *ngIf=\"\n                    item.value.restField?.metaData?.listConfig\n                      ?.restManyResources &&\n                    !item.value.restField?.metaData?.detailConfig\n                      ?.restManyResources\n                  \"\n                >\n                  <table [nbTreeGrid]=\"listDataSource[item.key]\">\n                    <tr\n                      nbTreeGridRow\n                      *nbTreeGridRowDef=\"let row; columns: allColumns\"\n                    ></tr>\n\n                    <ng-container [nbTreeGridColumnDef]=\"customColumn\">\n                      <td nbTreeGridCell *nbTreeGridCellDef=\"let row\">\n                        <ngx-fs-icon\n                          [expanded]=\"row.expanded\"\n                          [place]=\"row.data.place\"\n                        ></ngx-fs-icon>\n                        <ng-container\n                          *ngIf=\"\n                            !item.value.restField?.metaData?.listConfig\n                              ?.restManyResources.template\n                          \"\n                        >\n                          <b> {{ row.data[customColumn] }}</b>\n                        </ng-container>\n\n                        <ng-container\n                          *ngIf=\"\n                            item.value.restField?.metaData?.listConfig\n                              ?.restManyResources.template\n                          \"\n                        >\n                          <span *ngIf=\"row.data.place\">\n                            {{ item.value.restField.name }}</span\n                          >\n                          <ng-container *ngIf=\"!row.data.place\">\n                            <cng-html-compiler\n                              [template]=\"\n                                item.value.restField.metaData.listConfig\n                                  .restManyResources.template\n                              \"\n                              [componentClass]=\"row.data.item\"\n                            >\n                            </cng-html-compiler>\n                          </ng-container>\n                        </ng-container>\n                      </td>\n                    </ng-container>\n                  </table>\n                </ng-container>\n\n                <!-- CAS 2 -->\n                <ng-container\n                  *ngIf=\"\n                    item.value.restField?.metaData?.detailConfig\n                      ?.restManyResources\n                  \"\n                >\n                  <div\n                    *ngIf=\"\n                      isObject(\n                        item.value.restField.metaData.detailConfig\n                          .restManyResources\n                      );\n                      else cas21\n                    \"\n                  >\n                    <table [nbTreeGrid]=\"listDataSource[item.key]\">\n                      <tr\n                        nbTreeGridRow\n                        *nbTreeGridRowDef=\"let row; columns: allColumns\"\n                      ></tr>\n\n                      <ng-container [nbTreeGridColumnDef]=\"customColumn\">\n                        <td nbTreeGridCell *nbTreeGridCellDef=\"let row\">\n                          <ngx-fs-icon\n                            [expanded]=\"row.expanded\"\n                            [place]=\"row.data.place\"\n                          ></ngx-fs-icon>\n                          <ng-container\n                            *ngIf=\"\n                              !item.value.restField.metaData.detailConfig\n                                .restManyResources?.template\n                            \"\n                          >\n                            <b> {{ row.data[customColumn] }}</b>\n                          </ng-container>\n\n                          <ng-container\n                            *ngIf=\"\n                              item.value.restField.metaData.detailConfig\n                                .restManyResources?.template\n                            \"\n                          >\n                            <span *ngIf=\"row.data.place\">\n                              {{ item.value.restField.name }}</span\n                            >\n                            <ng-container *ngIf=\"!row.data.place\">\n                              <cng-html-compiler\n                                [template]=\"\n                                  item.value.restField.metaData.detailConfig\n                                    .restManyResources.template\n                                \"\n                                [componentClass]=\"row.data.item\"\n                              >\n                              </cng-html-compiler>\n                            </ng-container>\n                          </ng-container>\n                        </td>\n                      </ng-container>\n                    </table>\n                  </div>\n                  <ng-template #cas21>\n                    <div\n                      class=\"row\"\n                      *ngFor=\"\n                        let res of listDataSource[item.value.restField.name]\n                      \"\n                    >\n                      <ngx-rest-resource-detail\n                        [resource]=\"res.resource\"\n                        [ID]=\"res.id\"\n                        [ressourceName]=\"res.resourceName\"\n                        [container]=\"true\"\n                        [style]=\"res.style\"\n                      ></ngx-rest-resource-detail>\n                    </div>\n                  </ng-template>\n                </ng-container>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"\n                  item.value.restField.type == REST_FIELD_TYPES.BELONG_TO_MANY\n                \"\n              >\n                <table [nbTreeGrid]=\"listDataSource[item.key]\">\n                  <tr\n                    nbTreeGridRow\n                    *nbTreeGridRowDef=\"let row; columns: allColumns\"\n                  ></tr>\n\n                  <ng-container [nbTreeGridColumnDef]=\"customColumn\">\n                    <td nbTreeGridCell *nbTreeGridCellDef=\"let row\">\n                      <ngx-fs-icon\n                        [expanded]=\"row.expanded\"\n                        [place]=\"row.data.place\"\n                      ></ngx-fs-icon>\n                      <ng-container\n                        *ngIf=\"\n                          !item.value.restField.metaData.listConfig\n                            .restBelongToManyResources.template\n                        \"\n                      >\n                        <b> {{ row.data[customColumn] }}</b>\n                      </ng-container>\n\n                      <ng-container\n                        *ngIf=\"\n                          item.value.restField.metaData.listConfig\n                            .restBelongToManyResources.template\n                        \"\n                      >\n                        <span *ngIf=\"row.data.place\">{{\n                          item.value.restField.name\n                        }}</span>\n                        <ng-container *ngIf=\"!row.data.place\">\n                          <cng-html-compiler\n                            [template]=\"\n                              item.value.restField.metaData.listConfig\n                                .restBelongToManyResources.template\n                            \"\n                            [componentClass]=\"row.data.item\"\n                          >\n                          </cng-html-compiler>\n                        </ng-container>\n                      </ng-container>\n                    </td>\n                  </ng-container>\n                </table>\n              </ng-container>\n\n              <ng-container\n                *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.LINK\"\n              >\n                <ng-container *ngIf=\"!item.value.restField.template\">\n                  <div class=\"marg\">\n                    <b>{{ item.key | titlecase }}: </b>\n                  </div>\n                  <div class=\"\">\n                    <a [href]=\"item.value.data\" target=\"_blank\"\n                      >{{ item.value.data }}\n                    </a>\n\n                    <iframe\n                      [src]=\"sanitizerUrl(item.value.data)\"\n                      *ngIf=\"\n                        item.value.restField?.metaData?.detailConfig?.linkConfig\n                          ? !item.value.restField?.metaData?.detailConfig\n                              ?.linkConfig.disabledIframePreview\n                          : true\n                      \"\n                      height=\"400px\"\n                      width=\"100%\"\n                      class=\"mt-2\"\n                    ></iframe>\n                  </div>\n                </ng-container>\n\n                <div *ngIf=\"item.value.restField.template\">\n                  <cng-html-compiler\n                    [template]=\"item.value.restField.template\"\n                    [componentClass]=\"item.value.data\"\n                  >\n                  </cng-html-compiler>\n                </div>\n              </ng-container>\n            </div>\n            <div class=\"\">\n              <ng-container *ngIf=\"item.value.restField.note != ''\">\n                <span class=\"text-muted ml-20 mt-3\">{{\n                  item.value.restField.note\n                }}</span>\n              </ng-container>\n            </div>\n          </div>\n        </nb-list-item>\n      </nb-list>\n      <ng-template #tabsContent>\n        <nb-tabset fullWidth>\n          <nb-tab [tabTitle]=\"tabs\" *ngFor=\"let tabs of tabsName\">\n            <nb-list class=\"list-group\">\n              <nb-list-item *ngFor=\"let item of datas1[tabs] | keyvalue\">\n                <!-- class=\"rest-item-align list-group-item\" -->\n                <div class=\"d-block\" style=\"margin-left: 15px\">\n                  <div class=\"row\">\n                    <ng-container\n                      *ngIf=\"\n                        item.value.restField.type == REST_FIELD_TYPES.TEXT ||\n                        item.value.restField.type == REST_FIELD_TYPES.STRING ||\n                        item.value.restField.type == REST_FIELD_TYPES.NUMBER ||\n                        item.value.restField.type == REST_FIELD_TYPES.ENUM\n                      \"\n                    >\n                      <ng-container *ngIf=\"!item.value.restField.template\">\n                        <div class=\"marg\">\n                          <b>{{ item.key | titlecase }}: </b>\n                        </div>\n                        <div class=\"\">\n                          {{ item.value.data }}\n                        </div>\n                      </ng-container>\n\n                      <div *ngIf=\"item.value.restField.template\">\n                        <cng-html-compiler\n                          [template]=\"item.value.restField.template\"\n                          [componentClass]=\"item.value.data\"\n                        >\n                        </cng-html-compiler>\n                      </div>\n                    </ng-container>\n\n                    <ng-container\n                      *ngIf=\"\n                        item.value.restField.type == REST_FIELD_TYPES.COLOR\n                      \"\n                    >\n                      <ng-container *ngIf=\"!item.value.restField.template\">\n                        <div class=\"marg\">\n                          <b>{{ item.key | titlecase }}: </b>\n                        </div>\n                        <div class=\"\">\n                          {{ item.value.data }}\n                        </div>\n                        <input\n                          style=\"height: 45px; width: 80px; margin-left: 5px\"\n                          disabled=\"true\"\n                          [placeholder]=\"item.value.data\"\n                          [value]=\"item.value.data\"\n                          type=\"color\"\n                        />\n                      </ng-container>\n\n                      <div *ngIf=\"item.value.restField.template\">\n                        <cng-html-compiler\n                          [template]=\"item.value.restField.template\"\n                          [componentClass]=\"item.value.data\"\n                        >\n                        </cng-html-compiler>\n                      </div>\n                    </ng-container>\n\n                    <ng-container\n                      *ngIf=\"\n                        item.value.restField.type == REST_FIELD_TYPES.BOOLEAN\n                      \"\n                    >\n                      <ng-container *ngIf=\"!item.value.restField.template\">\n                        <div class=\"marg\">\n                          <b>{{ item.key | titlecase }}: </b>\n                        </div>\n\n                        <div class=\"\">\n                          <nb-checkbox\n                            [checked]=\"item.value.data\"\n                            [disabled]=\"true\"\n                          ></nb-checkbox>\n                        </div>\n                      </ng-container>\n\n                      <ng-container *ngIf=\"item.value.restField.template\">\n                        <cng-html-compiler\n                          [template]=\"item.value.restField.template\"\n                          [componentClass]=\"item.value.data\"\n                        >\n                        </cng-html-compiler>\n                      </ng-container>\n                    </ng-container>\n\n                    <ng-container\n                      *ngIf=\"\n                        item.value.restField.type == REST_FIELD_TYPES.IMAGE\n                      \"\n                    >\n                      <ng-container *ngIf=\"!item.value.restField.template\">\n                        <div class=\"marg\">\n                          <b>{{ item.key | titlecase }}: </b>\n                        </div>\n                        <div class=\"\">\n                          <img\n                            class=\"rest-img\"\n                            [src]=\"item.value.data\"\n                            alt=\"\"\n                            [style]=\"style\"\n                          />\n                        </div>\n                      </ng-container>\n                      <ng-container *ngIf=\"item.value.restField.template\">\n                        <cng-html-compiler\n                          [template]=\"item.value.restField.template\"\n                          [componentClass]=\"item.value.data\"\n                        >\n                        </cng-html-compiler\n                        >http://localhost:4200/admin/agency-list\n                      </ng-container>\n                    </ng-container>\n\n                    <ng-container\n                      *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.JSON\"\n                    >\n                      <ng-container *ngIf=\"!item.value.restField.template\">\n                        <div class=\"marg\">\n                          <b>{{ item.key | titlecase }}: </b>\n                        </div>\n                        <div class=\"\">\n                          {{ jsonValue(item.value) }}\n                        </div>\n                      </ng-container>\n                      <ng-container *ngIf=\"item.value.restField.template\">\n                        <cng-html-compiler\n                          [template]=\"item.value.restField.template\"\n                          [componentClass]=\"jsonValue(item.value)\"\n                        >\n                        </cng-html-compiler>\n                      </ng-container>\n                    </ng-container>\n\n                    <ng-container\n                      *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.DATE\"\n                    >\n                      <ng-container *ngIf=\"!item.value.restField.template\">\n                        <div class=\"marg\">\n                          <b>{{ item.key | titlecase }}: </b>\n                        </div>\n                        <div class=\"\">\n                          {{ item.value.data | date }}\n                        </div>\n                      </ng-container>\n                      <ng-container *ngIf=\"item.value.restField.template\">\n                        <cng-html-compiler\n                          [template]=\"item.value.restField.template\"\n                          [componentClass]=\"item.value.data\"\n                        >\n                        </cng-html-compiler>\n                      </ng-container>\n                    </ng-container>\n\n                    <ng-container\n                      *ngIf=\"\n                        item.value.restField.type == REST_FIELD_TYPES.BELONG_TO\n                      \"\n                    >\n                      <ng-container *ngIf=\"!item.value.restField.template\">\n                        <div class=\"marg\">\n                          <b>{{ item.value.restField.label | titlecase }}: </b>\n                        </div>\n                        <div class=\"\">\n                          <a\n                            (click)=\"loadBelongToDetail(item.value)\"\n                            nbTooltip=\"{{\n                              'rest-detail.belongToRef' | translate\n                            }}\"\n                            nbTooltipPlacement=\"top\"\n                            class=\"belongTo-link\"\n                          >\n                            {{ item.value.data }}\n                          </a>\n                        </div>\n                      </ng-container>\n                      <ng-container *ngIf=\"item.value.restField.template\">\n                        <cng-html-compiler\n                          [template]=\"item.value.restField.template\"\n                          [componentClass]=\"item.value.data\"\n                        >\n                        </cng-html-compiler>\n                      </ng-container>\n                    </ng-container>\n\n                    <ng-container\n                      *ngIf=\"\n                        item.value.restField.type == REST_FIELD_TYPES.HAS_MANY\n                      \"\n                    >\n                      <ng-container\n                        *ngIf=\"\n                          item.value.restField?.metaData?.listConfig\n                            ?.restManyResources &&\n                          !item.value.restField?.metaData?.detailConfig\n                            ?.restManyResources\n                        \"\n                      >\n                        <table [nbTreeGrid]=\"listDataSource[item.key]\">\n                          <tr\n                            nbTreeGridRow\n                            *nbTreeGridRowDef=\"let row; columns: allColumns\"\n                          ></tr>\n\n                          <ng-container [nbTreeGridColumnDef]=\"customColumn\">\n                            <td nbTreeGridCell *nbTreeGridCellDef=\"let row\">\n                              <ngx-fs-icon\n                                [expanded]=\"row.expanded\"\n                                [place]=\"row.data.place\"\n                              ></ngx-fs-icon>\n                              <ng-container\n                                *ngIf=\"\n                                  !item.value.restField?.metaData?.listConfig\n                                    ?.restManyResources.template\n                                \"\n                              >\n                                <b> {{ row.data[customColumn] }}</b>\n                              </ng-container>\n\n                              <ng-container\n                                *ngIf=\"\n                                  item.value.restField?.metaData?.listConfig\n                                    ?.restManyResources.template\n                                \"\n                              >\n                                <span *ngIf=\"row.data.place\">\n                                  {{ item.value.restField.name }}</span\n                                >\n                                <ng-container *ngIf=\"!row.data.place\">\n                                  <cng-html-compiler\n                                    [template]=\"\n                                      item.value.restField.metaData.listConfig\n                                        .restManyResources.template\n                                    \"\n                                    [componentClass]=\"row.data.item\"\n                                  >\n                                  </cng-html-compiler>\n                                </ng-container>\n                              </ng-container>\n                            </td>\n                          </ng-container>\n                        </table>\n                      </ng-container>\n                      <ng-container\n                        *ngIf=\"\n                          item.value.restField?.metaData?.detailConfig\n                            ?.restManyResources\n                        \"\n                      >\n                        <ng-container\n                          *ngIf=\"\n                            isObject(\n                              item.value.restField?.metaData?.detailConfig\n                                ?.restManyResources\n                            );\n                            else displayRes\n                          \"\n                        >\n                          <table [nbTreeGrid]=\"listDataSource[item.key]\">\n                            <tr\n                              nbTreeGridRow\n                              *nbTreeGridRowDef=\"let row; columns: allColumns\"\n                            ></tr>\n\n                            <ng-container [nbTreeGridColumnDef]=\"customColumn\">\n                              <td nbTreeGridCell *nbTreeGridCellDef=\"let row\">\n                                <ngx-fs-icon\n                                  [expanded]=\"row.expanded\"\n                                  [place]=\"row.data.place\"\n                                ></ngx-fs-icon>\n                                <ng-container\n                                  *ngIf=\"\n                                    !item.value.restField?.metaData\n                                      ?.detailConfig?.restManyResources.template\n                                  \"\n                                >\n                                  <b> {{ row.data[customColumn] }}</b>\n                                </ng-container>\n\n                                <ng-container\n                                  *ngIf=\"\n                                    item.value.restField?.metaData?.detailConfig\n                                      ?.restManyResources.template\n                                  \"\n                                >\n                                  <span *ngIf=\"row.data.place\">\n                                    {{ item.value.restField.name }}</span\n                                  >\n                                  <ng-container *ngIf=\"!row.data.place\">\n                                    <cng-html-compiler\n                                      [template]=\"\n                                        item.value.restField.metaData\n                                          .detailConfig.restManyResources\n                                          .template\n                                      \"\n                                      [componentClass]=\"row.data.item\"\n                                    >\n                                    </cng-html-compiler>\n                                  </ng-container>\n                                </ng-container>\n                              </td>\n                            </ng-container>\n                          </table>\n                        </ng-container>\n                        <ng-template #displayRes>\n                          <div\n                            class=\"row\"\n                            *ngFor=\"\n                              let res of listDataSource[\n                                item.value.restField.name\n                              ]\n                            \"\n                          >\n                            <ngx-rest-resource-detail\n                              [resource]=\"res.resource\"\n                              [ID]=\"res.id\"\n                              [ressourceName]=\"res.resourceName\"\n                              [container]=\"true\"\n                              [style]=\"res.style\"\n                            ></ngx-rest-resource-detail>\n                          </div>\n                        </ng-template>\n                      </ng-container>\n                    </ng-container>\n\n                    <ng-container\n                      *ngIf=\"\n                        item.value.restField.type ==\n                        REST_FIELD_TYPES.BELONG_TO_MANY\n                      \"\n                    >\n                      <table [nbTreeGrid]=\"listDataSource[item.key]\">\n                        <tr\n                          nbTreeGridRow\n                          *nbTreeGridRowDef=\"let row; columns: allColumns\"\n                        ></tr>\n\n                        <ng-container [nbTreeGridColumnDef]=\"customColumn\">\n                          <td nbTreeGridCell *nbTreeGridCellDef=\"let row\">\n                            <ngx-fs-icon\n                              [expanded]=\"row.expanded\"\n                              [place]=\"row.data.place\"\n                            ></ngx-fs-icon>\n                            <ng-container\n                              *ngIf=\"\n                                !item.value.restField.metaData.listConfig\n                                  .restBelongToManyResources.template\n                              \"\n                            >\n                              <b> {{ row.data[customColumn] }}</b>\n                            </ng-container>\n\n                            <ng-container\n                              *ngIf=\"\n                                item.value.restField.metaData.listConfig\n                                  .restBelongToManyResources.template\n                              \"\n                            >\n                              <span *ngIf=\"row.data.place\">{{\n                                item.value.restField.name\n                              }}</span>\n                              <ng-container *ngIf=\"!row.data.place\">\n                                <cng-html-compiler\n                                  [template]=\"\n                                    item.value.restField.metaData.listConfig\n                                      .restBelongToManyResources.template\n                                  \"\n                                  [componentClass]=\"row.data.item\"\n                                >\n                                </cng-html-compiler>\n                              </ng-container>\n                            </ng-container>\n                          </td>\n                        </ng-container>\n                      </table>\n                    </ng-container>\n\n                    <ng-container\n                      *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.LINK\"\n                    >\n                      <ng-container *ngIf=\"!item.value.restField.template\">\n                        <div class=\"marg\">\n                          <b>{{ item.key | titlecase }}: </b>\n                        </div>\n                        <div class=\"\">\n                          <a [href]=\"item.value.data\" target=\"_blank\"\n                            >{{ item.value.data }}\n                          </a>\n\n                          <iframe\n                            [src]=\"sanitizerUrl(item.value.data)\"\n                            *ngIf=\"\n                              item.value.restField?.metaData?.detailConfig\n                                ?.linkConfig\n                                ? !item.value.restField?.metaData?.detailConfig\n                                    ?.linkConfig.disabledIframePreview\n                                : true\n                            \"\n                            height=\"400px\"\n                            width=\"100%\"\n                            class=\"mt-2\"\n                          ></iframe>\n                        </div>\n                      </ng-container>\n\n                      <div *ngIf=\"item.value.restField.template\">\n                        <cng-html-compiler\n                          [template]=\"item.value.restField.template\"\n                          [componentClass]=\"item.value.data\"\n                        >\n                        </cng-html-compiler>\n                      </div>\n                    </ng-container>\n                  </div>\n                  <div class=\"\">\n                    <ng-container *ngIf=\"item.value.restField.note != ''\">\n                      <span class=\"text-muted ml-20 mt-3\">{{\n                        item.value.restField.note\n                      }}</span>\n                    </ng-container>\n                  </div>\n                </div>\n              </nb-list-item>\n            </nb-list>\n          </nb-tab>\n        </nb-tabset>\n      </ng-template>\n    </nb-card-body>\n\n    <nb-card-footer *ngIf=\"datas && !container\">\n      <div class=\"buttons-row text-center\" fullWidth>\n        <button\n          nbButton\n          status=\"secondary\"\n          style=\"margin-right: 10px\"\n          (click)=\"listEntity()\"\n        >\n          {{ \"rest-detail.btnCancel\" | translate }}\n        </button>\n\n        <button nbButton status=\"primary\" (click)=\"editEntity()\">\n          {{ \"rest-detail.btnEdit\" | translate }}\n        </button>\n\n        <button\n          nbButton\n          status=\"danger\"\n          style=\"margin-left: 10px\"\n          (click)=\"deleteEntity()\"\n        >\n          {{ \"rest-detail.btnDelete\" | translate }}\n        </button>\n      </div>\n    </nb-card-footer>\n  </nb-card>\n</ng-container>\n\n<ng-container *ngIf=\"resource.permissions.length > 0\">\n  <div *ngxPermissionsOnly=\"PERMISSION.READ\">\n    <nb-card [style]=\"style ? style : ''\">\n      <nb-card-header *ngIf=\"!container\">\n        {{ resource.detailConfig?.title | titlecase }}\n      </nb-card-header>\n      <nb-card-body>\n        <nb-list *ngIf=\"!isTabsMenu; else tabsContent\" class=\"list-group\">\n          <nb-list-item *ngFor=\"let item of datas | keyvalue\">\n            <!-- class=\"rest-item-align list-group-item\" -->\n            <div class=\"d-block\" style=\"margin-left: 15px\">\n              <div class=\"row\">\n                <ng-container\n                  *ngIf=\"\n                    item.value.restField.type == REST_FIELD_TYPES.TEXT ||\n                    item.value.restField.type == REST_FIELD_TYPES.STRING ||\n                    item.value.restField.type == REST_FIELD_TYPES.NUMBER ||\n                    item.value.restField.type == REST_FIELD_TYPES.ENUM\n                  \"\n                >\n                  <ng-container *ngIf=\"!item.value.restField.template\">\n                    <div class=\"marg\">\n                      <b>{{ item.key | titlecase }}: </b>\n                    </div>\n                    <div class=\"\">\n                      {{ item.value.data }}\n                    </div>\n                  </ng-container>\n\n                  <div *ngIf=\"item.value.restField.template\">\n                    <cng-html-compiler\n                      [template]=\"item.value.restField.template\"\n                      [componentClass]=\"item.value.data\"\n                    >\n                    </cng-html-compiler>\n                  </div>\n                </ng-container>\n\n                <ng-container\n                  *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.PDF\"\n                >\n                  <ng-container *ngIf=\"!item.value.restField.template\">\n                    <div class=\"marg\">\n                      <b>{{ item.key | titlecase }}: </b>\n                    </div>\n\n                    <ng-container *ngIf=\"!item.value.restField.template\">\n                      <div class=\"\">\n                        <b>{{ item.key | titlecase }}: </b>\n                      </div>\n                      <div class=\"\">\n                        {{ item.value.data }}\n                      </div>\n                      <div class=\"\">\n                        <ngx-dropzone (change)=\"onSelect($event)\">\n                          <ngx-dropzone-preview\n                            [removable]=\"true\"\n                            (removed)=\"onRemove(filesUpload[item.key])\"\n                          >\n                            <ngx-dropzone-label\n                              >{{ item?.value?.data }} ({{\n                                \"pdf\"\n                              }})</ngx-dropzone-label\n                            >\n                          </ngx-dropzone-preview>\n                        </ngx-dropzone>\n                      </div>\n                    </ng-container>\n                  </ng-container>\n                  <ng-container *ngIf=\"item.value.restField.template\">\n                    <cng-html-compiler\n                      [template]=\"item.value.restField.template\"\n                      [componentClass]=\"jsonValue(item.value)\"\n                    >\n                    </cng-html-compiler>\n                  </ng-container>\n                </ng-container>\n\n                <ng-container\n                  *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.COLOR\"\n                >\n                  <ng-container *ngIf=\"!item.value.restField.template\">\n                    <div class=\"marg\">\n                      <b>{{ item.key | titlecase }}: </b>\n                    </div>\n                    <div class=\"\">\n                      {{ item.value.data }}\n                    </div>\n                    <div\n                      class=\"text-center color-card\"\n                      [style.background-color]=\"item.value.data\"\n                    >\n                      <ng-container>{{ item.value.data }}</ng-container>\n                    </div>\n                  </ng-container>\n\n                  <div *ngIf=\"item.value.restField.template\">\n                    <cng-html-compiler\n                      [template]=\"item.value.restField.template\"\n                      [componentClass]=\"item.value.data\"\n                    >\n                    </cng-html-compiler>\n                  </div>\n                </ng-container>\n\n                <ng-container\n                  *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.JSON\"\n                >\n                  <ng-container *ngIf=\"!item.value.restField.template\">\n                    <div class=\"marg\">\n                      <b>{{ item.key | titlecase }}: </b>\n                    </div>\n                    <div class=\"\">\n                      {{ jsonValue(item.value) }}\n                    </div>\n                  </ng-container>\n                  <ng-container *ngIf=\"item.value.restField.template\">\n                    <cng-html-compiler\n                      [template]=\"item.value.restField.template\"\n                      [componentClass]=\"jsonValue(item.value)\"\n                    >\n                    </cng-html-compiler>\n                  </ng-container>\n                </ng-container>\n\n                <ng-container\n                  *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.BOOLEAN\"\n                >\n                  <ng-container *ngIf=\"!item.value.restField.template\">\n                    <div class=\"marg\">\n                      <b>{{ item.key | titlecase }}: </b>\n                    </div>\n\n                    <div class=\"\">\n                      <nb-checkbox\n                        [checked]=\"item.value.data\"\n                        [disabled]=\"true\"\n                      ></nb-checkbox>\n                    </div>\n                  </ng-container>\n\n                  <ng-container *ngIf=\"item.value.restField.template\">\n                    <cng-html-compiler\n                      [template]=\"item.value.restField.template\"\n                      [componentClass]=\"item.value.data\"\n                    >\n                    </cng-html-compiler>\n                  </ng-container>\n                </ng-container>\n\n                <ng-container\n                  *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.IMAGE\"\n                >\n                  <ng-container *ngIf=\"!item.value.restField.template\">\n                    <div class=\"marg\">\n                      <b>{{ item.key | titlecase }}: </b>\n                    </div>\n                    <div class=\"\">\n                      <img\n                        class=\"rest-img\"\n                        [src]=\"item.value.data\"\n                        alt=\"\"\n                        [style]=\"style\"\n                      />\n                    </div>\n                  </ng-container>\n                  <ng-container *ngIf=\"item.value.restField.template\">\n                    <cng-html-compiler\n                      [template]=\"item.value.restField.template\"\n                      [componentClass]=\"item.value.data\"\n                    >\n                    </cng-html-compiler>\n                  </ng-container>\n                </ng-container>\n\n                <ng-container\n                  *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.DATE\"\n                >\n                  <ng-container *ngIf=\"!item.value.restField.template\">\n                    <div class=\"marg\">\n                      <b>{{ item.key | titlecase }}: </b>\n                    </div>\n                    <div class=\"\">\n                      {{ item.value.data | date }}\n                    </div>\n                  </ng-container>\n                  <ng-container *ngIf=\"item.value.restField.template\">\n                    <cng-html-compiler\n                      [template]=\"item.value.restField.template\"\n                      [componentClass]=\"item.value.data\"\n                    >\n                    </cng-html-compiler>\n                  </ng-container>\n                </ng-container>\n\n                <ng-container\n                  *ngIf=\"\n                    item.value.restField.type == REST_FIELD_TYPES.BELONG_TO\n                  \"\n                >\n                  <ng-container *ngIf=\"!item.value.restField.template\">\n                    <div class=\"marg\">\n                      <b>{{ item.value.restField.label | titlecase }}: </b>\n                    </div>\n                    <div class=\"\">\n                      <a\n                        (click)=\"loadBelongToDetail(item.value)\"\n                        nbTooltip=\"{{ 'rest-detail.belongToRef' | translate }}\"\n                        nbTooltipPlacement=\"top\"\n                        class=\"belongTo-link\"\n                      >\n                        {{ item.value.data }}\n                      </a>\n                    </div>\n                  </ng-container>\n                  <ng-container *ngIf=\"item.value.restField.template\">\n                    <cng-html-compiler\n                      [template]=\"item.value.restField.template\"\n                      [componentClass]=\"item.value.data\"\n                    >\n                    </cng-html-compiler>\n                  </ng-container>\n                </ng-container>\n\n                <ng-container\n                  *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.HAS_MANY\"\n                >\n                  <!-- CAS 1 -->\n                  <ng-container\n                    *ngIf=\"\n                      item.value.restField?.metaData?.listConfig\n                        ?.restManyResources &&\n                      !item.value.restField?.metaData?.detailConfig\n                        ?.restManyResources\n                    \"\n                  >\n                    <table [nbTreeGrid]=\"listDataSource[item.key]\">\n                      <tr\n                        nbTreeGridRow\n                        *nbTreeGridRowDef=\"let row; columns: allColumns\"\n                      ></tr>\n\n                      <ng-container [nbTreeGridColumnDef]=\"customColumn\">\n                        <td nbTreeGridCell *nbTreeGridCellDef=\"let row\">\n                          <ngx-fs-icon\n                            [expanded]=\"row.expanded\"\n                            [place]=\"row.data.place\"\n                          ></ngx-fs-icon>\n                          <ng-container\n                            *ngIf=\"\n                              !item.value.restField?.metaData?.listConfig\n                                ?.restManyResources.template\n                            \"\n                          >\n                            <b> {{ row.data[customColumn] }}</b>\n                          </ng-container>\n\n                          <ng-container\n                            *ngIf=\"\n                              item.value.restField?.metaData?.listConfig\n                                ?.restManyResources.template\n                            \"\n                          >\n                            <span *ngIf=\"row.data.place\">\n                              {{ item.value.restField.name }}</span\n                            >\n                            <ng-container *ngIf=\"!row.data.place\">\n                              <cng-html-compiler\n                                [template]=\"\n                                  item.value.restField.metaData.listConfig\n                                    .restManyResources.template\n                                \"\n                                [componentClass]=\"row.data.item\"\n                              >\n                              </cng-html-compiler>\n                            </ng-container>\n                          </ng-container>\n                        </td>\n                      </ng-container>\n                    </table>\n                  </ng-container>\n\n                  <!-- CAS 2 -->\n                  <ng-container\n                    *ngIf=\"\n                      item.value.restField?.metaData?.detailConfig\n                        ?.restManyResources\n                    \"\n                  >\n                    <div\n                      *ngIf=\"\n                        isObject(\n                          item.value.restField.metaData.detailConfig\n                            .restManyResources\n                        );\n                        else cas21\n                      \"\n                    >\n                      <table [nbTreeGrid]=\"listDataSource[item.key]\">\n                        <tr\n                          nbTreeGridRow\n                          *nbTreeGridRowDef=\"let row; columns: allColumns\"\n                        ></tr>\n\n                        <ng-container [nbTreeGridColumnDef]=\"customColumn\">\n                          <td nbTreeGridCell *nbTreeGridCellDef=\"let row\">\n                            <ngx-fs-icon\n                              [expanded]=\"row.expanded\"\n                              [place]=\"row.data.place\"\n                            ></ngx-fs-icon>\n                            <ng-container\n                              *ngIf=\"\n                                !item.value.restField.metaData.detailConfig\n                                  .restManyResources?.template\n                              \"\n                            >\n                              <b> {{ row.data[customColumn] }}</b>\n                            </ng-container>\n\n                            <ng-container\n                              *ngIf=\"\n                                item.value.restField.metaData.detailConfig\n                                  .restManyResources?.template\n                              \"\n                            >\n                              <span *ngIf=\"row.data.place\">\n                                {{ item.value.restField.name }}</span\n                              >\n                              <ng-container *ngIf=\"!row.data.place\">\n                                <cng-html-compiler\n                                  [template]=\"\n                                    item.value.restField.metaData.detailConfig\n                                      .restManyResources.template\n                                  \"\n                                  [componentClass]=\"row.data.item\"\n                                >\n                                </cng-html-compiler>\n                              </ng-container>\n                            </ng-container>\n                          </td>\n                        </ng-container>\n                      </table>\n                    </div>\n                    <ng-template #cas21>\n                      <div\n                        class=\"row\"\n                        *ngFor=\"\n                          let res of listDataSource[item.value.restField.name]\n                        \"\n                      >\n                        <ngx-rest-resource-detail\n                          [resource]=\"res.resource\"\n                          [ID]=\"res.id\"\n                          [ressourceName]=\"res.resourceName\"\n                          [container]=\"true\"\n                          [style]=\"res.style\"\n                        ></ngx-rest-resource-detail>\n                      </div>\n                    </ng-template>\n                  </ng-container>\n                </ng-container>\n\n                <ng-container\n                  *ngIf=\"\n                    item.value.restField.type == REST_FIELD_TYPES.BELONG_TO_MANY\n                  \"\n                >\n                  <table [nbTreeGrid]=\"listDataSource[item.key]\">\n                    <tr\n                      nbTreeGridRow\n                      *nbTreeGridRowDef=\"let row; columns: allColumns\"\n                    ></tr>\n\n                    <ng-container [nbTreeGridColumnDef]=\"customColumn\">\n                      <td nbTreeGridCell *nbTreeGridCellDef=\"let row\">\n                        <ngx-fs-icon\n                          [expanded]=\"row.expanded\"\n                          [place]=\"row.data.place\"\n                        ></ngx-fs-icon>\n                        <ng-container\n                          *ngIf=\"\n                            !item.value.restField.metaData.listConfig\n                              .restBelongToManyResources.template\n                          \"\n                        >\n                          <b> {{ row.data[customColumn] }}</b>\n                        </ng-container>\n\n                        <ng-container\n                          *ngIf=\"\n                            item.value.restField.metaData.listConfig\n                              .restBelongToManyResources.template\n                          \"\n                        >\n                          <span *ngIf=\"row.data.place\">{{\n                            item.value.restField.name\n                          }}</span>\n                          <ng-container *ngIf=\"!row.data.place\">\n                            <cng-html-compiler\n                              [template]=\"\n                                item.value.restField.metaData.listConfig\n                                  .restBelongToManyResources.template\n                              \"\n                              [componentClass]=\"row.data.item\"\n                            >\n                            </cng-html-compiler>\n                          </ng-container>\n                        </ng-container>\n                      </td>\n                    </ng-container>\n                  </table>\n                </ng-container>\n\n                <ng-container\n                  *ngIf=\"item.value.restField.type == REST_FIELD_TYPES.LINK\"\n                >\n                  <ng-container *ngIf=\"!item.value.restField.template\">\n                    <div class=\"marg\">\n                      <b>{{ item.key | titlecase }}: </b>\n                    </div>\n                    <div class=\"\">\n                      <a [href]=\"item.value.data\" target=\"_blank\"\n                        >{{ item.value.data }}\n                      </a>\n\n                      <iframe\n                        [src]=\"sanitizerUrl(item.value.data)\"\n                        *ngIf=\"\n                          item.value.restField?.metaData?.detailConfig\n                            ?.linkConfig\n                            ? !item.value.restField?.metaData?.detailConfig\n                                ?.linkConfig.disabledIframePreview\n                            : true\n                        \"\n                        height=\"400px\"\n                        width=\"100%\"\n                        class=\"mt-2\"\n                      ></iframe>\n                    </div>\n                  </ng-container>\n\n                  <div *ngIf=\"item.value.restField.template\">\n                    <cng-html-compiler\n                      [template]=\"item.value.restField.template\"\n                      [componentClass]=\"item.value.data\"\n                    >\n                    </cng-html-compiler>\n                  </div>\n                </ng-container>\n              </div>\n              <div class=\"\">\n                <ng-container *ngIf=\"item.value.restField.note != ''\">\n                  <span class=\"text-muted ml-20 mt-3\">{{\n                    item.value.restField.note\n                  }}</span>\n                </ng-container>\n              </div>\n            </div>\n          </nb-list-item>\n        </nb-list>\n        <ng-template #tabsContent>\n          <nb-tabset fullWidth>\n            <nb-tab [tabTitle]=\"tabs\" *ngFor=\"let tabs of tabsName\">\n              <nb-list class=\"list-group\">\n                <nb-list-item *ngFor=\"let item of datas1[tabs] | keyvalue\">\n                  <!-- class=\"rest-item-align list-group-item\" -->\n                  <div class=\"d-block\" style=\"margin-left: 15px\">\n                    <div class=\"row\">\n                      <ng-container\n                        *ngIf=\"\n                          item.value.restField.type == REST_FIELD_TYPES.TEXT ||\n                          item.value.restField.type ==\n                            REST_FIELD_TYPES.STRING ||\n                          item.value.restField.type ==\n                            REST_FIELD_TYPES.NUMBER ||\n                          item.value.restField.type == REST_FIELD_TYPES.ENUM\n                        \"\n                      >\n                        <ng-container *ngIf=\"!item.value.restField.template\">\n                          <div class=\"marg\">\n                            <b>{{ item.key | titlecase }}: </b>\n                          </div>\n                          <div class=\"\">\n                            {{ item.value.data }}\n                          </div>\n                        </ng-container>\n\n                        <div *ngIf=\"item.value.restField.template\">\n                          <cng-html-compiler\n                            [template]=\"item.value.restField.template\"\n                            [componentClass]=\"item.value.data\"\n                          >\n                          </cng-html-compiler>\n                        </div>\n                      </ng-container>\n\n                      <ng-container\n                        *ngIf=\"\n                          item.value.restField.type == REST_FIELD_TYPES.COLOR\n                        \"\n                      >\n                        <ng-container *ngIf=\"!item.value.restField.template\">\n                          <div class=\"marg\">\n                            <b>{{ item.key | titlecase }}: </b>\n                          </div>\n                          <div class=\"\">\n                            {{ item.value.data }}\n                          </div>\n                          <input\n                            style=\"height: 45px; width: 80px; margin-left: 5px\"\n                            disabled=\"true\"\n                            [placeholder]=\"item.value.data\"\n                            [value]=\"item.value.data\"\n                            type=\"color\"\n                          />\n                        </ng-container>\n\n                        <div *ngIf=\"item.value.restField.template\">\n                          <cng-html-compiler\n                            [template]=\"item.value.restField.template\"\n                            [componentClass]=\"item.value.data\"\n                          >\n                          </cng-html-compiler>\n                        </div>\n                      </ng-container>\n\n                      <ng-container\n                        *ngIf=\"\n                          item.value.restField.type == REST_FIELD_TYPES.BOOLEAN\n                        \"\n                      >\n                        <ng-container *ngIf=\"!item.value.restField.template\">\n                          <div class=\"marg\">\n                            <b>{{ item.key | titlecase }}: </b>\n                          </div>\n\n                          <div class=\"\">\n                            <nb-checkbox\n                              [checked]=\"item.value.data\"\n                              [disabled]=\"true\"\n                            ></nb-checkbox>\n                          </div>\n                        </ng-container>\n\n                        <ng-container *ngIf=\"item.value.restField.template\">\n                          <cng-html-compiler\n                            [template]=\"item.value.restField.template\"\n                            [componentClass]=\"item.value.data\"\n                          >\n                          </cng-html-compiler>\n                        </ng-container>\n                      </ng-container>\n\n                      <ng-container\n                        *ngIf=\"\n                          item.value.restField.type == REST_FIELD_TYPES.IMAGE\n                        \"\n                      >\n                        <ng-container *ngIf=\"!item.value.restField.template\">\n                          <div class=\"marg\">\n                            <b>{{ item.key | titlecase }}: </b>\n                          </div>\n                          <div class=\"\">\n                            <img\n                              class=\"rest-img\"\n                              [src]=\"item.value.data\"\n                              alt=\"\"\n                              [style]=\"style\"\n                            />\n                          </div>\n                        </ng-container>\n                        <ng-container *ngIf=\"item.value.restField.template\">\n                          <cng-html-compiler\n                            [template]=\"item.value.restField.template\"\n                            [componentClass]=\"item.value.data\"\n                          >\n                          </cng-html-compiler>\n                        </ng-container>\n                      </ng-container>\n\n                      <ng-container\n                        *ngIf=\"\n                          item.value.restField.type == REST_FIELD_TYPES.JSON\n                        \"\n                      >\n                        <ng-container *ngIf=\"!item.value.restField.template\">\n                          <div class=\"marg\">\n                            <b>{{ item.key | titlecase }}: </b>\n                          </div>\n                          <div class=\"\">\n                            {{ jsonValue(item.value) }}\n                          </div>\n                        </ng-container>\n                        <ng-container *ngIf=\"item.value.restField.template\">\n                          <cng-html-compiler\n                            [template]=\"item.value.restField.template\"\n                            [componentClass]=\"jsonValue(item.value)\"\n                          >\n                          </cng-html-compiler>\n                        </ng-container>\n                      </ng-container>\n\n                      <ng-container\n                        *ngIf=\"\n                          item.value.restField.type == REST_FIELD_TYPES.DATE\n                        \"\n                      >\n                        <ng-container *ngIf=\"!item.value.restField.template\">\n                          <div class=\"marg\">\n                            <b>{{ item.key | titlecase }}: </b>\n                          </div>\n                          <div class=\"\">\n                            {{ item.value.data | date }}\n                          </div>\n                        </ng-container>\n                        <ng-container *ngIf=\"item.value.restField.template\">\n                          <cng-html-compiler\n                            [template]=\"item.value.restField.template\"\n                            [componentClass]=\"item.value.data\"\n                          >\n                          </cng-html-compiler>\n                        </ng-container>\n                      </ng-container>\n\n                      <ng-container\n                        *ngIf=\"\n                          item.value.restField.type ==\n                          REST_FIELD_TYPES.BELONG_TO\n                        \"\n                      >\n                        <ng-container *ngIf=\"!item.value.restField.template\">\n                          <div class=\"marg\">\n                            <b\n                              >{{ item.value.restField.label | titlecase }}:\n                            </b>\n                          </div>\n                          <div class=\"\">\n                            <a\n                              (click)=\"loadBelongToDetail(item.value)\"\n                              nbTooltip=\"{{\n                                'rest-detail.belongToRef' | translate\n                              }}\"\n                              nbTooltipPlacement=\"top\"\n                              class=\"belongTo-link\"\n                            >\n                              {{ item.value.data }}\n                            </a>\n                          </div>\n                        </ng-container>\n                        <ng-container *ngIf=\"item.value.restField.template\">\n                          <cng-html-compiler\n                            [template]=\"item.value.restField.template\"\n                            [componentClass]=\"item.value.data\"\n                          >\n                          </cng-html-compiler>\n                        </ng-container>\n                      </ng-container>\n\n                      <ng-container\n                        *ngIf=\"\n                          item.value.restField.type == REST_FIELD_TYPES.HAS_MANY\n                        \"\n                      >\n                        <ng-container\n                          *ngIf=\"\n                            item.value.restField?.metaData?.listConfig\n                              ?.restManyResources &&\n                            !item.value.restField?.metaData?.detailConfig\n                              ?.restManyResources\n                          \"\n                        >\n                          <table [nbTreeGrid]=\"listDataSource[item.key]\">\n                            <tr\n                              nbTreeGridRow\n                              *nbTreeGridRowDef=\"let row; columns: allColumns\"\n                            ></tr>\n\n                            <ng-container [nbTreeGridColumnDef]=\"customColumn\">\n                              <td nbTreeGridCell *nbTreeGridCellDef=\"let row\">\n                                <ngx-fs-icon\n                                  [expanded]=\"row.expanded\"\n                                  [place]=\"row.data.place\"\n                                ></ngx-fs-icon>\n                                <ng-container\n                                  *ngIf=\"\n                                    !item.value.restField?.metaData?.listConfig\n                                      ?.restManyResources.template\n                                  \"\n                                >\n                                  <b> {{ row.data[customColumn] }}</b>\n                                </ng-container>\n\n                                <ng-container\n                                  *ngIf=\"\n                                    item.value.restField?.metaData?.listConfig\n                                      ?.restManyResources.template\n                                  \"\n                                >\n                                  <span *ngIf=\"row.data.place\">\n                                    {{ item.value.restField.name }}</span\n                                  >\n                                  <ng-container *ngIf=\"!row.data.place\">\n                                    <cng-html-compiler\n                                      [template]=\"\n                                        item.value.restField.metaData.listConfig\n                                          .restManyResources.template\n                                      \"\n                                      [componentClass]=\"row.data.item\"\n                                    >\n                                    </cng-html-compiler>\n                                  </ng-container>\n                                </ng-container>\n                              </td>\n                            </ng-container>\n                          </table>\n                        </ng-container>\n                        <ng-container\n                          *ngIf=\"\n                            item.value.restField?.metaData?.detailConfig\n                              ?.restManyResources\n                          \"\n                        >\n                          <ng-container\n                            *ngIf=\"\n                              isObject(\n                                item.value.restField?.metaData?.detailConfig\n                                  ?.restManyResources\n                              );\n                              else displayRes\n                            \"\n                          >\n                            <table [nbTreeGrid]=\"listDataSource[item.key]\">\n                              <tr\n                                nbTreeGridRow\n                                *nbTreeGridRowDef=\"let row; columns: allColumns\"\n                              ></tr>\n\n                              <ng-container\n                                [nbTreeGridColumnDef]=\"customColumn\"\n                              >\n                                <td nbTreeGridCell *nbTreeGridCellDef=\"let row\">\n                                  <ngx-fs-icon\n                                    [expanded]=\"row.expanded\"\n                                    [place]=\"row.data.place\"\n                                  ></ngx-fs-icon>\n                                  <ng-container\n                                    *ngIf=\"\n                                      !item.value.restField?.metaData\n                                        ?.detailConfig?.restManyResources\n                                        .template\n                                    \"\n                                  >\n                                    <b> {{ row.data[customColumn] }}</b>\n                                  </ng-container>\n\n                                  <ng-container\n                                    *ngIf=\"\n                                      item.value.restField?.metaData\n                                        ?.detailConfig?.restManyResources\n                                        .template\n                                    \"\n                                  >\n                                    <span *ngIf=\"row.data.place\">\n                                      {{ item.value.restField.name }}</span\n                                    >\n                                    <ng-container *ngIf=\"!row.data.place\">\n                                      <cng-html-compiler\n                                        [template]=\"\n                                          item.value.restField.metaData\n                                            .detailConfig.restManyResources\n                                            .template\n                                        \"\n                                        [componentClass]=\"row.data.item\"\n                                      >\n                                      </cng-html-compiler>\n                                    </ng-container>\n                                  </ng-container>\n                                </td>\n                              </ng-container>\n                            </table>\n                          </ng-container>\n                          <ng-template #displayRes>\n                            <div\n                              class=\"row\"\n                              *ngFor=\"\n                                let res of listDataSource[\n                                  item.value.restField.name\n                                ]\n                              \"\n                            >\n                              <ngx-rest-resource-detail\n                                [resource]=\"res.resource\"\n                                [ID]=\"res.id\"\n                                [ressourceName]=\"res.resourceName\"\n                                [container]=\"true\"\n                                [style]=\"res.style\"\n                              ></ngx-rest-resource-detail>\n                            </div>\n                          </ng-template>\n                        </ng-container>\n                      </ng-container>\n\n                      <ng-container\n                        *ngIf=\"\n                          item.value.restField.type ==\n                          REST_FIELD_TYPES.BELONG_TO_MANY\n                        \"\n                      >\n                        <table [nbTreeGrid]=\"listDataSource[item.key]\">\n                          <tr\n                            nbTreeGridRow\n                            *nbTreeGridRowDef=\"let row; columns: allColumns\"\n                          ></tr>\n\n                          <ng-container [nbTreeGridColumnDef]=\"customColumn\">\n                            <td nbTreeGridCell *nbTreeGridCellDef=\"let row\">\n                              <ngx-fs-icon\n                                [expanded]=\"row.expanded\"\n                                [place]=\"row.data.place\"\n                              ></ngx-fs-icon>\n                              <ng-container\n                                *ngIf=\"\n                                  !item.value.restField.metaData.listConfig\n                                    .restBelongToManyResources.template\n                                \"\n                              >\n                                <b> {{ row.data[customColumn] }}</b>\n                              </ng-container>\n\n                              <ng-container\n                                *ngIf=\"\n                                  item.value.restField.metaData.listConfig\n                                    .restBelongToManyResources.template\n                                \"\n                              >\n                                <span *ngIf=\"row.data.place\">{{\n                                  item.value.restField.name\n                                }}</span>\n                                <ng-container *ngIf=\"!row.data.place\">\n                                  <cng-html-compiler\n                                    [template]=\"\n                                      item.value.restField.metaData.listConfig\n                                        .restBelongToManyResources.template\n                                    \"\n                                    [componentClass]=\"row.data.item\"\n                                  >\n                                  </cng-html-compiler>\n                                </ng-container>\n                              </ng-container>\n                            </td>\n                          </ng-container>\n                        </table>\n                      </ng-container>\n\n                      <ng-container\n                        *ngIf=\"\n                          item.value.restField.type == REST_FIELD_TYPES.LINK\n                        \"\n                      >\n                        <ng-container *ngIf=\"!item.value.restField.template\">\n                          <div class=\"marg\">\n                            <b>{{ item.key | titlecase }}: </b>\n                          </div>\n                          <div class=\"\">\n                            <a [href]=\"item.value.data\" target=\"_blank\"\n                              >{{ item.value.data }}\n                            </a>\n\n                            <iframe\n                              [src]=\"sanitizerUrl(item.value.data)\"\n                              *ngIf=\"\n                                item.value.restField?.metaData?.detailConfig\n                                  ?.linkConfig\n                                  ? !item.value.restField?.metaData\n                                      ?.detailConfig?.linkConfig\n                                      .disabledIframePreview\n                                  : true\n                              \"\n                              height=\"400px\"\n                              width=\"100%\"\n                              class=\"mt-2\"\n                            ></iframe>\n                          </div>\n                        </ng-container>\n\n                        <div *ngIf=\"item.value.restField.template\">\n                          <cng-html-compiler\n                            [template]=\"item.value.restField.template\"\n                            [componentClass]=\"item.value.data\"\n                          >\n                          </cng-html-compiler>\n                        </div>\n                      </ng-container>\n                    </div>\n                    <div class=\"\">\n                      <ng-container *ngIf=\"item.value.restField.note != ''\">\n                        <span class=\"text-muted ml-20 mt-3\">{{\n                          item.value.restField.note\n                        }}</span>\n                      </ng-container>\n                    </div>\n                  </div>\n                </nb-list-item>\n              </nb-list>\n            </nb-tab>\n          </nb-tabset>\n        </ng-template>\n      </nb-card-body>\n\n      <nb-card-footer *ngIf=\"datas && !container\">\n        <div class=\"buttons-row text-center\" fullWidth>\n          <button\n            nbButton\n            status=\"secondary\"\n            style=\"margin-right: 10px\"\n            (click)=\"listEntity()\"\n          >\n            {{ \"rest-detail.btnCancel\" | translate }}\n          </button>\n\n          <button\n            nbButton\n            status=\"primary\"\n            (click)=\"editEntity()\"\n            *ngxPermissionsOnly=\"PERMISSION.UPDATE\"\n          >\n            {{ \"rest-detail.btnEdit\" | translate }}\n          </button>\n\n          <button\n            nbButton\n            status=\"danger\"\n            style=\"margin-left: 10px\"\n            (click)=\"deleteEntity()\"\n            *ngxPermissionsOnly=\"PERMISSION.DELETE\"\n          >\n            {{ \"rest-detail.btnDelete\" | translate }}\n          </button>\n        </div>\n      </nb-card-footer>\n    </nb-card>\n  </div>\n</ng-container>\n", styles: [".belongTo-link:hover{text-decoration:underline!important;cursor:pointer}img{max-width:300px;max-height:200px}.color-card{width:80px;height:30px;border-radius:2px;border-width:2px;margin-left:5px;justify-content:center;align-items:center}:host nb-tab{padding:1.25rem}.rest-item-align{padding-block:3}.marg{margin-right:25px}\n"], components: [{ type: i4.NbCardComponent, selector: "nb-card", inputs: ["status", "accent", "size"] }, { type: i4.NbCardHeaderComponent, selector: "nb-card-header" }, { type: i4.NbCardBodyComponent, selector: "nb-card-body" }, { type: i4.NbListComponent, selector: "nb-list", inputs: ["role"] }, { type: i4.NbListItemComponent, selector: "nb-list-item", inputs: ["role"] }, { type: i8.CngHtmlCompilerComponent, selector: "cng-html-compiler", inputs: ["template", "componentClass", "imports"] }, { type: i9.NgxDropzoneComponent, selector: "ngx-dropzone, [ngx-dropzone]", inputs: ["accept", "disabled", "multiple", "maxFileSize", "expandable", "disableClick", "processDirectoryDrop", "id", "aria-label", "aria-labelledby", "aria-describedby"], outputs: ["change"] }, { type: i9.NgxDropzonePreviewComponent, selector: "ngx-dropzone-preview", inputs: ["file", "removable"], outputs: ["removed"] }, { type: i4.NbCheckboxComponent, selector: "nb-checkbox", inputs: ["status", "checked", "disabled", "indeterminate"], outputs: ["checkedChange"] }, { type: i4.NbTreeGridComponent, selector: "table[nbTreeGrid]", inputs: ["levelPadding", "nbTreeGrid", "equalColumnsWidth"] }, { type: i4.NbTreeGridRowComponent, selector: "tr[nbTreeGridRow]", inputs: ["doubleClickDelay", "clickToToggle"] }, { type: i10.FsIconCComponent, selector: "ngx-fs-icon", inputs: ["expanded", "place"] }, { type: RestResourceDetailComponent, selector: "ngx-rest-resource-detail", inputs: ["resource", "ID", "ressourceName", "container", "style"] }, { type: i4.NbTabsetComponent, selector: "nb-tabset", inputs: ["fullWidth", "routeParam"], outputs: ["changeTab"] }, { type: i4.NbTabComponent, selector: "nb-tab", inputs: ["badgeStatus", "badgeDot", "disabled", "responsive", "active", "lazyLoad", "tabTitle", "tabId", "tabIcon", "route", "badgeText", "badgePosition"] }, { type: i4.NbCardFooterComponent, selector: "nb-card-footer" }, { type: i4.NbButtonComponent, selector: "button[nbButton],a[nbButton],input[type=\"button\"][nbButton],input[type=\"submit\"][nbButton]", inputs: ["hero"] }], directives: [{ type: i11.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { type: i11.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { type: i9.NgxDropzoneLabelDirective, selector: "ngx-dropzone-label" }, { type: i4.NbTooltipDirective, selector: "[nbTooltip]", inputs: ["nbTooltipPlacement", "nbTooltipTrigger", "nbTooltipOffset", "nbTooltipAdjustment", "nbTooltipClass", "nbTooltipIcon", "nbTooltipStatus", "nbTooltip"], outputs: ["nbTooltipShowStateChange"], exportAs: ["nbTooltip"] }, { type: i4.NbTreeGridRowDefDirective, selector: "[nbTreeGridRowDef]", inputs: ["nbTreeGridRowDefColumns"] }, { type: i4.NbTreeGridColumnDefDirective, selector: "[nbTreeGridColumnDef]", inputs: ["nbTreeGridColumnDef", "hideOn", "showOn"] }, { type: i4.NbTreeGridCellDefDirective, selector: "[nbTreeGridCellDef]" }, { type: i4.NbTreeGridCellDirective, selector: "td[nbTreeGridCell]" }, { type: i7.NgxPermissionsDirective, selector: "[ngxPermissionsOnly],[ngxPermissionsExcept]", inputs: ["ngxPermissionsOnly", "ngxPermissionsOnlyThen", "ngxPermissionsOnlyElse", "ngxPermissionsExcept", "ngxPermissionsExceptElse", "ngxPermissionsExceptThen", "ngxPermissionsThen", "ngxPermissionsElse", "ngxPermissionsOnlyAuthorisedStrategy", "ngxPermissionsOnlyUnauthorisedStrategy", "ngxPermissionsExceptUnauthorisedStrategy", "ngxPermissionsExceptAuthorisedStrategy", "ngxPermissionsUnauthorisedStrategy", "ngxPermissionsAuthorisedStrategy"], outputs: ["permissionsAuthorized", "permissionsUnauthorized"] }], pipes: { "titlecase": i11.TitleCasePipe, "keyvalue": i11.KeyValuePipe, "date": i11.DatePipe, "translate": i12.TranslatePipe } });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "12.1.5", ngImport: i0, type: RestResourceDetailComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'ngx-rest-resource-detail',
                    templateUrl: './rest-resource-detail.component.html',
                    styleUrls: ['./rest-resource-detail.component.scss'],
                }]
        }], ctorParameters: function () { return [{ type: i1.ActivatedRoute }, { type: i2.RestResourceService }, { type: i3.RestAdminConfigService }, { type: i1.Router }, { type: i4.NbTreeGridDataSourceBuilder }, { type: i4.NbDialogService }, { type: i5.RestLangService }, { type: i6.DomSanitizer }, { type: i7.NgxPermissionsService }]; }, propDecorators: { resource: [{
                type: Input
            }], ID: [{
                type: Input
            }], ressourceName: [{
                type: Input
            }], container: [{
                type: Input
            }], style: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,